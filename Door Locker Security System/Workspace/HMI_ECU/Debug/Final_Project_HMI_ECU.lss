
Final_Project_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00003386  0000341a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800180  00800180  0000353a  2**0
                  ALLOC
  3 .stab         000031f8  00000000  00000000  0000353c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011df  00000000  00000000  00006734  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007913  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000980c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a6f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b4a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b604  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b891  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c05f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__vector_7>
      20:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__vector_8>
      24:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2b 0b 	call	0x1656	; 0x1656 <main>
      8a:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 45 19 	jmp	0x328a	; 0x328a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 45 19 	jmp	0x328a	; 0x328a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_Tick>:

/* Description:
 * The callback function called by the timer driver
 */
void Timer1_Tick()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	tick++;
     b4e:	80 91 80 01 	lds	r24, 0x0180
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 80 01 	sts	0x0180, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <SetPassword>:
 * Function responsible for setting the password for the first time
 * or if the user wanted to change the password
 * Return : status of the two entered passwords either its MATCHED or not
 */
uint8 SetPassword()
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	ac 97       	sbiw	r28, 0x2c	; 44
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
	uint8 i,key=KEYPAD_NOT_PRESSED;
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	8b a7       	std	Y+43, r24	; 0x2b
	for (i=0 ; i<PASSWORD_SIZE ; i++){
     b76:	1c a6       	std	Y+44, r1	; 0x2c
     b78:	85 c0       	rjmp	.+266    	; 0xc84 <SetPassword+0x126>

		key = KEYPAD_GetPressedKey();
     b7a:	0e 94 2d 10 	call	0x205a	; 0x205a <KEYPAD_GetPressedKey>
     b7e:	8b a7       	std	Y+43, r24	; 0x2b
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a6 e9       	ldi	r26, 0x96	; 150
     b86:	b3 e4       	ldi	r27, 0x43	; 67
     b88:	8f a3       	std	Y+39, r24	; 0x27
     b8a:	98 a7       	std	Y+40, r25	; 0x28
     b8c:	a9 a7       	std	Y+41, r26	; 0x29
     b8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b90:	6f a1       	ldd	r22, Y+39	; 0x27
     b92:	78 a5       	ldd	r23, Y+40	; 0x28
     b94:	89 a5       	ldd	r24, Y+41	; 0x29
     b96:	9a a5       	ldd	r25, Y+42	; 0x2a
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	4a ef       	ldi	r20, 0xFA	; 250
     b9e:	54 e4       	ldi	r21, 0x44	; 68
     ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba4:	dc 01       	movw	r26, r24
     ba6:	cb 01       	movw	r24, r22
     ba8:	8b a3       	std	Y+35, r24	; 0x23
     baa:	9c a3       	std	Y+36, r25	; 0x24
     bac:	ad a3       	std	Y+37, r26	; 0x25
     bae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bb0:	6b a1       	ldd	r22, Y+35	; 0x23
     bb2:	7c a1       	ldd	r23, Y+36	; 0x24
     bb4:	8d a1       	ldd	r24, Y+37	; 0x25
     bb6:	9e a1       	ldd	r25, Y+38	; 0x26
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e8       	ldi	r20, 0x80	; 128
     bbe:	5f e3       	ldi	r21, 0x3F	; 63
     bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc4:	88 23       	and	r24, r24
     bc6:	2c f4       	brge	.+10     	; 0xbd2 <SetPassword+0x74>
		__ticks = 1;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	9a a3       	std	Y+34, r25	; 0x22
     bce:	89 a3       	std	Y+33, r24	; 0x21
     bd0:	3f c0       	rjmp	.+126    	; 0xc50 <SetPassword+0xf2>
	else if (__tmp > 65535)
     bd2:	6b a1       	ldd	r22, Y+35	; 0x23
     bd4:	7c a1       	ldd	r23, Y+36	; 0x24
     bd6:	8d a1       	ldd	r24, Y+37	; 0x25
     bd8:	9e a1       	ldd	r25, Y+38	; 0x26
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	3f ef       	ldi	r19, 0xFF	; 255
     bde:	4f e7       	ldi	r20, 0x7F	; 127
     be0:	57 e4       	ldi	r21, 0x47	; 71
     be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be6:	18 16       	cp	r1, r24
     be8:	4c f5       	brge	.+82     	; 0xc3c <SetPassword+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bea:	6f a1       	ldd	r22, Y+39	; 0x27
     bec:	78 a5       	ldd	r23, Y+40	; 0x28
     bee:	89 a5       	ldd	r24, Y+41	; 0x29
     bf0:	9a a5       	ldd	r25, Y+42	; 0x2a
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	40 e2       	ldi	r20, 0x20	; 32
     bf8:	51 e4       	ldi	r21, 0x41	; 65
     bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
     c02:	bc 01       	movw	r22, r24
     c04:	cd 01       	movw	r24, r26
     c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	9a a3       	std	Y+34, r25	; 0x22
     c10:	89 a3       	std	Y+33, r24	; 0x21
     c12:	0f c0       	rjmp	.+30     	; 0xc32 <SetPassword+0xd4>
     c14:	88 ec       	ldi	r24, 0xC8	; 200
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	98 a3       	std	Y+32, r25	; 0x20
     c1a:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c1e:	98 a1       	ldd	r25, Y+32	; 0x20
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <SetPassword+0xc2>
     c24:	98 a3       	std	Y+32, r25	; 0x20
     c26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c28:	89 a1       	ldd	r24, Y+33	; 0x21
     c2a:	9a a1       	ldd	r25, Y+34	; 0x22
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	9a a3       	std	Y+34, r25	; 0x22
     c30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c32:	89 a1       	ldd	r24, Y+33	; 0x21
     c34:	9a a1       	ldd	r25, Y+34	; 0x22
     c36:	00 97       	sbiw	r24, 0x00	; 0
     c38:	69 f7       	brne	.-38     	; 0xc14 <SetPassword+0xb6>
     c3a:	14 c0       	rjmp	.+40     	; 0xc64 <SetPassword+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3c:	6b a1       	ldd	r22, Y+35	; 0x23
     c3e:	7c a1       	ldd	r23, Y+36	; 0x24
     c40:	8d a1       	ldd	r24, Y+37	; 0x25
     c42:	9e a1       	ldd	r25, Y+38	; 0x26
     c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	9a a3       	std	Y+34, r25	; 0x22
     c4e:	89 a3       	std	Y+33, r24	; 0x21
     c50:	89 a1       	ldd	r24, Y+33	; 0x21
     c52:	9a a1       	ldd	r25, Y+34	; 0x22
     c54:	9e 8f       	std	Y+30, r25	; 0x1e
     c56:	8d 8f       	std	Y+29, r24	; 0x1d
     c58:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <SetPassword+0xfe>
     c60:	9e 8f       	std	Y+30, r25	; 0x1e
     c62:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(300);
		if ((key >=0) && (key <=9)){
     c64:	8b a5       	ldd	r24, Y+43	; 0x2b
     c66:	8a 30       	cpi	r24, 0x0A	; 10
     c68:	38 f4       	brcc	.+14     	; 0xc78 <SetPassword+0x11a>
			LCD_DisplayCharacter('*');
     c6a:	8a e2       	ldi	r24, 0x2A	; 42
     c6c:	0e 94 b0 13 	call	0x2760	; 0x2760 <LCD_DisplayCharacter>
			UART_SendByte(key);
     c70:	8b a5       	ldd	r24, Y+43	; 0x2b
     c72:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <SetPassword+0x120>
		}
		else {
			i--; /* To ensure that only numbers will be entered */
     c78:	8c a5       	ldd	r24, Y+44	; 0x2c
     c7a:	81 50       	subi	r24, 0x01	; 1
     c7c:	8c a7       	std	Y+44, r24	; 0x2c
 * Return : status of the two entered passwords either its MATCHED or not
 */
uint8 SetPassword()
{
	uint8 i,key=KEYPAD_NOT_PRESSED;
	for (i=0 ; i<PASSWORD_SIZE ; i++){
     c7e:	8c a5       	ldd	r24, Y+44	; 0x2c
     c80:	8f 5f       	subi	r24, 0xFF	; 255
     c82:	8c a7       	std	Y+44, r24	; 0x2c
     c84:	8c a5       	ldd	r24, Y+44	; 0x2c
     c86:	85 30       	cpi	r24, 0x05	; 5
     c88:	08 f4       	brcc	.+2      	; 0xc8c <SetPassword+0x12e>
     c8a:	77 cf       	rjmp	.-274    	; 0xb7a <SetPassword+0x1c>
		else {
			i--; /* To ensure that only numbers will be entered */
		}
	}

	key = KEYPAD_GetPressedKey();
     c8c:	0e 94 2d 10 	call	0x205a	; 0x205a <KEYPAD_GetPressedKey>
     c90:	8b a7       	std	Y+43, r24	; 0x2b

	if (key == '='){
     c92:	8b a5       	ldd	r24, Y+43	; 0x2b
     c94:	8d 33       	cpi	r24, 0x3D	; 61
     c96:	81 f4       	brne	.+32     	; 0xcb8 <SetPassword+0x15a>
		LCD_ClearScreen();
     c98:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_ClearScreen>
		LCD_DisplayStringRowColumn(0,0,"Pls Re-Enter the");
     c9c:	20 e6       	ldi	r18, 0x60	; 96
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	a9 01       	movw	r20, r18
     ca6:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_DisplayStringRowColumn>
		LCD_DisplayStringRowColumn(1,0,"same pass:");
     caa:	21 e7       	ldi	r18, 0x71	; 113
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	a9 01       	movw	r20, r18
     cb4:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_DisplayStringRowColumn>
	}
	LCD_MoveCursor(10,1);
     cb8:	8a e0       	ldi	r24, 0x0A	; 10
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_MoveCursor>
	for (i=0 ; i<PASSWORD_SIZE ; i++){
     cc0:	1c a6       	std	Y+44, r1	; 0x2c
     cc2:	85 c0       	rjmp	.+266    	; 0xdce <SetPassword+0x270>
		key = KEYPAD_GetPressedKey();
     cc4:	0e 94 2d 10 	call	0x205a	; 0x205a <KEYPAD_GetPressedKey>
     cc8:	8b a7       	std	Y+43, r24	; 0x2b
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a6 e9       	ldi	r26, 0x96	; 150
     cd0:	b3 e4       	ldi	r27, 0x43	; 67
     cd2:	89 8f       	std	Y+25, r24	; 0x19
     cd4:	9a 8f       	std	Y+26, r25	; 0x1a
     cd6:	ab 8f       	std	Y+27, r26	; 0x1b
     cd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cda:	69 8d       	ldd	r22, Y+25	; 0x19
     cdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cde:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ce0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	4a ef       	ldi	r20, 0xFA	; 250
     ce8:	54 e4       	ldi	r21, 0x44	; 68
     cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	8d 8b       	std	Y+21, r24	; 0x15
     cf4:	9e 8b       	std	Y+22, r25	; 0x16
     cf6:	af 8b       	std	Y+23, r26	; 0x17
     cf8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cfa:	6d 89       	ldd	r22, Y+21	; 0x15
     cfc:	7e 89       	ldd	r23, Y+22	; 0x16
     cfe:	8f 89       	ldd	r24, Y+23	; 0x17
     d00:	98 8d       	ldd	r25, Y+24	; 0x18
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e8       	ldi	r20, 0x80	; 128
     d08:	5f e3       	ldi	r21, 0x3F	; 63
     d0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d0e:	88 23       	and	r24, r24
     d10:	2c f4       	brge	.+10     	; 0xd1c <SetPassword+0x1be>
		__ticks = 1;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	9c 8b       	std	Y+20, r25	; 0x14
     d18:	8b 8b       	std	Y+19, r24	; 0x13
     d1a:	3f c0       	rjmp	.+126    	; 0xd9a <SetPassword+0x23c>
	else if (__tmp > 65535)
     d1c:	6d 89       	ldd	r22, Y+21	; 0x15
     d1e:	7e 89       	ldd	r23, Y+22	; 0x16
     d20:	8f 89       	ldd	r24, Y+23	; 0x17
     d22:	98 8d       	ldd	r25, Y+24	; 0x18
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	3f ef       	ldi	r19, 0xFF	; 255
     d28:	4f e7       	ldi	r20, 0x7F	; 127
     d2a:	57 e4       	ldi	r21, 0x47	; 71
     d2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d30:	18 16       	cp	r1, r24
     d32:	4c f5       	brge	.+82     	; 0xd86 <SetPassword+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d34:	69 8d       	ldd	r22, Y+25	; 0x19
     d36:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d38:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	40 e2       	ldi	r20, 0x20	; 32
     d42:	51 e4       	ldi	r21, 0x41	; 65
     d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	bc 01       	movw	r22, r24
     d4e:	cd 01       	movw	r24, r26
     d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	9c 8b       	std	Y+20, r25	; 0x14
     d5a:	8b 8b       	std	Y+19, r24	; 0x13
     d5c:	0f c0       	rjmp	.+30     	; 0xd7c <SetPassword+0x21e>
     d5e:	88 ec       	ldi	r24, 0xC8	; 200
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	9a 8b       	std	Y+18, r25	; 0x12
     d64:	89 8b       	std	Y+17, r24	; 0x11
     d66:	89 89       	ldd	r24, Y+17	; 0x11
     d68:	9a 89       	ldd	r25, Y+18	; 0x12
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <SetPassword+0x20c>
     d6e:	9a 8b       	std	Y+18, r25	; 0x12
     d70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d72:	8b 89       	ldd	r24, Y+19	; 0x13
     d74:	9c 89       	ldd	r25, Y+20	; 0x14
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	9c 8b       	std	Y+20, r25	; 0x14
     d7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7c:	8b 89       	ldd	r24, Y+19	; 0x13
     d7e:	9c 89       	ldd	r25, Y+20	; 0x14
     d80:	00 97       	sbiw	r24, 0x00	; 0
     d82:	69 f7       	brne	.-38     	; 0xd5e <SetPassword+0x200>
     d84:	14 c0       	rjmp	.+40     	; 0xdae <SetPassword+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d86:	6d 89       	ldd	r22, Y+21	; 0x15
     d88:	7e 89       	ldd	r23, Y+22	; 0x16
     d8a:	8f 89       	ldd	r24, Y+23	; 0x17
     d8c:	98 8d       	ldd	r25, Y+24	; 0x18
     d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	9c 8b       	std	Y+20, r25	; 0x14
     d98:	8b 8b       	std	Y+19, r24	; 0x13
     d9a:	8b 89       	ldd	r24, Y+19	; 0x13
     d9c:	9c 89       	ldd	r25, Y+20	; 0x14
     d9e:	98 8b       	std	Y+16, r25	; 0x10
     da0:	8f 87       	std	Y+15, r24	; 0x0f
     da2:	8f 85       	ldd	r24, Y+15	; 0x0f
     da4:	98 89       	ldd	r25, Y+16	; 0x10
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <SetPassword+0x248>
     daa:	98 8b       	std	Y+16, r25	; 0x10
     dac:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		if ((key >=0) && (key <=9)){
     dae:	8b a5       	ldd	r24, Y+43	; 0x2b
     db0:	8a 30       	cpi	r24, 0x0A	; 10
     db2:	38 f4       	brcc	.+14     	; 0xdc2 <SetPassword+0x264>
			LCD_DisplayCharacter('*');
     db4:	8a e2       	ldi	r24, 0x2A	; 42
     db6:	0e 94 b0 13 	call	0x2760	; 0x2760 <LCD_DisplayCharacter>
			UART_SendByte(key);
     dba:	8b a5       	ldd	r24, Y+43	; 0x2b
     dbc:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
     dc0:	03 c0       	rjmp	.+6      	; 0xdc8 <SetPassword+0x26a>
		}
		else {
			i--; /* To ensure that only numbers will be entered */
     dc2:	8c a5       	ldd	r24, Y+44	; 0x2c
     dc4:	81 50       	subi	r24, 0x01	; 1
     dc6:	8c a7       	std	Y+44, r24	; 0x2c
		LCD_ClearScreen();
		LCD_DisplayStringRowColumn(0,0,"Pls Re-Enter the");
		LCD_DisplayStringRowColumn(1,0,"same pass:");
	}
	LCD_MoveCursor(10,1);
	for (i=0 ; i<PASSWORD_SIZE ; i++){
     dc8:	8c a5       	ldd	r24, Y+44	; 0x2c
     dca:	8f 5f       	subi	r24, 0xFF	; 255
     dcc:	8c a7       	std	Y+44, r24	; 0x2c
     dce:	8c a5       	ldd	r24, Y+44	; 0x2c
     dd0:	85 30       	cpi	r24, 0x05	; 5
     dd2:	08 f4       	brcc	.+2      	; 0xdd6 <SetPassword+0x278>
     dd4:	77 cf       	rjmp	.-274    	; 0xcc4 <SetPassword+0x166>
		else {
			i--; /* To ensure that only numbers will be entered */
		}
	}

	key=KEYPAD_GetPressedKey();
     dd6:	0e 94 2d 10 	call	0x205a	; 0x205a <KEYPAD_GetPressedKey>
     dda:	8b a7       	std	Y+43, r24	; 0x2b
	if (key == '='){
     ddc:	8b a5       	ldd	r24, Y+43	; 0x2b
     dde:	8d 33       	cpi	r24, 0x3D	; 61
     de0:	09 f0       	breq	.+2      	; 0xde4 <SetPassword+0x286>
     de2:	76 c0       	rjmp	.+236    	; 0xed0 <SetPassword+0x372>
		receive = UART_ReceiveByte();
     de4:	0e 94 a8 18 	call	0x3150	; 0x3150 <UART_ReceiveByte>
     de8:	80 93 81 01 	sts	0x0181, r24
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a0 e2       	ldi	r26, 0x20	; 32
     df2:	b1 e4       	ldi	r27, 0x41	; 65
     df4:	8b 87       	std	Y+11, r24	; 0x0b
     df6:	9c 87       	std	Y+12, r25	; 0x0c
     df8:	ad 87       	std	Y+13, r26	; 0x0d
     dfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     e00:	8d 85       	ldd	r24, Y+13	; 0x0d
     e02:	9e 85       	ldd	r25, Y+14	; 0x0e
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	4a ef       	ldi	r20, 0xFA	; 250
     e0a:	54 e4       	ldi	r21, 0x44	; 68
     e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	8f 83       	std	Y+7, r24	; 0x07
     e16:	98 87       	std	Y+8, r25	; 0x08
     e18:	a9 87       	std	Y+9, r26	; 0x09
     e1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e1c:	6f 81       	ldd	r22, Y+7	; 0x07
     e1e:	78 85       	ldd	r23, Y+8	; 0x08
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e8       	ldi	r20, 0x80	; 128
     e2a:	5f e3       	ldi	r21, 0x3F	; 63
     e2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e30:	88 23       	and	r24, r24
     e32:	2c f4       	brge	.+10     	; 0xe3e <SetPassword+0x2e0>
		__ticks = 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9e 83       	std	Y+6, r25	; 0x06
     e3a:	8d 83       	std	Y+5, r24	; 0x05
     e3c:	3f c0       	rjmp	.+126    	; 0xebc <SetPassword+0x35e>
	else if (__tmp > 65535)
     e3e:	6f 81       	ldd	r22, Y+7	; 0x07
     e40:	78 85       	ldd	r23, Y+8	; 0x08
     e42:	89 85       	ldd	r24, Y+9	; 0x09
     e44:	9a 85       	ldd	r25, Y+10	; 0x0a
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	3f ef       	ldi	r19, 0xFF	; 255
     e4a:	4f e7       	ldi	r20, 0x7F	; 127
     e4c:	57 e4       	ldi	r21, 0x47	; 71
     e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e52:	18 16       	cp	r1, r24
     e54:	4c f5       	brge	.+82     	; 0xea8 <SetPassword+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e56:	6b 85       	ldd	r22, Y+11	; 0x0b
     e58:	7c 85       	ldd	r23, Y+12	; 0x0c
     e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e2       	ldi	r20, 0x20	; 32
     e64:	51 e4       	ldi	r21, 0x41	; 65
     e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	9e 83       	std	Y+6, r25	; 0x06
     e7c:	8d 83       	std	Y+5, r24	; 0x05
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <SetPassword+0x340>
     e80:	88 ec       	ldi	r24, 0xC8	; 200
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9c 83       	std	Y+4, r25	; 0x04
     e86:	8b 83       	std	Y+3, r24	; 0x03
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	9c 81       	ldd	r25, Y+4	; 0x04
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <SetPassword+0x32e>
     e90:	9c 83       	std	Y+4, r25	; 0x04
     e92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	9e 81       	ldd	r25, Y+6	; 0x06
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	9e 83       	std	Y+6, r25	; 0x06
     e9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f7       	brne	.-38     	; 0xe80 <SetPassword+0x322>
     ea6:	14 c0       	rjmp	.+40     	; 0xed0 <SetPassword+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea8:	6f 81       	ldd	r22, Y+7	; 0x07
     eaa:	78 85       	ldd	r23, Y+8	; 0x08
     eac:	89 85       	ldd	r24, Y+9	; 0x09
     eae:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	9e 83       	std	Y+6, r25	; 0x06
     eba:	8d 83       	std	Y+5, r24	; 0x05
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	9e 81       	ldd	r25, Y+6	; 0x06
     ec0:	9a 83       	std	Y+2, r25	; 0x02
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <SetPassword+0x36a>
     ecc:	9a 83       	std	Y+2, r25	; 0x02
     ece:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	}

	return receive ;
     ed0:	80 91 81 01 	lds	r24, 0x0181

}
     ed4:	ac 96       	adiw	r28, 0x2c	; 44
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <CheckPassword>:
 * Takes the password from the user and
 * sends it to CONTROL_ECU to check on it
 * Return : status of the entered password either its MATCHED with the saved one or not
 */
uint8 CheckPassword()
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	ac 97       	sbiw	r28, 0x2c	; 44
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
	uint8 key,i;

	for (i=0 ; i<PASSWORD_SIZE ; i++){
     efa:	1b a6       	std	Y+43, r1	; 0x2b
     efc:	f8 c0       	rjmp	.+496    	; 0x10ee <CheckPassword+0x208>
		key = KEYPAD_GetPressedKey();
     efe:	0e 94 2d 10 	call	0x205a	; 0x205a <KEYPAD_GetPressedKey>
     f02:	8c a7       	std	Y+44, r24	; 0x2c
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	a6 e9       	ldi	r26, 0x96	; 150
     f0a:	b3 e4       	ldi	r27, 0x43	; 67
     f0c:	8f a3       	std	Y+39, r24	; 0x27
     f0e:	98 a7       	std	Y+40, r25	; 0x28
     f10:	a9 a7       	std	Y+41, r26	; 0x29
     f12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f14:	6f a1       	ldd	r22, Y+39	; 0x27
     f16:	78 a5       	ldd	r23, Y+40	; 0x28
     f18:	89 a5       	ldd	r24, Y+41	; 0x29
     f1a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	4a ef       	ldi	r20, 0xFA	; 250
     f22:	54 e4       	ldi	r21, 0x44	; 68
     f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	8b a3       	std	Y+35, r24	; 0x23
     f2e:	9c a3       	std	Y+36, r25	; 0x24
     f30:	ad a3       	std	Y+37, r26	; 0x25
     f32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f34:	6b a1       	ldd	r22, Y+35	; 0x23
     f36:	7c a1       	ldd	r23, Y+36	; 0x24
     f38:	8d a1       	ldd	r24, Y+37	; 0x25
     f3a:	9e a1       	ldd	r25, Y+38	; 0x26
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e8       	ldi	r20, 0x80	; 128
     f42:	5f e3       	ldi	r21, 0x3F	; 63
     f44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f48:	88 23       	and	r24, r24
     f4a:	2c f4       	brge	.+10     	; 0xf56 <CheckPassword+0x70>
		__ticks = 1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9a a3       	std	Y+34, r25	; 0x22
     f52:	89 a3       	std	Y+33, r24	; 0x21
     f54:	3f c0       	rjmp	.+126    	; 0xfd4 <CheckPassword+0xee>
	else if (__tmp > 65535)
     f56:	6b a1       	ldd	r22, Y+35	; 0x23
     f58:	7c a1       	ldd	r23, Y+36	; 0x24
     f5a:	8d a1       	ldd	r24, Y+37	; 0x25
     f5c:	9e a1       	ldd	r25, Y+38	; 0x26
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	3f ef       	ldi	r19, 0xFF	; 255
     f62:	4f e7       	ldi	r20, 0x7F	; 127
     f64:	57 e4       	ldi	r21, 0x47	; 71
     f66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f6a:	18 16       	cp	r1, r24
     f6c:	4c f5       	brge	.+82     	; 0xfc0 <CheckPassword+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f6e:	6f a1       	ldd	r22, Y+39	; 0x27
     f70:	78 a5       	ldd	r23, Y+40	; 0x28
     f72:	89 a5       	ldd	r24, Y+41	; 0x29
     f74:	9a a5       	ldd	r25, Y+42	; 0x2a
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e2       	ldi	r20, 0x20	; 32
     f7c:	51 e4       	ldi	r21, 0x41	; 65
     f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	bc 01       	movw	r22, r24
     f88:	cd 01       	movw	r24, r26
     f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	9a a3       	std	Y+34, r25	; 0x22
     f94:	89 a3       	std	Y+33, r24	; 0x21
     f96:	0f c0       	rjmp	.+30     	; 0xfb6 <CheckPassword+0xd0>
     f98:	88 ec       	ldi	r24, 0xC8	; 200
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	98 a3       	std	Y+32, r25	; 0x20
     f9e:	8f 8f       	std	Y+31, r24	; 0x1f
     fa0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fa2:	98 a1       	ldd	r25, Y+32	; 0x20
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <CheckPassword+0xbe>
     fa8:	98 a3       	std	Y+32, r25	; 0x20
     faa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fac:	89 a1       	ldd	r24, Y+33	; 0x21
     fae:	9a a1       	ldd	r25, Y+34	; 0x22
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	9a a3       	std	Y+34, r25	; 0x22
     fb4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb6:	89 a1       	ldd	r24, Y+33	; 0x21
     fb8:	9a a1       	ldd	r25, Y+34	; 0x22
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	69 f7       	brne	.-38     	; 0xf98 <CheckPassword+0xb2>
     fbe:	14 c0       	rjmp	.+40     	; 0xfe8 <CheckPassword+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc0:	6b a1       	ldd	r22, Y+35	; 0x23
     fc2:	7c a1       	ldd	r23, Y+36	; 0x24
     fc4:	8d a1       	ldd	r24, Y+37	; 0x25
     fc6:	9e a1       	ldd	r25, Y+38	; 0x26
     fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9a a3       	std	Y+34, r25	; 0x22
     fd2:	89 a3       	std	Y+33, r24	; 0x21
     fd4:	89 a1       	ldd	r24, Y+33	; 0x21
     fd6:	9a a1       	ldd	r25, Y+34	; 0x22
     fd8:	9e 8f       	std	Y+30, r25	; 0x1e
     fda:	8d 8f       	std	Y+29, r24	; 0x1d
     fdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fde:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <CheckPassword+0xfa>
     fe4:	9e 8f       	std	Y+30, r25	; 0x1e
     fe6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(300);
		if ((key >=0) && (key <=9)){
     fe8:	8c a5       	ldd	r24, Y+44	; 0x2c
     fea:	8a 30       	cpi	r24, 0x0A	; 10
     fec:	08 f0       	brcs	.+2      	; 0xff0 <CheckPassword+0x10a>
     fee:	79 c0       	rjmp	.+242    	; 0x10e2 <CheckPassword+0x1fc>
			LCD_DisplayCharacter('*');
     ff0:	8a e2       	ldi	r24, 0x2A	; 42
     ff2:	0e 94 b0 13 	call	0x2760	; 0x2760 <LCD_DisplayCharacter>
			UART_SendByte(key);
     ff6:	8c a5       	ldd	r24, Y+44	; 0x2c
     ff8:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a0 e2       	ldi	r26, 0x20	; 32
    1002:	b1 e4       	ldi	r27, 0x41	; 65
    1004:	89 8f       	std	Y+25, r24	; 0x19
    1006:	9a 8f       	std	Y+26, r25	; 0x1a
    1008:	ab 8f       	std	Y+27, r26	; 0x1b
    100a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    100c:	69 8d       	ldd	r22, Y+25	; 0x19
    100e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1010:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1012:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	4a ef       	ldi	r20, 0xFA	; 250
    101a:	54 e4       	ldi	r21, 0x44	; 68
    101c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	8d 8b       	std	Y+21, r24	; 0x15
    1026:	9e 8b       	std	Y+22, r25	; 0x16
    1028:	af 8b       	std	Y+23, r26	; 0x17
    102a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    102c:	6d 89       	ldd	r22, Y+21	; 0x15
    102e:	7e 89       	ldd	r23, Y+22	; 0x16
    1030:	8f 89       	ldd	r24, Y+23	; 0x17
    1032:	98 8d       	ldd	r25, Y+24	; 0x18
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e8       	ldi	r20, 0x80	; 128
    103a:	5f e3       	ldi	r21, 0x3F	; 63
    103c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1040:	88 23       	and	r24, r24
    1042:	2c f4       	brge	.+10     	; 0x104e <CheckPassword+0x168>
		__ticks = 1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9c 8b       	std	Y+20, r25	; 0x14
    104a:	8b 8b       	std	Y+19, r24	; 0x13
    104c:	3f c0       	rjmp	.+126    	; 0x10cc <CheckPassword+0x1e6>
	else if (__tmp > 65535)
    104e:	6d 89       	ldd	r22, Y+21	; 0x15
    1050:	7e 89       	ldd	r23, Y+22	; 0x16
    1052:	8f 89       	ldd	r24, Y+23	; 0x17
    1054:	98 8d       	ldd	r25, Y+24	; 0x18
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	3f ef       	ldi	r19, 0xFF	; 255
    105a:	4f e7       	ldi	r20, 0x7F	; 127
    105c:	57 e4       	ldi	r21, 0x47	; 71
    105e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1062:	18 16       	cp	r1, r24
    1064:	4c f5       	brge	.+82     	; 0x10b8 <CheckPassword+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1066:	69 8d       	ldd	r22, Y+25	; 0x19
    1068:	7a 8d       	ldd	r23, Y+26	; 0x1a
    106a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    106c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e2       	ldi	r20, 0x20	; 32
    1074:	51 e4       	ldi	r21, 0x41	; 65
    1076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	9c 8b       	std	Y+20, r25	; 0x14
    108c:	8b 8b       	std	Y+19, r24	; 0x13
    108e:	0f c0       	rjmp	.+30     	; 0x10ae <CheckPassword+0x1c8>
    1090:	88 ec       	ldi	r24, 0xC8	; 200
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	9a 8b       	std	Y+18, r25	; 0x12
    1096:	89 8b       	std	Y+17, r24	; 0x11
    1098:	89 89       	ldd	r24, Y+17	; 0x11
    109a:	9a 89       	ldd	r25, Y+18	; 0x12
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <CheckPassword+0x1b6>
    10a0:	9a 8b       	std	Y+18, r25	; 0x12
    10a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a4:	8b 89       	ldd	r24, Y+19	; 0x13
    10a6:	9c 89       	ldd	r25, Y+20	; 0x14
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	9c 8b       	std	Y+20, r25	; 0x14
    10ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ae:	8b 89       	ldd	r24, Y+19	; 0x13
    10b0:	9c 89       	ldd	r25, Y+20	; 0x14
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	69 f7       	brne	.-38     	; 0x1090 <CheckPassword+0x1aa>
    10b6:	18 c0       	rjmp	.+48     	; 0x10e8 <CheckPassword+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b8:	6d 89       	ldd	r22, Y+21	; 0x15
    10ba:	7e 89       	ldd	r23, Y+22	; 0x16
    10bc:	8f 89       	ldd	r24, Y+23	; 0x17
    10be:	98 8d       	ldd	r25, Y+24	; 0x18
    10c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	9c 8b       	std	Y+20, r25	; 0x14
    10ca:	8b 8b       	std	Y+19, r24	; 0x13
    10cc:	8b 89       	ldd	r24, Y+19	; 0x13
    10ce:	9c 89       	ldd	r25, Y+20	; 0x14
    10d0:	98 8b       	std	Y+16, r25	; 0x10
    10d2:	8f 87       	std	Y+15, r24	; 0x0f
    10d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10d6:	98 89       	ldd	r25, Y+16	; 0x10
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <CheckPassword+0x1f2>
    10dc:	98 8b       	std	Y+16, r25	; 0x10
    10de:	8f 87       	std	Y+15, r24	; 0x0f
    10e0:	03 c0       	rjmp	.+6      	; 0x10e8 <CheckPassword+0x202>
			_delay_ms(10);
		}
		else {
			i--; /* To ensure that only numbers will be entered */
    10e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    10e4:	81 50       	subi	r24, 0x01	; 1
    10e6:	8b a7       	std	Y+43, r24	; 0x2b
 */
uint8 CheckPassword()
{
	uint8 key,i;

	for (i=0 ; i<PASSWORD_SIZE ; i++){
    10e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    10ea:	8f 5f       	subi	r24, 0xFF	; 255
    10ec:	8b a7       	std	Y+43, r24	; 0x2b
    10ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    10f0:	85 30       	cpi	r24, 0x05	; 5
    10f2:	08 f4       	brcc	.+2      	; 0x10f6 <CheckPassword+0x210>
    10f4:	04 cf       	rjmp	.-504    	; 0xefe <CheckPassword+0x18>
		}
		else {
			i--; /* To ensure that only numbers will be entered */
		}
	}
	key = KEYPAD_GetPressedKey();
    10f6:	0e 94 2d 10 	call	0x205a	; 0x205a <KEYPAD_GetPressedKey>
    10fa:	8c a7       	std	Y+44, r24	; 0x2c
	if (key == '='){
    10fc:	8c a5       	ldd	r24, Y+44	; 0x2c
    10fe:	8d 33       	cpi	r24, 0x3D	; 61
    1100:	09 f0       	breq	.+2      	; 0x1104 <CheckPassword+0x21e>
    1102:	76 c0       	rjmp	.+236    	; 0x11f0 <CheckPassword+0x30a>
		receive = UART_ReceiveByte();
    1104:	0e 94 a8 18 	call	0x3150	; 0x3150 <UART_ReceiveByte>
    1108:	80 93 81 01 	sts	0x0181, r24
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a0 e2       	ldi	r26, 0x20	; 32
    1112:	b1 e4       	ldi	r27, 0x41	; 65
    1114:	8b 87       	std	Y+11, r24	; 0x0b
    1116:	9c 87       	std	Y+12, r25	; 0x0c
    1118:	ad 87       	std	Y+13, r26	; 0x0d
    111a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111c:	6b 85       	ldd	r22, Y+11	; 0x0b
    111e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1120:	8d 85       	ldd	r24, Y+13	; 0x0d
    1122:	9e 85       	ldd	r25, Y+14	; 0x0e
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	4a ef       	ldi	r20, 0xFA	; 250
    112a:	54 e4       	ldi	r21, 0x44	; 68
    112c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	8f 83       	std	Y+7, r24	; 0x07
    1136:	98 87       	std	Y+8, r25	; 0x08
    1138:	a9 87       	std	Y+9, r26	; 0x09
    113a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    113c:	6f 81       	ldd	r22, Y+7	; 0x07
    113e:	78 85       	ldd	r23, Y+8	; 0x08
    1140:	89 85       	ldd	r24, Y+9	; 0x09
    1142:	9a 85       	ldd	r25, Y+10	; 0x0a
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e8       	ldi	r20, 0x80	; 128
    114a:	5f e3       	ldi	r21, 0x3F	; 63
    114c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1150:	88 23       	and	r24, r24
    1152:	2c f4       	brge	.+10     	; 0x115e <CheckPassword+0x278>
		__ticks = 1;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	9e 83       	std	Y+6, r25	; 0x06
    115a:	8d 83       	std	Y+5, r24	; 0x05
    115c:	3f c0       	rjmp	.+126    	; 0x11dc <CheckPassword+0x2f6>
	else if (__tmp > 65535)
    115e:	6f 81       	ldd	r22, Y+7	; 0x07
    1160:	78 85       	ldd	r23, Y+8	; 0x08
    1162:	89 85       	ldd	r24, Y+9	; 0x09
    1164:	9a 85       	ldd	r25, Y+10	; 0x0a
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	3f ef       	ldi	r19, 0xFF	; 255
    116a:	4f e7       	ldi	r20, 0x7F	; 127
    116c:	57 e4       	ldi	r21, 0x47	; 71
    116e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1172:	18 16       	cp	r1, r24
    1174:	4c f5       	brge	.+82     	; 0x11c8 <CheckPassword+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1176:	6b 85       	ldd	r22, Y+11	; 0x0b
    1178:	7c 85       	ldd	r23, Y+12	; 0x0c
    117a:	8d 85       	ldd	r24, Y+13	; 0x0d
    117c:	9e 85       	ldd	r25, Y+14	; 0x0e
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e2       	ldi	r20, 0x20	; 32
    1184:	51 e4       	ldi	r21, 0x41	; 65
    1186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	bc 01       	movw	r22, r24
    1190:	cd 01       	movw	r24, r26
    1192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	9e 83       	std	Y+6, r25	; 0x06
    119c:	8d 83       	std	Y+5, r24	; 0x05
    119e:	0f c0       	rjmp	.+30     	; 0x11be <CheckPassword+0x2d8>
    11a0:	88 ec       	ldi	r24, 0xC8	; 200
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9c 83       	std	Y+4, r25	; 0x04
    11a6:	8b 83       	std	Y+3, r24	; 0x03
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <CheckPassword+0x2c6>
    11b0:	9c 83       	std	Y+4, r25	; 0x04
    11b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b4:	8d 81       	ldd	r24, Y+5	; 0x05
    11b6:	9e 81       	ldd	r25, Y+6	; 0x06
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	9e 83       	std	Y+6, r25	; 0x06
    11bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	69 f7       	brne	.-38     	; 0x11a0 <CheckPassword+0x2ba>
    11c6:	14 c0       	rjmp	.+40     	; 0x11f0 <CheckPassword+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ca:	78 85       	ldd	r23, Y+8	; 0x08
    11cc:	89 85       	ldd	r24, Y+9	; 0x09
    11ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	9e 83       	std	Y+6, r25	; 0x06
    11da:	8d 83       	std	Y+5, r24	; 0x05
    11dc:	8d 81       	ldd	r24, Y+5	; 0x05
    11de:	9e 81       	ldd	r25, Y+6	; 0x06
    11e0:	9a 83       	std	Y+2, r25	; 0x02
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	9a 81       	ldd	r25, Y+2	; 0x02
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <CheckPassword+0x302>
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	}
	return receive;
    11f0:	80 91 81 01 	lds	r24, 0x0181
}
    11f4:	ac 96       	adiw	r28, 0x2c	; 44
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <OpenCloseDoor>:

/* Description:
 * Displays the state of door opening and closing
 */
void OpenCloseDoor()
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	2e 97       	sbiw	r28, 0x0e	; 14
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61

	LCD_ClearScreen();
    121a:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_ClearScreen>
	LCD_DisplayStringRowColumn(0,5,"Door is");
    121e:	2c e7       	ldi	r18, 0x7C	; 124
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	65 e0       	ldi	r22, 0x05	; 5
    1226:	a9 01       	movw	r20, r18
    1228:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_DisplayStringRowColumn>
	LCD_DisplayStringRowColumn(1,4,"Unlocking !");
    122c:	24 e8       	ldi	r18, 0x84	; 132
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	64 e0       	ldi	r22, 0x04	; 4
    1234:	a9 01       	movw	r20, r18
    1236:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_DisplayStringRowColumn>

	tick=0;
    123a:	10 92 80 01 	sts	0x0180, r1
	while (tick != 15);
    123e:	80 91 80 01 	lds	r24, 0x0180
    1242:	8f 30       	cpi	r24, 0x0F	; 15
    1244:	e1 f7       	brne	.-8      	; 0x123e <OpenCloseDoor+0x38>

	tick =0;
    1246:	10 92 80 01 	sts	0x0180, r1
	LCD_ClearScreen();
    124a:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_ClearScreen>
	LCD_DisplayString("****Unlocked****");
    124e:	80 e9       	ldi	r24, 0x90	; 144
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_DisplayString>
	LCD_DisplayStringRowColumn(1,0,"Door is on HOLD");
    1256:	21 ea       	ldi	r18, 0xA1	; 161
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	a9 01       	movw	r20, r18
    1260:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_DisplayStringRowColumn>

	while(tick !=3);
    1264:	80 91 80 01 	lds	r24, 0x0180
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	e1 f7       	brne	.-8      	; 0x1264 <OpenCloseDoor+0x5e>

	tick =0;
    126c:	10 92 80 01 	sts	0x0180, r1
	LCD_ClearScreen();
    1270:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_ClearScreen>
	LCD_DisplayString("     Door is ");
    1274:	81 eb       	ldi	r24, 0xB1	; 177
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_DisplayString>
	LCD_DisplayStringRowColumn(1,5,"Locking !");
    127c:	2f eb       	ldi	r18, 0xBF	; 191
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	65 e0       	ldi	r22, 0x05	; 5
    1284:	a9 01       	movw	r20, r18
    1286:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_DisplayStringRowColumn>

	while(tick != 15);
    128a:	80 91 80 01 	lds	r24, 0x0180
    128e:	8f 30       	cpi	r24, 0x0F	; 15
    1290:	e1 f7       	brne	.-8      	; 0x128a <OpenCloseDoor+0x84>

	LCD_ClearScreen();
    1292:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_ClearScreen>
	LCD_DisplayString("   Door Locked !");
    1296:	89 ec       	ldi	r24, 0xC9	; 201
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_DisplayString>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	aa ef       	ldi	r26, 0xFA	; 250
    12a4:	b4 e4       	ldi	r27, 0x44	; 68
    12a6:	8b 87       	std	Y+11, r24	; 0x0b
    12a8:	9c 87       	std	Y+12, r25	; 0x0c
    12aa:	ad 87       	std	Y+13, r26	; 0x0d
    12ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    12b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	4a ef       	ldi	r20, 0xFA	; 250
    12bc:	54 e4       	ldi	r21, 0x44	; 68
    12be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	8f 83       	std	Y+7, r24	; 0x07
    12c8:	98 87       	std	Y+8, r25	; 0x08
    12ca:	a9 87       	std	Y+9, r26	; 0x09
    12cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12ce:	6f 81       	ldd	r22, Y+7	; 0x07
    12d0:	78 85       	ldd	r23, Y+8	; 0x08
    12d2:	89 85       	ldd	r24, Y+9	; 0x09
    12d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e8       	ldi	r20, 0x80	; 128
    12dc:	5f e3       	ldi	r21, 0x3F	; 63
    12de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <OpenCloseDoor+0xea>
		__ticks = 1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	3f c0       	rjmp	.+126    	; 0x136e <OpenCloseDoor+0x168>
	else if (__tmp > 65535)
    12f0:	6f 81       	ldd	r22, Y+7	; 0x07
    12f2:	78 85       	ldd	r23, Y+8	; 0x08
    12f4:	89 85       	ldd	r24, Y+9	; 0x09
    12f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	3f ef       	ldi	r19, 0xFF	; 255
    12fc:	4f e7       	ldi	r20, 0x7F	; 127
    12fe:	57 e4       	ldi	r21, 0x47	; 71
    1300:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1304:	18 16       	cp	r1, r24
    1306:	4c f5       	brge	.+82     	; 0x135a <OpenCloseDoor+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1308:	6b 85       	ldd	r22, Y+11	; 0x0b
    130a:	7c 85       	ldd	r23, Y+12	; 0x0c
    130c:	8d 85       	ldd	r24, Y+13	; 0x0d
    130e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e2       	ldi	r20, 0x20	; 32
    1316:	51 e4       	ldi	r21, 0x41	; 65
    1318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9e 83       	std	Y+6, r25	; 0x06
    132e:	8d 83       	std	Y+5, r24	; 0x05
    1330:	0f c0       	rjmp	.+30     	; 0x1350 <OpenCloseDoor+0x14a>
    1332:	88 ec       	ldi	r24, 0xC8	; 200
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9c 83       	std	Y+4, r25	; 0x04
    1338:	8b 83       	std	Y+3, r24	; 0x03
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <OpenCloseDoor+0x138>
    1342:	9c 83       	std	Y+4, r25	; 0x04
    1344:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	9e 83       	std	Y+6, r25	; 0x06
    134e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	69 f7       	brne	.-38     	; 0x1332 <OpenCloseDoor+0x12c>
    1358:	14 c0       	rjmp	.+40     	; 0x1382 <OpenCloseDoor+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135a:	6f 81       	ldd	r22, Y+7	; 0x07
    135c:	78 85       	ldd	r23, Y+8	; 0x08
    135e:	89 85       	ldd	r24, Y+9	; 0x09
    1360:	9a 85       	ldd	r25, Y+10	; 0x0a
    1362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9e 83       	std	Y+6, r25	; 0x06
    136c:	8d 83       	std	Y+5, r24	; 0x05
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	9a 81       	ldd	r25, Y+2	; 0x02
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <OpenCloseDoor+0x174>
    137e:	9a 83       	std	Y+2, r25	; 0x02
    1380:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
}
    1382:	2e 96       	adiw	r28, 0x0e	; 14
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <SetPasswordMessage>:

/* Description:
 * Function that asks user to enter a new password
 */
void SetPasswordMessage()
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    139c:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_ClearScreen>
	LCD_DisplayString("Pls Enter New");
    13a0:	8a ed       	ldi	r24, 0xDA	; 218
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_DisplayString>
	LCD_DisplayStringRowColumn(1,0,"Password:");
    13a8:	28 ee       	ldi	r18, 0xE8	; 232
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	a9 01       	movw	r20, r18
    13b2:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_DisplayStringRowColumn>
	LCD_MoveCursor(9,1);
    13b6:	89 e0       	ldi	r24, 0x09	; 9
    13b8:	61 e0       	ldi	r22, 0x01	; 1
    13ba:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_MoveCursor>
}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <WrongPasswordMessage>:

/* Description:
 * Function that warns user that the entered password is wrong
 */
void WrongPasswordMessage()
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	2e 97       	sbiw	r28, 0x0e	; 14
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
	LCD_ClearScreen();
    13d8:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_ClearScreen>
	LCD_DisplayString("WRONG PASSWORD");
    13dc:	82 ef       	ldi	r24, 0xF2	; 242
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_DisplayString>
	LCD_DisplayStringRowColumn(1,4,"TRY AGAIN");
    13e4:	21 e0       	ldi	r18, 0x01	; 1
    13e6:	31 e0       	ldi	r19, 0x01	; 1
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	64 e0       	ldi	r22, 0x04	; 4
    13ec:	a9 01       	movw	r20, r18
    13ee:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_DisplayStringRowColumn>
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	aa e7       	ldi	r26, 0x7A	; 122
    13f8:	b4 e4       	ldi	r27, 0x44	; 68
    13fa:	8b 87       	std	Y+11, r24	; 0x0b
    13fc:	9c 87       	std	Y+12, r25	; 0x0c
    13fe:	ad 87       	std	Y+13, r26	; 0x0d
    1400:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1402:	6b 85       	ldd	r22, Y+11	; 0x0b
    1404:	7c 85       	ldd	r23, Y+12	; 0x0c
    1406:	8d 85       	ldd	r24, Y+13	; 0x0d
    1408:	9e 85       	ldd	r25, Y+14	; 0x0e
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	4a ef       	ldi	r20, 0xFA	; 250
    1410:	54 e4       	ldi	r21, 0x44	; 68
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	8f 83       	std	Y+7, r24	; 0x07
    141c:	98 87       	std	Y+8, r25	; 0x08
    141e:	a9 87       	std	Y+9, r26	; 0x09
    1420:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1422:	6f 81       	ldd	r22, Y+7	; 0x07
    1424:	78 85       	ldd	r23, Y+8	; 0x08
    1426:	89 85       	ldd	r24, Y+9	; 0x09
    1428:	9a 85       	ldd	r25, Y+10	; 0x0a
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e8       	ldi	r20, 0x80	; 128
    1430:	5f e3       	ldi	r21, 0x3F	; 63
    1432:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1436:	88 23       	and	r24, r24
    1438:	2c f4       	brge	.+10     	; 0x1444 <WrongPasswordMessage+0x80>
		__ticks = 1;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	9e 83       	std	Y+6, r25	; 0x06
    1440:	8d 83       	std	Y+5, r24	; 0x05
    1442:	3f c0       	rjmp	.+126    	; 0x14c2 <WrongPasswordMessage+0xfe>
	else if (__tmp > 65535)
    1444:	6f 81       	ldd	r22, Y+7	; 0x07
    1446:	78 85       	ldd	r23, Y+8	; 0x08
    1448:	89 85       	ldd	r24, Y+9	; 0x09
    144a:	9a 85       	ldd	r25, Y+10	; 0x0a
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	3f ef       	ldi	r19, 0xFF	; 255
    1450:	4f e7       	ldi	r20, 0x7F	; 127
    1452:	57 e4       	ldi	r21, 0x47	; 71
    1454:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1458:	18 16       	cp	r1, r24
    145a:	4c f5       	brge	.+82     	; 0x14ae <WrongPasswordMessage+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145c:	6b 85       	ldd	r22, Y+11	; 0x0b
    145e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1460:	8d 85       	ldd	r24, Y+13	; 0x0d
    1462:	9e 85       	ldd	r25, Y+14	; 0x0e
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	40 e2       	ldi	r20, 0x20	; 32
    146a:	51 e4       	ldi	r21, 0x41	; 65
    146c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	bc 01       	movw	r22, r24
    1476:	cd 01       	movw	r24, r26
    1478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	9e 83       	std	Y+6, r25	; 0x06
    1482:	8d 83       	std	Y+5, r24	; 0x05
    1484:	0f c0       	rjmp	.+30     	; 0x14a4 <WrongPasswordMessage+0xe0>
    1486:	88 ec       	ldi	r24, 0xC8	; 200
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	9c 83       	std	Y+4, r25	; 0x04
    148c:	8b 83       	std	Y+3, r24	; 0x03
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <WrongPasswordMessage+0xce>
    1496:	9c 83       	std	Y+4, r25	; 0x04
    1498:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149a:	8d 81       	ldd	r24, Y+5	; 0x05
    149c:	9e 81       	ldd	r25, Y+6	; 0x06
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	9e 83       	std	Y+6, r25	; 0x06
    14a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a4:	8d 81       	ldd	r24, Y+5	; 0x05
    14a6:	9e 81       	ldd	r25, Y+6	; 0x06
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	69 f7       	brne	.-38     	; 0x1486 <WrongPasswordMessage+0xc2>
    14ac:	14 c0       	rjmp	.+40     	; 0x14d6 <WrongPasswordMessage+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ae:	6f 81       	ldd	r22, Y+7	; 0x07
    14b0:	78 85       	ldd	r23, Y+8	; 0x08
    14b2:	89 85       	ldd	r24, Y+9	; 0x09
    14b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
    14c2:	8d 81       	ldd	r24, Y+5	; 0x05
    14c4:	9e 81       	ldd	r25, Y+6	; 0x06
    14c6:	9a 83       	std	Y+2, r25	; 0x02
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <WrongPasswordMessage+0x10a>
    14d2:	9a 83       	std	Y+2, r25	; 0x02
    14d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000); /*Show message for 1 second*/
}
    14d6:	2e 96       	adiw	r28, 0x0e	; 14
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <EnterPasswordMessage>:

/* Description:
 * Function that asks user to enter the system's password
 */
void EnterPasswordMessage()
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    14f0:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_ClearScreen>
	LCD_DisplayString("Pls Enter Pass :");
    14f4:	8b e0       	ldi	r24, 0x0B	; 11
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_DisplayString>
	LCD_MoveCursor(0,1);
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	61 e0       	ldi	r22, 0x01	; 1
    1500:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_MoveCursor>
}
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <DisplayMainMenu>:

/* Description:
 * Function that displays the main menu
 */
void DisplayMainMenu()
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    1512:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_ClearScreen>
	LCD_DisplayString("+ : Open Door");
    1516:	8c e1       	ldi	r24, 0x1C	; 28
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_DisplayString>
	LCD_DisplayStringRowColumn(1,0,"- : Change Pass");
    151e:	2a e2       	ldi	r18, 0x2A	; 42
    1520:	31 e0       	ldi	r19, 0x01	; 1
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	a9 01       	movw	r20, r18
    1528:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_DisplayStringRowColumn>
}
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <PasswordSuccessful>:

/* Description:
 * Informs the user that the password has been set successfully
 */
void PasswordSuccessful()
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	2e 97       	sbiw	r28, 0x0e	; 14
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
	LCD_ClearScreen();
    1546:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_ClearScreen>
	LCD_DisplayString("Password Set");
    154a:	8a e3       	ldi	r24, 0x3A	; 58
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_DisplayString>
	LCD_DisplayStringRowColumn(1,0,"Successfully");
    1552:	27 e4       	ldi	r18, 0x47	; 71
    1554:	31 e0       	ldi	r19, 0x01	; 1
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	a9 01       	movw	r20, r18
    155c:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_DisplayStringRowColumn>
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e8       	ldi	r25, 0x80	; 128
    1564:	ab eb       	ldi	r26, 0xBB	; 187
    1566:	b4 e4       	ldi	r27, 0x44	; 68
    1568:	8b 87       	std	Y+11, r24	; 0x0b
    156a:	9c 87       	std	Y+12, r25	; 0x0c
    156c:	ad 87       	std	Y+13, r26	; 0x0d
    156e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1570:	6b 85       	ldd	r22, Y+11	; 0x0b
    1572:	7c 85       	ldd	r23, Y+12	; 0x0c
    1574:	8d 85       	ldd	r24, Y+13	; 0x0d
    1576:	9e 85       	ldd	r25, Y+14	; 0x0e
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	4a ef       	ldi	r20, 0xFA	; 250
    157e:	54 e4       	ldi	r21, 0x44	; 68
    1580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	8f 83       	std	Y+7, r24	; 0x07
    158a:	98 87       	std	Y+8, r25	; 0x08
    158c:	a9 87       	std	Y+9, r26	; 0x09
    158e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1590:	6f 81       	ldd	r22, Y+7	; 0x07
    1592:	78 85       	ldd	r23, Y+8	; 0x08
    1594:	89 85       	ldd	r24, Y+9	; 0x09
    1596:	9a 85       	ldd	r25, Y+10	; 0x0a
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	5f e3       	ldi	r21, 0x3F	; 63
    15a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a4:	88 23       	and	r24, r24
    15a6:	2c f4       	brge	.+10     	; 0x15b2 <PasswordSuccessful+0x80>
		__ticks = 1;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	8d 83       	std	Y+5, r24	; 0x05
    15b0:	3f c0       	rjmp	.+126    	; 0x1630 <PasswordSuccessful+0xfe>
	else if (__tmp > 65535)
    15b2:	6f 81       	ldd	r22, Y+7	; 0x07
    15b4:	78 85       	ldd	r23, Y+8	; 0x08
    15b6:	89 85       	ldd	r24, Y+9	; 0x09
    15b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	3f ef       	ldi	r19, 0xFF	; 255
    15be:	4f e7       	ldi	r20, 0x7F	; 127
    15c0:	57 e4       	ldi	r21, 0x47	; 71
    15c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c6:	18 16       	cp	r1, r24
    15c8:	4c f5       	brge	.+82     	; 0x161c <PasswordSuccessful+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    15cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e2       	ldi	r20, 0x20	; 32
    15d8:	51 e4       	ldi	r21, 0x41	; 65
    15da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	bc 01       	movw	r22, r24
    15e4:	cd 01       	movw	r24, r26
    15e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	8d 83       	std	Y+5, r24	; 0x05
    15f2:	0f c0       	rjmp	.+30     	; 0x1612 <PasswordSuccessful+0xe0>
    15f4:	88 ec       	ldi	r24, 0xC8	; 200
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	9c 83       	std	Y+4, r25	; 0x04
    15fa:	8b 83       	std	Y+3, r24	; 0x03
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <PasswordSuccessful+0xce>
    1604:	9c 83       	std	Y+4, r25	; 0x04
    1606:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	9e 83       	std	Y+6, r25	; 0x06
    1610:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	69 f7       	brne	.-38     	; 0x15f4 <PasswordSuccessful+0xc2>
    161a:	14 c0       	rjmp	.+40     	; 0x1644 <PasswordSuccessful+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161c:	6f 81       	ldd	r22, Y+7	; 0x07
    161e:	78 85       	ldd	r23, Y+8	; 0x08
    1620:	89 85       	ldd	r24, Y+9	; 0x09
    1622:	9a 85       	ldd	r25, Y+10	; 0x0a
    1624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	9e 83       	std	Y+6, r25	; 0x06
    162e:	8d 83       	std	Y+5, r24	; 0x05
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	9e 81       	ldd	r25, Y+6	; 0x06
    1634:	9a 83       	std	Y+2, r25	; 0x02
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	9a 81       	ldd	r25, Y+2	; 0x02
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <PasswordSuccessful+0x10a>
    1640:	9a 83       	std	Y+2, r25	; 0x02
    1642:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500); /* Show message for 1.5 second */
}
    1644:	2e 96       	adiw	r28, 0x0e	; 14
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <main>:
/*******************************************************************************
 *                            Main Function                                 *
 *******************************************************************************/

int main()
{
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	a7 97       	sbiw	r28, 0x27	; 39
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    166a:	af e5       	ldi	r26, 0x5F	; 95
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ef e5       	ldi	r30, 0x5F	; 95
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 68       	ori	r24, 0x80	; 128
    1676:	8c 93       	st	X, r24
	 * 8-bit Mode
	 * Parity Check is Disabled
	 * One Stop Bit
	 * Baudrate = 9600 bps
	 */
	UART_ConfigType UART_Configuartions = {EIGHT_BIT,NO_PARITY,ONE_STOP_BIT,9600};
    1678:	ce 01       	movw	r24, r28
    167a:	41 96       	adiw	r24, 0x11	; 17
    167c:	9f 8f       	std	Y+31, r25	; 0x1f
    167e:	8e 8f       	std	Y+30, r24	; 0x1e
    1680:	e8 e7       	ldi	r30, 0x78	; 120
    1682:	f1 e0       	ldi	r31, 0x01	; 1
    1684:	f9 a3       	std	Y+33, r31	; 0x21
    1686:	e8 a3       	std	Y+32, r30	; 0x20
    1688:	f7 e0       	ldi	r31, 0x07	; 7
    168a:	fa a3       	std	Y+34, r31	; 0x22
    168c:	e8 a1       	ldd	r30, Y+32	; 0x20
    168e:	f9 a1       	ldd	r31, Y+33	; 0x21
    1690:	00 80       	ld	r0, Z
    1692:	88 a1       	ldd	r24, Y+32	; 0x20
    1694:	99 a1       	ldd	r25, Y+33	; 0x21
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	99 a3       	std	Y+33, r25	; 0x21
    169a:	88 a3       	std	Y+32, r24	; 0x20
    169c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    169e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    16a0:	00 82       	st	Z, r0
    16a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16a4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	9f 8f       	std	Y+31, r25	; 0x1f
    16aa:	8e 8f       	std	Y+30, r24	; 0x1e
    16ac:	9a a1       	ldd	r25, Y+34	; 0x22
    16ae:	91 50       	subi	r25, 0x01	; 1
    16b0:	9a a3       	std	Y+34, r25	; 0x22
    16b2:	ea a1       	ldd	r30, Y+34	; 0x22
    16b4:	ee 23       	and	r30, r30
    16b6:	51 f7       	brne	.-44     	; 0x168c <main+0x36>
	 * Initial Value = 0
	 * Compare Value = 31249
	 * Prescaler = 256
	 * Mode : Compare Mode
	 */
	Timer1_ConfigType Timer1_Configurations = {0,31249,PRESCALER_256,COMPARE_MODE};
    16b8:	ce 01       	movw	r24, r28
    16ba:	48 96       	adiw	r24, 0x18	; 24
    16bc:	9c a3       	std	Y+36, r25	; 0x24
    16be:	8b a3       	std	Y+35, r24	; 0x23
    16c0:	e2 e7       	ldi	r30, 0x72	; 114
    16c2:	f1 e0       	ldi	r31, 0x01	; 1
    16c4:	fe a3       	std	Y+38, r31	; 0x26
    16c6:	ed a3       	std	Y+37, r30	; 0x25
    16c8:	f6 e0       	ldi	r31, 0x06	; 6
    16ca:	ff a3       	std	Y+39, r31	; 0x27
    16cc:	ed a1       	ldd	r30, Y+37	; 0x25
    16ce:	fe a1       	ldd	r31, Y+38	; 0x26
    16d0:	00 80       	ld	r0, Z
    16d2:	8d a1       	ldd	r24, Y+37	; 0x25
    16d4:	9e a1       	ldd	r25, Y+38	; 0x26
    16d6:	01 96       	adiw	r24, 0x01	; 1
    16d8:	9e a3       	std	Y+38, r25	; 0x26
    16da:	8d a3       	std	Y+37, r24	; 0x25
    16dc:	eb a1       	ldd	r30, Y+35	; 0x23
    16de:	fc a1       	ldd	r31, Y+36	; 0x24
    16e0:	00 82       	st	Z, r0
    16e2:	8b a1       	ldd	r24, Y+35	; 0x23
    16e4:	9c a1       	ldd	r25, Y+36	; 0x24
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	9c a3       	std	Y+36, r25	; 0x24
    16ea:	8b a3       	std	Y+35, r24	; 0x23
    16ec:	9f a1       	ldd	r25, Y+39	; 0x27
    16ee:	91 50       	subi	r25, 0x01	; 1
    16f0:	9f a3       	std	Y+39, r25	; 0x27
    16f2:	ef a1       	ldd	r30, Y+39	; 0x27
    16f4:	ee 23       	and	r30, r30
    16f6:	51 f7       	brne	.-44     	; 0x16cc <main+0x76>

	/*Initialize the LCD*/
	LCD_init();
    16f8:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <LCD_init>
	/*Initialize UART driver with the required configurations*/
	UART_init(&UART_Configuartions);
    16fc:	ce 01       	movw	r24, r28
    16fe:	41 96       	adiw	r24, 0x11	; 17
    1700:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <UART_init>
	/*Initialize Timer driver with the required configurations*/
	Timer1_init(&Timer1_Configurations);
    1704:	ce 01       	movw	r24, r28
    1706:	48 96       	adiw	r24, 0x18	; 24
    1708:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <Timer1_init>
	/* set the TIMER1_ticks to be the callback function */
	Timer1_setCallBack(Timer1_Tick);
    170c:	83 ea       	ldi	r24, 0xA3	; 163
    170e:	95 e0       	ldi	r25, 0x05	; 5
    1710:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <Timer1_setCallBack>

	while(1){
		while(1){
			/*------------------Step 1-----------------*/
			SetPasswordMessage();
    1714:	0e 94 ca 09 	call	0x1394	; 0x1394 <SetPasswordMessage>
			/*Sending a command to the Control_ECU to set a first time password*/
			UART_SendByte(FIRST_TIME_PASSWORD);
    1718:	8a e0       	ldi	r24, 0x0A	; 10
    171a:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
			/*Call the functions used to give a password to the system and save it*/
			received_byte = SetPassword();
    171e:	0e 94 af 05 	call	0xb5e	; 0xb5e <SetPassword>
    1722:	88 8b       	std	Y+16, r24	; 0x10

			if (received_byte == MATCHED)
    1724:	88 89       	ldd	r24, Y+16	; 0x10
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	19 f4       	brne	.+6      	; 0x1730 <main+0xda>
			{
				/*If the two entered passwords are matched jump to Step 2*/
				PasswordSuccessful();
    172a:	0e 94 99 0a 	call	0x1532	; 0x1532 <PasswordSuccessful>
    172e:	36 c0       	rjmp	.+108    	; 0x179c <main+0x146>
				break;
			}
			else if (received_byte == NOT_MATCHED)
    1730:	88 89       	ldd	r24, Y+16	; 0x10
    1732:	88 23       	and	r24, r24
    1734:	79 f7       	brne	.-34     	; 0x1714 <main+0xbe>
			{
				/*The two passwords don't match, ask user to try again*/
				WrongPasswordMessage();
    1736:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <WrongPasswordMessage>
				SetPasswordMessage();
    173a:	0e 94 ca 09 	call	0x1394	; 0x1394 <SetPasswordMessage>
				UART_SendByte(FIRST_TIME_PASSWORD);
    173e:	8a e0       	ldi	r24, 0x0A	; 10
    1740:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
				received_byte = SetPassword();
    1744:	0e 94 af 05 	call	0xb5e	; 0xb5e <SetPassword>
    1748:	88 8b       	std	Y+16, r24	; 0x10
				if (received_byte == MATCHED)
    174a:	88 89       	ldd	r24, Y+16	; 0x10
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	19 f4       	brne	.+6      	; 0x1756 <main+0x100>
				{
					/*If the two entered passwords are matched jump to Step 2*/
					PasswordSuccessful();
    1750:	0e 94 99 0a 	call	0x1532	; 0x1532 <PasswordSuccessful>
    1754:	23 c0       	rjmp	.+70     	; 0x179c <main+0x146>
					break;
				}
				else if (received_byte == NOT_MATCHED)
    1756:	88 89       	ldd	r24, Y+16	; 0x10
    1758:	88 23       	and	r24, r24
    175a:	e1 f6       	brne	.-72     	; 0x1714 <main+0xbe>
				{
					/*The two passwords don't match, ask user to try again*/
					WrongPasswordMessage();
    175c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <WrongPasswordMessage>
					SetPasswordMessage();
    1760:	0e 94 ca 09 	call	0x1394	; 0x1394 <SetPasswordMessage>
					UART_SendByte(FIRST_TIME_PASSWORD);
    1764:	8a e0       	ldi	r24, 0x0A	; 10
    1766:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
					received_byte = SetPassword();
    176a:	0e 94 af 05 	call	0xb5e	; 0xb5e <SetPassword>
    176e:	88 8b       	std	Y+16, r24	; 0x10
					if (received_byte == MATCHED)
    1770:	88 89       	ldd	r24, Y+16	; 0x10
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	19 f4       	brne	.+6      	; 0x177c <main+0x126>
					{
						/*If the two entered passwords are matched jump to Step 2*/
						PasswordSuccessful();
    1776:	0e 94 99 0a 	call	0x1532	; 0x1532 <PasswordSuccessful>
    177a:	10 c0       	rjmp	.+32     	; 0x179c <main+0x146>
						break;
					}
					else
					{
						/*Password entered wrong for 3 consecutive times, display ERROR and enable Buzzer*/
						LCD_ClearScreen();
    177c:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_ClearScreen>
						UART_SendByte(WRONG_PASS);
    1780:	82 e3       	ldi	r24, 0x32	; 50
    1782:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
						LCD_DisplayString("ERROR");
    1786:	84 e5       	ldi	r24, 0x54	; 84
    1788:	91 e0       	ldi	r25, 0x01	; 1
    178a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_DisplayString>
						tick =0;
    178e:	10 92 80 01 	sts	0x0180, r1
						while(tick != 60); /*Show message for 1 min*/
    1792:	80 91 80 01 	lds	r24, 0x0180
    1796:	8c 33       	cpi	r24, 0x3C	; 60
    1798:	e1 f7       	brne	.-8      	; 0x1792 <main+0x13c>
    179a:	bc cf       	rjmp	.-136    	; 0x1714 <main+0xbe>
		while(1)
		{
			/*------------------Step 2-----------------*/

			/*Display Main Menu*/
			DisplayMainMenu();
    179c:	0e 94 85 0a 	call	0x150a	; 0x150a <DisplayMainMenu>

			key = KEYPAD_GetPressedKey();
    17a0:	0e 94 2d 10 	call	0x205a	; 0x205a <KEYPAD_GetPressedKey>
    17a4:	8f 87       	std	Y+15, r24	; 0x0f
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	aa ef       	ldi	r26, 0xFA	; 250
    17ac:	b3 e4       	ldi	r27, 0x43	; 67
    17ae:	8b 87       	std	Y+11, r24	; 0x0b
    17b0:	9c 87       	std	Y+12, r25	; 0x0c
    17b2:	ad 87       	std	Y+13, r26	; 0x0d
    17b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    17bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4a ef       	ldi	r20, 0xFA	; 250
    17c4:	54 e4       	ldi	r21, 0x44	; 68
    17c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	8f 83       	std	Y+7, r24	; 0x07
    17d0:	98 87       	std	Y+8, r25	; 0x08
    17d2:	a9 87       	std	Y+9, r26	; 0x09
    17d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d6:	6f 81       	ldd	r22, Y+7	; 0x07
    17d8:	78 85       	ldd	r23, Y+8	; 0x08
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <main+0x1a2>
		__ticks = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	3f c0       	rjmp	.+126    	; 0x1876 <main+0x220>
	else if (__tmp > 65535)
    17f8:	6f 81       	ldd	r22, Y+7	; 0x07
    17fa:	78 85       	ldd	r23, Y+8	; 0x08
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180c:	18 16       	cp	r1, r24
    180e:	4c f5       	brge	.+82     	; 0x1862 <main+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1810:	6b 85       	ldd	r22, Y+11	; 0x0b
    1812:	7c 85       	ldd	r23, Y+12	; 0x0c
    1814:	8d 85       	ldd	r24, Y+13	; 0x0d
    1816:	9e 85       	ldd	r25, Y+14	; 0x0e
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e2       	ldi	r20, 0x20	; 32
    181e:	51 e4       	ldi	r21, 0x41	; 65
    1820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	0f c0       	rjmp	.+30     	; 0x1858 <main+0x202>
    183a:	88 ec       	ldi	r24, 0xC8	; 200
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9c 83       	std	Y+4, r25	; 0x04
    1840:	8b 83       	std	Y+3, r24	; 0x03
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <main+0x1f0>
    184a:	9c 83       	std	Y+4, r25	; 0x04
    184c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	9e 83       	std	Y+6, r25	; 0x06
    1856:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	69 f7       	brne	.-38     	; 0x183a <main+0x1e4>
    1860:	14 c0       	rjmp	.+40     	; 0x188a <main+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1862:	6f 81       	ldd	r22, Y+7	; 0x07
    1864:	78 85       	ldd	r23, Y+8	; 0x08
    1866:	89 85       	ldd	r24, Y+9	; 0x09
    1868:	9a 85       	ldd	r25, Y+10	; 0x0a
    186a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	9e 83       	std	Y+6, r25	; 0x06
    1874:	8d 83       	std	Y+5, r24	; 0x05
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	9a 83       	std	Y+2, r25	; 0x02
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	f1 f7       	brne	.-4      	; 0x1882 <main+0x22c>
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);

			if (key == '+') /*User chooses to open the door*/
    188a:	8f 85       	ldd	r24, Y+15	; 0x0f
    188c:	8b 32       	cpi	r24, 0x2B	; 43
    188e:	09 f0       	breq	.+2      	; 0x1892 <main+0x23c>
    1890:	4f c0       	rjmp	.+158    	; 0x1930 <main+0x2da>
			{
				/*------------------Step 3-----------------*/
				EnterPasswordMessage();
    1892:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <EnterPasswordMessage>
				/*Send a command to the Control_ECU to verify the password entered with the saved password*/
				UART_SendByte(PASSWORD_CHECK);
    1896:	8e e1       	ldi	r24, 0x1E	; 30
    1898:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
				received_byte = CheckPassword();
    189c:	0e 94 73 07 	call	0xee6	; 0xee6 <CheckPassword>
    18a0:	88 8b       	std	Y+16, r24	; 0x10
				if(received_byte== MATCHED)
    18a2:	88 89       	ldd	r24, Y+16	; 0x10
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	31 f4       	brne	.+12     	; 0x18b4 <main+0x25e>
				{
					/*If the two passwords are matched send a command to the Control_ECU to open the door*/
					UART_SendByte(OPEN_DOOR);
    18a8:	88 e2       	ldi	r24, 0x28	; 40
    18aa:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
					OpenCloseDoor();
    18ae:	0e 94 03 09 	call	0x1206	; 0x1206 <OpenCloseDoor>
    18b2:	74 cf       	rjmp	.-280    	; 0x179c <main+0x146>
				}
				else if (received_byte == NOT_MATCHED)
    18b4:	88 89       	ldd	r24, Y+16	; 0x10
    18b6:	88 23       	and	r24, r24
    18b8:	09 f0       	breq	.+2      	; 0x18bc <main+0x266>
    18ba:	70 cf       	rjmp	.-288    	; 0x179c <main+0x146>
				{
					/*If the password doesn't match ask the user to enter password again for the second time*/
					WrongPasswordMessage();
    18bc:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <WrongPasswordMessage>
					EnterPasswordMessage();
    18c0:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <EnterPasswordMessage>
					UART_SendByte(PASSWORD_CHECK);
    18c4:	8e e1       	ldi	r24, 0x1E	; 30
    18c6:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
					received_byte = CheckPassword();
    18ca:	0e 94 73 07 	call	0xee6	; 0xee6 <CheckPassword>
    18ce:	88 8b       	std	Y+16, r24	; 0x10
					if (received_byte == MATCHED)
    18d0:	88 89       	ldd	r24, Y+16	; 0x10
    18d2:	81 30       	cpi	r24, 0x01	; 1
    18d4:	31 f4       	brne	.+12     	; 0x18e2 <main+0x28c>
					{
						/*If the two passwords are matched send a command to the Control_ECU to open the door*/
						UART_SendByte(OPEN_DOOR);
    18d6:	88 e2       	ldi	r24, 0x28	; 40
    18d8:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
						OpenCloseDoor();
    18dc:	0e 94 03 09 	call	0x1206	; 0x1206 <OpenCloseDoor>
    18e0:	5d cf       	rjmp	.-326    	; 0x179c <main+0x146>
					}
					else if (received_byte == NOT_MATCHED)
    18e2:	88 89       	ldd	r24, Y+16	; 0x10
    18e4:	88 23       	and	r24, r24
    18e6:	09 f0       	breq	.+2      	; 0x18ea <main+0x294>
    18e8:	59 cf       	rjmp	.-334    	; 0x179c <main+0x146>
					{
						/*If the password doesn't match ask the user to enter password again for the last time*/
						WrongPasswordMessage();
    18ea:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <WrongPasswordMessage>
						EnterPasswordMessage();
    18ee:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <EnterPasswordMessage>
						UART_SendByte(PASSWORD_CHECK);
    18f2:	8e e1       	ldi	r24, 0x1E	; 30
    18f4:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
						received_byte = CheckPassword();
    18f8:	0e 94 73 07 	call	0xee6	; 0xee6 <CheckPassword>
    18fc:	88 8b       	std	Y+16, r24	; 0x10
						if (received_byte == MATCHED)
    18fe:	88 89       	ldd	r24, Y+16	; 0x10
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	31 f4       	brne	.+12     	; 0x1910 <main+0x2ba>
						{
							/*If the two passwords are matched send a command to the Control_ECU to open the door*/
							UART_SendByte(OPEN_DOOR);
    1904:	88 e2       	ldi	r24, 0x28	; 40
    1906:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
							OpenCloseDoor();
    190a:	0e 94 03 09 	call	0x1206	; 0x1206 <OpenCloseDoor>
    190e:	46 cf       	rjmp	.-372    	; 0x179c <main+0x146>
						}
						else
						{
							/*Password entered wrong for 3 consecutive times, display ERROR and enable Buzzer for 1 minute*/
							LCD_ClearScreen();
    1910:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_ClearScreen>
							UART_SendByte(WRONG_PASS);
    1914:	82 e3       	ldi	r24, 0x32	; 50
    1916:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
							LCD_DisplayString("*****ERROR*****");
    191a:	8a e5       	ldi	r24, 0x5A	; 90
    191c:	91 e0       	ldi	r25, 0x01	; 1
    191e:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_DisplayString>
							tick =0;
    1922:	10 92 80 01 	sts	0x0180, r1
							while(tick != 60);
    1926:	80 91 80 01 	lds	r24, 0x0180
    192a:	8c 33       	cpi	r24, 0x3C	; 60
    192c:	e1 f7       	brne	.-8      	; 0x1926 <main+0x2d0>
    192e:	36 cf       	rjmp	.-404    	; 0x179c <main+0x146>
						}
					}
				}
			}
			else if (key == '-') /*User chooses to change the password*/
    1930:	8f 85       	ldd	r24, Y+15	; 0x0f
    1932:	8d 32       	cpi	r24, 0x2D	; 45
    1934:	09 f0       	breq	.+2      	; 0x1938 <main+0x2e2>
    1936:	32 cf       	rjmp	.-412    	; 0x179c <main+0x146>
			{
				/*------------------Step 4-----------------*/
				/*Ask user to enter the old password*/
				EnterPasswordMessage();
    1938:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <EnterPasswordMessage>
				/*Send a command to Control_ECU to verify the password*/
				UART_SendByte(PASSWORD_CHECK);
    193c:	8e e1       	ldi	r24, 0x1E	; 30
    193e:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
				received_byte = CheckPassword();
    1942:	0e 94 73 07 	call	0xee6	; 0xee6 <CheckPassword>
    1946:	88 8b       	std	Y+16, r24	; 0x10
				if (received_byte == MATCHED)
    1948:	88 89       	ldd	r24, Y+16	; 0x10
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	09 f4       	brne	.+2      	; 0x1950 <main+0x2fa>
    194e:	e2 ce       	rjmp	.-572    	; 0x1714 <main+0xbe>
				{
					/*Return to step 1 again and ask the user to enter the new password*/
					break;
				}
				else if (received_byte == NOT_MATCHED)
    1950:	88 89       	ldd	r24, Y+16	; 0x10
    1952:	88 23       	and	r24, r24
    1954:	09 f0       	breq	.+2      	; 0x1958 <main+0x302>
    1956:	22 cf       	rjmp	.-444    	; 0x179c <main+0x146>
				{
					/*If the entered password doesn't match the saved one ask the user to enter the password again*/
					WrongPasswordMessage();
    1958:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <WrongPasswordMessage>
					EnterPasswordMessage();
    195c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <EnterPasswordMessage>
					UART_SendByte(PASSWORD_CHECK);
    1960:	8e e1       	ldi	r24, 0x1E	; 30
    1962:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
					received_byte = CheckPassword();
    1966:	0e 94 73 07 	call	0xee6	; 0xee6 <CheckPassword>
    196a:	88 8b       	std	Y+16, r24	; 0x10
					if (received_byte == MATCHED)
    196c:	88 89       	ldd	r24, Y+16	; 0x10
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	09 f4       	brne	.+2      	; 0x1974 <main+0x31e>
    1972:	d0 ce       	rjmp	.-608    	; 0x1714 <main+0xbe>
					{
						/*Return to step 1 again and ask the user to enter the new password*/
						break;
					}
					else if (received_byte == NOT_MATCHED)
    1974:	88 89       	ldd	r24, Y+16	; 0x10
    1976:	88 23       	and	r24, r24
    1978:	09 f0       	breq	.+2      	; 0x197c <main+0x326>
    197a:	10 cf       	rjmp	.-480    	; 0x179c <main+0x146>
					{
						/*If the entered password doesn't match the saved one ask the user to enter the password again*/
						WrongPasswordMessage();
    197c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <WrongPasswordMessage>
						EnterPasswordMessage();
    1980:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <EnterPasswordMessage>
						UART_SendByte(PASSWORD_CHECK);
    1984:	8e e1       	ldi	r24, 0x1E	; 30
    1986:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
						received_byte = CheckPassword();
    198a:	0e 94 73 07 	call	0xee6	; 0xee6 <CheckPassword>
    198e:	88 8b       	std	Y+16, r24	; 0x10
						if (received_byte == MATCHED){
    1990:	88 89       	ldd	r24, Y+16	; 0x10
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	09 f4       	brne	.+2      	; 0x1998 <main+0x342>
    1996:	be ce       	rjmp	.-644    	; 0x1714 <main+0xbe>
							/*Return to step 1 again and ask the user to enter the new password*/
							break;
						}
						else if (received_byte == NOT_MATCHED)
    1998:	88 89       	ldd	r24, Y+16	; 0x10
    199a:	88 23       	and	r24, r24
    199c:	09 f0       	breq	.+2      	; 0x19a0 <main+0x34a>
    199e:	fe ce       	rjmp	.-516    	; 0x179c <main+0x146>
						{
							/*Password entered wrong for 3 consecutive times, display ERROR and enable Buzzer for 1 minute*/
							LCD_ClearScreen();
    19a0:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_ClearScreen>
							UART_SendByte(WRONG_PASS);
    19a4:	82 e3       	ldi	r24, 0x32	; 50
    19a6:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
							LCD_DisplayString("*****ERROR*****");
    19aa:	8a e5       	ldi	r24, 0x5A	; 90
    19ac:	91 e0       	ldi	r25, 0x01	; 1
    19ae:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_DisplayString>
							tick =0;
    19b2:	10 92 80 01 	sts	0x0180, r1
							while(tick != 60); /*Display the message for 1 minute*/
    19b6:	80 91 80 01 	lds	r24, 0x0180
    19ba:	8c 33       	cpi	r24, 0x3C	; 60
    19bc:	e1 f7       	brne	.-8      	; 0x19b6 <main+0x360>
    19be:	ee ce       	rjmp	.-548    	; 0x179c <main+0x146>

000019c0 <GPIO_SetPinDirection>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void GPIO_SetPinDirection(uint8 port_num , uint8 pin_num , GPIO_PinDirectionType direction)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <GPIO_SetPinDirection+0x6>
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <GPIO_SetPinDirection+0x8>
    19c8:	0f 92       	push	r0
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	6a 83       	std	Y+2, r22	; 0x02
    19d2:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)){
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	84 30       	cpi	r24, 0x04	; 4
    19d8:	08 f0       	brcs	.+2      	; 0x19dc <GPIO_SetPinDirection+0x1c>
    19da:	d5 c0       	rjmp	.+426    	; 0x1b86 <GPIO_SetPinDirection+0x1c6>
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	88 30       	cpi	r24, 0x08	; 8
    19e0:	08 f0       	brcs	.+2      	; 0x19e4 <GPIO_SetPinDirection+0x24>
    19e2:	d1 c0       	rjmp	.+418    	; 0x1b86 <GPIO_SetPinDirection+0x1c6>

	}
	else {
		switch(port_num){
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	3d 83       	std	Y+5, r19	; 0x05
    19ec:	2c 83       	std	Y+4, r18	; 0x04
    19ee:	8c 81       	ldd	r24, Y+4	; 0x04
    19f0:	9d 81       	ldd	r25, Y+5	; 0x05
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	91 05       	cpc	r25, r1
    19f6:	09 f4       	brne	.+2      	; 0x19fa <GPIO_SetPinDirection+0x3a>
    19f8:	43 c0       	rjmp	.+134    	; 0x1a80 <GPIO_SetPinDirection+0xc0>
    19fa:	2c 81       	ldd	r18, Y+4	; 0x04
    19fc:	3d 81       	ldd	r19, Y+5	; 0x05
    19fe:	22 30       	cpi	r18, 0x02	; 2
    1a00:	31 05       	cpc	r19, r1
    1a02:	2c f4       	brge	.+10     	; 0x1a0e <GPIO_SetPinDirection+0x4e>
    1a04:	8c 81       	ldd	r24, Y+4	; 0x04
    1a06:	9d 81       	ldd	r25, Y+5	; 0x05
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	71 f0       	breq	.+28     	; 0x1a28 <GPIO_SetPinDirection+0x68>
    1a0c:	bc c0       	rjmp	.+376    	; 0x1b86 <GPIO_SetPinDirection+0x1c6>
    1a0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a10:	3d 81       	ldd	r19, Y+5	; 0x05
    1a12:	22 30       	cpi	r18, 0x02	; 2
    1a14:	31 05       	cpc	r19, r1
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <GPIO_SetPinDirection+0x5a>
    1a18:	5f c0       	rjmp	.+190    	; 0x1ad8 <GPIO_SetPinDirection+0x118>
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	83 30       	cpi	r24, 0x03	; 3
    1a20:	91 05       	cpc	r25, r1
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <GPIO_SetPinDirection+0x66>
    1a24:	85 c0       	rjmp	.+266    	; 0x1b30 <GPIO_SetPinDirection+0x170>
    1a26:	af c0       	rjmp	.+350    	; 0x1b86 <GPIO_SetPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT){
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	81 30       	cpi	r24, 0x01	; 1
    1a2c:	a1 f4       	brne	.+40     	; 0x1a56 <GPIO_SetPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    1a2e:	aa e3       	ldi	r26, 0x3A	; 58
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	ea e3       	ldi	r30, 0x3A	; 58
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 2e       	mov	r0, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <GPIO_SetPinDirection+0x8c>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	0a 94       	dec	r0
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <GPIO_SetPinDirection+0x88>
    1a50:	84 2b       	or	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	98 c0       	rjmp	.+304    	; 0x1b86 <GPIO_SetPinDirection+0x1c6>
			}
			else CLEAR_BIT(DDRA,pin_num);
    1a56:	aa e3       	ldi	r26, 0x3A	; 58
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	ea e3       	ldi	r30, 0x3A	; 58
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <GPIO_SetPinDirection+0xb4>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <GPIO_SetPinDirection+0xb0>
    1a78:	80 95       	com	r24
    1a7a:	84 23       	and	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	83 c0       	rjmp	.+262    	; 0x1b86 <GPIO_SetPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT){
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	a1 f4       	brne	.+40     	; 0x1aae <GPIO_SetPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
    1a86:	a7 e3       	ldi	r26, 0x37	; 55
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e7 e3       	ldi	r30, 0x37	; 55
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	48 2f       	mov	r20, r24
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	02 2e       	mov	r0, r18
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <GPIO_SetPinDirection+0xe4>
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	0a 94       	dec	r0
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <GPIO_SetPinDirection+0xe0>
    1aa8:	84 2b       	or	r24, r20
    1aaa:	8c 93       	st	X, r24
    1aac:	6c c0       	rjmp	.+216    	; 0x1b86 <GPIO_SetPinDirection+0x1c6>
			}
			else CLEAR_BIT(DDRB,pin_num);
    1aae:	a7 e3       	ldi	r26, 0x37	; 55
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e7 e3       	ldi	r30, 0x37	; 55
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	48 2f       	mov	r20, r24
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	02 2e       	mov	r0, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <GPIO_SetPinDirection+0x10c>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	0a 94       	dec	r0
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <GPIO_SetPinDirection+0x108>
    1ad0:	80 95       	com	r24
    1ad2:	84 23       	and	r24, r20
    1ad4:	8c 93       	st	X, r24
    1ad6:	57 c0       	rjmp	.+174    	; 0x1b86 <GPIO_SetPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT){
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	a1 f4       	brne	.+40     	; 0x1b06 <GPIO_SetPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
    1ade:	a4 e3       	ldi	r26, 0x34	; 52
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e4 e3       	ldi	r30, 0x34	; 52
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 2e       	mov	r0, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <GPIO_SetPinDirection+0x13c>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <GPIO_SetPinDirection+0x138>
    1b00:	84 2b       	or	r24, r20
    1b02:	8c 93       	st	X, r24
    1b04:	40 c0       	rjmp	.+128    	; 0x1b86 <GPIO_SetPinDirection+0x1c6>
			}
			else CLEAR_BIT(DDRC,pin_num);
    1b06:	a4 e3       	ldi	r26, 0x34	; 52
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e4 e3       	ldi	r30, 0x34	; 52
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <GPIO_SetPinDirection+0x164>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <GPIO_SetPinDirection+0x160>
    1b28:	80 95       	com	r24
    1b2a:	84 23       	and	r24, r20
    1b2c:	8c 93       	st	X, r24
    1b2e:	2b c0       	rjmp	.+86     	; 0x1b86 <GPIO_SetPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT){
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	a1 f4       	brne	.+40     	; 0x1b5e <GPIO_SetPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
    1b36:	a1 e3       	ldi	r26, 0x31	; 49
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e1 e3       	ldi	r30, 0x31	; 49
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	48 2f       	mov	r20, r24
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	02 2e       	mov	r0, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <GPIO_SetPinDirection+0x194>
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	0a 94       	dec	r0
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <GPIO_SetPinDirection+0x190>
    1b58:	84 2b       	or	r24, r20
    1b5a:	8c 93       	st	X, r24
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <GPIO_SetPinDirection+0x1c6>
			}
			else CLEAR_BIT(DDRD,pin_num);
    1b5e:	a1 e3       	ldi	r26, 0x31	; 49
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e1 e3       	ldi	r30, 0x31	; 49
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	48 2f       	mov	r20, r24
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 2e       	mov	r0, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <GPIO_SetPinDirection+0x1bc>
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	0a 94       	dec	r0
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <GPIO_SetPinDirection+0x1b8>
    1b80:	80 95       	com	r24
    1b82:	84 23       	and	r24, r20
    1b84:	8c 93       	st	X, r24
			break;
		}
	}
}
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <GPIO_WritePin>:


void GPIO_WritePin (uint8 port_num , uint8 pin_num , uint8 value)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <GPIO_WritePin+0x6>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <GPIO_WritePin+0x8>
    1b9e:	0f 92       	push	r0
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	6a 83       	std	Y+2, r22	; 0x02
    1ba8:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	84 30       	cpi	r24, 0x04	; 4
    1bae:	08 f0       	brcs	.+2      	; 0x1bb2 <GPIO_WritePin+0x1c>
    1bb0:	d5 c0       	rjmp	.+426    	; 0x1d5c <GPIO_WritePin+0x1c6>
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	88 30       	cpi	r24, 0x08	; 8
    1bb6:	08 f0       	brcs	.+2      	; 0x1bba <GPIO_WritePin+0x24>
    1bb8:	d1 c0       	rjmp	.+418    	; 0x1d5c <GPIO_WritePin+0x1c6>
	{

	}
	else
	{
		switch (port_num){
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	3d 83       	std	Y+5, r19	; 0x05
    1bc2:	2c 83       	std	Y+4, r18	; 0x04
    1bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	91 05       	cpc	r25, r1
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <GPIO_WritePin+0x3a>
    1bce:	43 c0       	rjmp	.+134    	; 0x1c56 <GPIO_WritePin+0xc0>
    1bd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	2c f4       	brge	.+10     	; 0x1be4 <GPIO_WritePin+0x4e>
    1bda:	8c 81       	ldd	r24, Y+4	; 0x04
    1bdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	71 f0       	breq	.+28     	; 0x1bfe <GPIO_WritePin+0x68>
    1be2:	bc c0       	rjmp	.+376    	; 0x1d5c <GPIO_WritePin+0x1c6>
    1be4:	2c 81       	ldd	r18, Y+4	; 0x04
    1be6:	3d 81       	ldd	r19, Y+5	; 0x05
    1be8:	22 30       	cpi	r18, 0x02	; 2
    1bea:	31 05       	cpc	r19, r1
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <GPIO_WritePin+0x5a>
    1bee:	5f c0       	rjmp	.+190    	; 0x1cae <GPIO_WritePin+0x118>
    1bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf4:	83 30       	cpi	r24, 0x03	; 3
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <GPIO_WritePin+0x66>
    1bfa:	85 c0       	rjmp	.+266    	; 0x1d06 <GPIO_WritePin+0x170>
    1bfc:	af c0       	rjmp	.+350    	; 0x1d5c <GPIO_WritePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_HIGH){
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	a1 f4       	brne	.+40     	; 0x1c2c <GPIO_WritePin+0x96>
				SET_BIT(PORTA,pin_num);
    1c04:	ab e3       	ldi	r26, 0x3B	; 59
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	eb e3       	ldi	r30, 0x3B	; 59
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	48 2f       	mov	r20, r24
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 2e       	mov	r0, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <GPIO_WritePin+0x8c>
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	0a 94       	dec	r0
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <GPIO_WritePin+0x88>
    1c26:	84 2b       	or	r24, r20
    1c28:	8c 93       	st	X, r24
    1c2a:	98 c0       	rjmp	.+304    	; 0x1d5c <GPIO_WritePin+0x1c6>
			}
			else CLEAR_BIT(PORTA,pin_num);
    1c2c:	ab e3       	ldi	r26, 0x3B	; 59
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	eb e3       	ldi	r30, 0x3B	; 59
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	48 2f       	mov	r20, r24
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	02 2e       	mov	r0, r18
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <GPIO_WritePin+0xb4>
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	0a 94       	dec	r0
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <GPIO_WritePin+0xb0>
    1c4e:	80 95       	com	r24
    1c50:	84 23       	and	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	83 c0       	rjmp	.+262    	; 0x1d5c <GPIO_WritePin+0x1c6>
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH){
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	a1 f4       	brne	.+40     	; 0x1c84 <GPIO_WritePin+0xee>
				SET_BIT(PORTB,pin_num);
    1c5c:	a8 e3       	ldi	r26, 0x38	; 56
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e8 e3       	ldi	r30, 0x38	; 56
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	48 2f       	mov	r20, r24
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	02 2e       	mov	r0, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <GPIO_WritePin+0xe4>
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	0a 94       	dec	r0
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <GPIO_WritePin+0xe0>
    1c7e:	84 2b       	or	r24, r20
    1c80:	8c 93       	st	X, r24
    1c82:	6c c0       	rjmp	.+216    	; 0x1d5c <GPIO_WritePin+0x1c6>
			}
			else CLEAR_BIT(PORTB,pin_num);
    1c84:	a8 e3       	ldi	r26, 0x38	; 56
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e8 e3       	ldi	r30, 0x38	; 56
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	48 2f       	mov	r20, r24
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 2e       	mov	r0, r18
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <GPIO_WritePin+0x10c>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	0a 94       	dec	r0
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <GPIO_WritePin+0x108>
    1ca6:	80 95       	com	r24
    1ca8:	84 23       	and	r24, r20
    1caa:	8c 93       	st	X, r24
    1cac:	57 c0       	rjmp	.+174    	; 0x1d5c <GPIO_WritePin+0x1c6>
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH){
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	a1 f4       	brne	.+40     	; 0x1cdc <GPIO_WritePin+0x146>
				SET_BIT(PORTC,pin_num);
    1cb4:	a5 e3       	ldi	r26, 0x35	; 53
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e5 e3       	ldi	r30, 0x35	; 53
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 2e       	mov	r0, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <GPIO_WritePin+0x13c>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	0a 94       	dec	r0
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <GPIO_WritePin+0x138>
    1cd6:	84 2b       	or	r24, r20
    1cd8:	8c 93       	st	X, r24
    1cda:	40 c0       	rjmp	.+128    	; 0x1d5c <GPIO_WritePin+0x1c6>
			}
			else CLEAR_BIT(PORTC,pin_num);
    1cdc:	a5 e3       	ldi	r26, 0x35	; 53
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e5 e3       	ldi	r30, 0x35	; 53
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	48 2f       	mov	r20, r24
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	02 2e       	mov	r0, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <GPIO_WritePin+0x164>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 94       	dec	r0
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <GPIO_WritePin+0x160>
    1cfe:	80 95       	com	r24
    1d00:	84 23       	and	r24, r20
    1d02:	8c 93       	st	X, r24
    1d04:	2b c0       	rjmp	.+86     	; 0x1d5c <GPIO_WritePin+0x1c6>
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH){
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	81 30       	cpi	r24, 0x01	; 1
    1d0a:	a1 f4       	brne	.+40     	; 0x1d34 <GPIO_WritePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1d0c:	a2 e3       	ldi	r26, 0x32	; 50
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e2 e3       	ldi	r30, 0x32	; 50
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	48 2f       	mov	r20, r24
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 2e       	mov	r0, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <GPIO_WritePin+0x194>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <GPIO_WritePin+0x190>
    1d2e:	84 2b       	or	r24, r20
    1d30:	8c 93       	st	X, r24
    1d32:	14 c0       	rjmp	.+40     	; 0x1d5c <GPIO_WritePin+0x1c6>
			}
			else CLEAR_BIT(PORTD,pin_num);
    1d34:	a2 e3       	ldi	r26, 0x32	; 50
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e2 e3       	ldi	r30, 0x32	; 50
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	48 2f       	mov	r20, r24
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	02 2e       	mov	r0, r18
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <GPIO_WritePin+0x1bc>
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	0a 94       	dec	r0
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <GPIO_WritePin+0x1b8>
    1d56:	80 95       	com	r24
    1d58:	84 23       	and	r24, r20
    1d5a:	8c 93       	st	X, r24
			break;
		}
	}
}
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <GPIO_ReadPin>:


uint8 GPIO_ReadPin(uint8 port_num , uint8 pin_num)
{
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <GPIO_ReadPin+0x6>
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <GPIO_ReadPin+0x8>
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <GPIO_ReadPin+0xa>
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	8a 83       	std	Y+2, r24	; 0x02
    1d7c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = 0;
    1d7e:	19 82       	std	Y+1, r1	; 0x01

	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	84 30       	cpi	r24, 0x04	; 4
    1d84:	08 f0       	brcs	.+2      	; 0x1d88 <GPIO_ReadPin+0x1c>
    1d86:	90 c0       	rjmp	.+288    	; 0x1ea8 <GPIO_ReadPin+0x13c>
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	88 30       	cpi	r24, 0x08	; 8
    1d8c:	08 f0       	brcs	.+2      	; 0x1d90 <GPIO_ReadPin+0x24>
    1d8e:	8c c0       	rjmp	.+280    	; 0x1ea8 <GPIO_ReadPin+0x13c>
	{

	}
	else
	{
		switch(port_num){
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	3e 83       	std	Y+6, r19	; 0x06
    1d98:	2d 83       	std	Y+5, r18	; 0x05
    1d9a:	4d 81       	ldd	r20, Y+5	; 0x05
    1d9c:	5e 81       	ldd	r21, Y+6	; 0x06
    1d9e:	41 30       	cpi	r20, 0x01	; 1
    1da0:	51 05       	cpc	r21, r1
    1da2:	a1 f1       	breq	.+104    	; 0x1e0c <GPIO_ReadPin+0xa0>
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	82 30       	cpi	r24, 0x02	; 2
    1daa:	91 05       	cpc	r25, r1
    1dac:	34 f4       	brge	.+12     	; 0x1dba <GPIO_ReadPin+0x4e>
    1dae:	2d 81       	ldd	r18, Y+5	; 0x05
    1db0:	3e 81       	ldd	r19, Y+6	; 0x06
    1db2:	21 15       	cp	r18, r1
    1db4:	31 05       	cpc	r19, r1
    1db6:	71 f0       	breq	.+28     	; 0x1dd4 <GPIO_ReadPin+0x68>
    1db8:	77 c0       	rjmp	.+238    	; 0x1ea8 <GPIO_ReadPin+0x13c>
    1dba:	4d 81       	ldd	r20, Y+5	; 0x05
    1dbc:	5e 81       	ldd	r21, Y+6	; 0x06
    1dbe:	42 30       	cpi	r20, 0x02	; 2
    1dc0:	51 05       	cpc	r21, r1
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <GPIO_ReadPin+0x5a>
    1dc4:	3d c0       	rjmp	.+122    	; 0x1e40 <GPIO_ReadPin+0xd4>
    1dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dca:	83 30       	cpi	r24, 0x03	; 3
    1dcc:	91 05       	cpc	r25, r1
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <GPIO_ReadPin+0x66>
    1dd0:	51 c0       	rjmp	.+162    	; 0x1e74 <GPIO_ReadPin+0x108>
    1dd2:	6a c0       	rjmp	.+212    	; 0x1ea8 <GPIO_ReadPin+0x13c>
		case PORTA_ID:
			if (BIT_IS_SET(PINA,pin_num) == LOGIC_HIGH){
    1dd4:	e9 e3       	ldi	r30, 0x39	; 57
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	48 2f       	mov	r20, r24
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 2e       	mov	r0, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <GPIO_ReadPin+0x84>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	0a 94       	dec	r0
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <GPIO_ReadPin+0x80>
    1df4:	84 23       	and	r24, r20
    1df6:	95 23       	and	r25, r21
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	19 f4       	brne	.+6      	; 0x1e04 <GPIO_ReadPin+0x98>
				pin_value = LOGIC_HIGH;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	52 c0       	rjmp	.+164    	; 0x1ea8 <GPIO_ReadPin+0x13c>
			}
			else return pin_value = LOGIC_LOW;
    1e04:	19 82       	std	Y+1, r1	; 0x01
    1e06:	99 81       	ldd	r25, Y+1	; 0x01
    1e08:	9c 83       	std	Y+4, r25	; 0x04
    1e0a:	50 c0       	rjmp	.+160    	; 0x1eac <GPIO_ReadPin+0x140>
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB,pin_num)){
    1e0c:	e6 e3       	ldi	r30, 0x36	; 54
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	88 2f       	mov	r24, r24
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a9 01       	movw	r20, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <GPIO_ReadPin+0xb8>
    1e20:	55 95       	asr	r21
    1e22:	47 95       	ror	r20
    1e24:	8a 95       	dec	r24
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <GPIO_ReadPin+0xb4>
    1e28:	ca 01       	movw	r24, r20
    1e2a:	81 70       	andi	r24, 0x01	; 1
    1e2c:	90 70       	andi	r25, 0x00	; 0
    1e2e:	88 23       	and	r24, r24
    1e30:	19 f0       	breq	.+6      	; 0x1e38 <GPIO_ReadPin+0xcc>
				pin_value = LOGIC_HIGH;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	38 c0       	rjmp	.+112    	; 0x1ea8 <GPIO_ReadPin+0x13c>
			}
			else return pin_value = LOGIC_LOW;
    1e38:	19 82       	std	Y+1, r1	; 0x01
    1e3a:	59 81       	ldd	r21, Y+1	; 0x01
    1e3c:	5c 83       	std	Y+4, r21	; 0x04
    1e3e:	36 c0       	rjmp	.+108    	; 0x1eac <GPIO_ReadPin+0x140>
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC,pin_num)){
    1e40:	e3 e3       	ldi	r30, 0x33	; 51
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	88 2f       	mov	r24, r24
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a9 01       	movw	r20, r18
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <GPIO_ReadPin+0xec>
    1e54:	55 95       	asr	r21
    1e56:	47 95       	ror	r20
    1e58:	8a 95       	dec	r24
    1e5a:	e2 f7       	brpl	.-8      	; 0x1e54 <GPIO_ReadPin+0xe8>
    1e5c:	ca 01       	movw	r24, r20
    1e5e:	81 70       	andi	r24, 0x01	; 1
    1e60:	90 70       	andi	r25, 0x00	; 0
    1e62:	88 23       	and	r24, r24
    1e64:	19 f0       	breq	.+6      	; 0x1e6c <GPIO_ReadPin+0x100>
				pin_value = LOGIC_HIGH;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	1e c0       	rjmp	.+60     	; 0x1ea8 <GPIO_ReadPin+0x13c>
			}
			else return pin_value = LOGIC_LOW;
    1e6c:	19 82       	std	Y+1, r1	; 0x01
    1e6e:	59 81       	ldd	r21, Y+1	; 0x01
    1e70:	5c 83       	std	Y+4, r21	; 0x04
    1e72:	1c c0       	rjmp	.+56     	; 0x1eac <GPIO_ReadPin+0x140>
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND,pin_num)){
    1e74:	e0 e3       	ldi	r30, 0x30	; 48
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	88 2f       	mov	r24, r24
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a9 01       	movw	r20, r18
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <GPIO_ReadPin+0x120>
    1e88:	55 95       	asr	r21
    1e8a:	47 95       	ror	r20
    1e8c:	8a 95       	dec	r24
    1e8e:	e2 f7       	brpl	.-8      	; 0x1e88 <GPIO_ReadPin+0x11c>
    1e90:	ca 01       	movw	r24, r20
    1e92:	81 70       	andi	r24, 0x01	; 1
    1e94:	90 70       	andi	r25, 0x00	; 0
    1e96:	88 23       	and	r24, r24
    1e98:	19 f0       	breq	.+6      	; 0x1ea0 <GPIO_ReadPin+0x134>
				pin_value = LOGIC_HIGH;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	04 c0       	rjmp	.+8      	; 0x1ea8 <GPIO_ReadPin+0x13c>
			}
			else return pin_value = LOGIC_LOW;
    1ea0:	19 82       	std	Y+1, r1	; 0x01
    1ea2:	59 81       	ldd	r21, Y+1	; 0x01
    1ea4:	5c 83       	std	Y+4, r21	; 0x04
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <GPIO_ReadPin+0x140>
			break;
		}
	}
	return pin_value;
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	8c 83       	std	Y+4, r24	; 0x04
    1eac:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1eae:	26 96       	adiw	r28, 0x06	; 6
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <GPIO_SetupPortDirection>:


void GPIO_SetupPortDirection(uint8 port_num , GPIO_PortDirectionType direction)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <GPIO_SetupPortDirection+0x6>
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <GPIO_SetupPortDirection+0x8>
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS){
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	84 30       	cpi	r24, 0x04	; 4
    1ed4:	90 f5       	brcc	.+100    	; 0x1f3a <GPIO_SetupPortDirection+0x7a>

	}
	else
	{
		switch (port_num){
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	3c 83       	std	Y+4, r19	; 0x04
    1ede:	2b 83       	std	Y+3, r18	; 0x03
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee4:	81 30       	cpi	r24, 0x01	; 1
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	d1 f0       	breq	.+52     	; 0x1f1e <GPIO_SetupPortDirection+0x5e>
    1eea:	2b 81       	ldd	r18, Y+3	; 0x03
    1eec:	3c 81       	ldd	r19, Y+4	; 0x04
    1eee:	22 30       	cpi	r18, 0x02	; 2
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <GPIO_SetupPortDirection+0x3e>
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	61 f0       	breq	.+24     	; 0x1f14 <GPIO_SetupPortDirection+0x54>
    1efc:	1e c0       	rjmp	.+60     	; 0x1f3a <GPIO_SetupPortDirection+0x7a>
    1efe:	2b 81       	ldd	r18, Y+3	; 0x03
    1f00:	3c 81       	ldd	r19, Y+4	; 0x04
    1f02:	22 30       	cpi	r18, 0x02	; 2
    1f04:	31 05       	cpc	r19, r1
    1f06:	81 f0       	breq	.+32     	; 0x1f28 <GPIO_SetupPortDirection+0x68>
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0c:	83 30       	cpi	r24, 0x03	; 3
    1f0e:	91 05       	cpc	r25, r1
    1f10:	81 f0       	breq	.+32     	; 0x1f32 <GPIO_SetupPortDirection+0x72>
    1f12:	13 c0       	rjmp	.+38     	; 0x1f3a <GPIO_SetupPortDirection+0x7a>
		case PORTA_ID :
			DDRA = direction;
    1f14:	ea e3       	ldi	r30, 0x3A	; 58
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	80 83       	st	Z, r24
    1f1c:	0e c0       	rjmp	.+28     	; 0x1f3a <GPIO_SetupPortDirection+0x7a>
			break;
		case PORTB_ID :
			DDRB = direction;
    1f1e:	e7 e3       	ldi	r30, 0x37	; 55
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	80 83       	st	Z, r24
    1f26:	09 c0       	rjmp	.+18     	; 0x1f3a <GPIO_SetupPortDirection+0x7a>
			break;
		case PORTC_ID :
			DDRC = direction;
    1f28:	e4 e3       	ldi	r30, 0x34	; 52
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	80 83       	st	Z, r24
    1f30:	04 c0       	rjmp	.+8      	; 0x1f3a <GPIO_SetupPortDirection+0x7a>
			break;
		case PORTD_ID :
			DDRD = direction;
    1f32:	e1 e3       	ldi	r30, 0x31	; 49
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <GPIO_WritePort>:

void GPIO_WritePort(uint8 port_num , uint8 value)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <GPIO_WritePort+0x6>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <GPIO_WritePort+0x8>
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	89 83       	std	Y+1, r24	; 0x01
    1f56:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS){
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	84 30       	cpi	r24, 0x04	; 4
    1f5c:	90 f5       	brcc	.+100    	; 0x1fc2 <GPIO_WritePort+0x7a>

	}
	else
	{
		switch (port_num){
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	3c 83       	std	Y+4, r19	; 0x04
    1f66:	2b 83       	std	Y+3, r18	; 0x03
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	91 05       	cpc	r25, r1
    1f70:	d1 f0       	breq	.+52     	; 0x1fa6 <GPIO_WritePort+0x5e>
    1f72:	2b 81       	ldd	r18, Y+3	; 0x03
    1f74:	3c 81       	ldd	r19, Y+4	; 0x04
    1f76:	22 30       	cpi	r18, 0x02	; 2
    1f78:	31 05       	cpc	r19, r1
    1f7a:	2c f4       	brge	.+10     	; 0x1f86 <GPIO_WritePort+0x3e>
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	61 f0       	breq	.+24     	; 0x1f9c <GPIO_WritePort+0x54>
    1f84:	1e c0       	rjmp	.+60     	; 0x1fc2 <GPIO_WritePort+0x7a>
    1f86:	2b 81       	ldd	r18, Y+3	; 0x03
    1f88:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8a:	22 30       	cpi	r18, 0x02	; 2
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	81 f0       	breq	.+32     	; 0x1fb0 <GPIO_WritePort+0x68>
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	83 30       	cpi	r24, 0x03	; 3
    1f96:	91 05       	cpc	r25, r1
    1f98:	81 f0       	breq	.+32     	; 0x1fba <GPIO_WritePort+0x72>
    1f9a:	13 c0       	rjmp	.+38     	; 0x1fc2 <GPIO_WritePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1f9c:	eb e3       	ldi	r30, 0x3B	; 59
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	80 83       	st	Z, r24
    1fa4:	0e c0       	rjmp	.+28     	; 0x1fc2 <GPIO_WritePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1fa6:	e8 e3       	ldi	r30, 0x38	; 56
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	80 83       	st	Z, r24
    1fae:	09 c0       	rjmp	.+18     	; 0x1fc2 <GPIO_WritePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1fb0:	e5 e3       	ldi	r30, 0x35	; 53
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	80 83       	st	Z, r24
    1fb8:	04 c0       	rjmp	.+8      	; 0x1fc2 <GPIO_WritePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1fba:	e2 e3       	ldi	r30, 0x32	; 50
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <GPIO_ReadPort>:

uint8 GPIO_ReadPort(uint8 port_num)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <GPIO_ReadPort+0x6>
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <GPIO_ReadPort+0x8>
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1fde:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS){
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	84 30       	cpi	r24, 0x04	; 4
    1fe4:	90 f5       	brcc	.+100    	; 0x204a <GPIO_ReadPort+0x7a>

	}
	else
	{
		switch(port_num){
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	3c 83       	std	Y+4, r19	; 0x04
    1fee:	2b 83       	std	Y+3, r18	; 0x03
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	81 30       	cpi	r24, 0x01	; 1
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	d1 f0       	breq	.+52     	; 0x202e <GPIO_ReadPort+0x5e>
    1ffa:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffe:	22 30       	cpi	r18, 0x02	; 2
    2000:	31 05       	cpc	r19, r1
    2002:	2c f4       	brge	.+10     	; 0x200e <GPIO_ReadPort+0x3e>
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	61 f0       	breq	.+24     	; 0x2024 <GPIO_ReadPort+0x54>
    200c:	1e c0       	rjmp	.+60     	; 0x204a <GPIO_ReadPort+0x7a>
    200e:	2b 81       	ldd	r18, Y+3	; 0x03
    2010:	3c 81       	ldd	r19, Y+4	; 0x04
    2012:	22 30       	cpi	r18, 0x02	; 2
    2014:	31 05       	cpc	r19, r1
    2016:	81 f0       	breq	.+32     	; 0x2038 <GPIO_ReadPort+0x68>
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	9c 81       	ldd	r25, Y+4	; 0x04
    201c:	83 30       	cpi	r24, 0x03	; 3
    201e:	91 05       	cpc	r25, r1
    2020:	81 f0       	breq	.+32     	; 0x2042 <GPIO_ReadPort+0x72>
    2022:	13 c0       	rjmp	.+38     	; 0x204a <GPIO_ReadPort+0x7a>
		case PORTA_ID:
			value = PINA;
    2024:	e9 e3       	ldi	r30, 0x39	; 57
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	0e c0       	rjmp	.+28     	; 0x204a <GPIO_ReadPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    202e:	e6 e3       	ldi	r30, 0x36	; 54
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	09 c0       	rjmp	.+18     	; 0x204a <GPIO_ReadPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2038:	e3 e3       	ldi	r30, 0x33	; 51
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	04 c0       	rjmp	.+8      	; 0x204a <GPIO_ReadPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2042:	e0 e3       	ldi	r30, 0x30	; 48
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    204a:	89 81       	ldd	r24, Y+1	; 0x01
}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <KEYPAD_GetPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_GetPressedKey(void)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	60 97       	sbiw	r28, 0x10	; 16
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_SetPinDirection(KEYPAD_ROW_PORT_ID , KEYPAD_FIRST_ROW_PIN_ID ,PIN_INPUT);
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	64 e0       	ldi	r22, 0x04	; 4
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KEYPAD_ROW_PORT_ID , KEYPAD_FIRST_ROW_PIN_ID+1 ,PIN_INPUT);
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	65 e0       	ldi	r22, 0x05	; 5
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KEYPAD_ROW_PORT_ID , KEYPAD_FIRST_ROW_PIN_ID+2 ,PIN_INPUT);
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	66 e0       	ldi	r22, 0x06	; 6
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KEYPAD_ROW_PORT_ID , KEYPAD_FIRST_ROW_PIN_ID+3 ,PIN_INPUT);
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	67 e0       	ldi	r22, 0x07	; 7
    2090:	40 e0       	ldi	r20, 0x00	; 0
    2092:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_SetPinDirection>

	GPIO_SetPinDirection(KEYPAD_COLUMN_PORT_ID , KEYPAD_FIRST_COLUMN_PIN_ID ,PIN_INPUT);
    2096:	83 e0       	ldi	r24, 0x03	; 3
    2098:	64 e0       	ldi	r22, 0x04	; 4
    209a:	40 e0       	ldi	r20, 0x00	; 0
    209c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KEYPAD_COLUMN_PORT_ID , KEYPAD_FIRST_COLUMN_PIN_ID+1 ,PIN_INPUT);
    20a0:	83 e0       	ldi	r24, 0x03	; 3
    20a2:	65 e0       	ldi	r22, 0x05	; 5
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KEYPAD_COLUMN_PORT_ID , KEYPAD_FIRST_COLUMN_PIN_ID+2 ,PIN_INPUT);
    20aa:	83 e0       	ldi	r24, 0x03	; 3
    20ac:	66 e0       	ldi	r22, 0x06	; 6
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_SetPinDirection>

#if (KEYPAD_NUM_COLUMNS == 4)
	GPIO_SetPinDirection(KEYPAD_COLUMN_PORT_ID , KEYPAD_FIRST_COLUMN_PIN_ID+3 ,PIN_INPUT);
    20b4:	83 e0       	ldi	r24, 0x03	; 3
    20b6:	67 e0       	ldi	r22, 0x07	; 7
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_SetPinDirection>
#endif

	while(1)
	{
		for (row = 0 ; row < KEYPAD_NUM_ROWS ; row ++)
    20be:	1f 86       	std	Y+15, r1	; 0x0f
    20c0:	b4 c0       	rjmp	.+360    	; 0x222a <KEYPAD_GetPressedKey+0x1d0>
		{
			GPIO_SetPinDirection(KEYPAD_ROW_PORT_ID , KEYPAD_FIRST_ROW_PIN_ID+row ,PIN_OUTPUT);
    20c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c4:	98 2f       	mov	r25, r24
    20c6:	9c 5f       	subi	r25, 0xFC	; 252
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	69 2f       	mov	r22, r25
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_SetPinDirection>
			GPIO_WritePin(KEYPAD_ROW_PORT_ID , KEYPAD_FIRST_ROW_PIN_ID+row , KEYPAD_BUTTON_PRESSED);
    20d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d4:	98 2f       	mov	r25, r24
    20d6:	9c 5f       	subi	r25, 0xFC	; 252
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	69 2f       	mov	r22, r25
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <GPIO_WritePin>

			for (col = 0 ; col < KEYPAD_NUM_COLUMNS ; col++)
    20e2:	18 8a       	std	Y+16, r1	; 0x10
    20e4:	22 c0       	rjmp	.+68     	; 0x212a <KEYPAD_GetPressedKey+0xd0>
			{
				if (GPIO_ReadPin(KEYPAD_COLUMN_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col) == KEYPAD_BUTTON_PRESSED )
    20e6:	88 89       	ldd	r24, Y+16	; 0x10
    20e8:	98 2f       	mov	r25, r24
    20ea:	9c 5f       	subi	r25, 0xFC	; 252
    20ec:	83 e0       	ldi	r24, 0x03	; 3
    20ee:	69 2f       	mov	r22, r25
    20f0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <GPIO_ReadPin>
    20f4:	88 23       	and	r24, r24
    20f6:	b1 f4       	brne	.+44     	; 0x2124 <KEYPAD_GetPressedKey+0xca>
#endif
					#elif (KEYPAD_NUM_COLUMNS == 4)
						#ifdef STANDARD_KEYPAD
					return ((row*KEYPAD_NUM_COLUMNS)+col+1);
						#else
					return KEYPAD_4x4_AdjustKeyNumber((row*KEYPAD_NUM_COLUMNS)+col+1);
    20f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20fa:	88 2f       	mov	r24, r24
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	88 0f       	add	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	98 2f       	mov	r25, r24
    2108:	88 89       	ldd	r24, Y+16	; 0x10
    210a:	89 0f       	add	r24, r25
    210c:	8f 5f       	subi	r24, 0xFF	; 255
    210e:	0e 94 1a 11 	call	0x2234	; 0x2234 <KEYPAD_4x4_AdjustKeyNumber>
			_delay_ms(5);
		}

	}

}
    2112:	60 96       	adiw	r28, 0x10	; 16
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret
		for (row = 0 ; row < KEYPAD_NUM_ROWS ; row ++)
		{
			GPIO_SetPinDirection(KEYPAD_ROW_PORT_ID , KEYPAD_FIRST_ROW_PIN_ID+row ,PIN_OUTPUT);
			GPIO_WritePin(KEYPAD_ROW_PORT_ID , KEYPAD_FIRST_ROW_PIN_ID+row , KEYPAD_BUTTON_PRESSED);

			for (col = 0 ; col < KEYPAD_NUM_COLUMNS ; col++)
    2124:	88 89       	ldd	r24, Y+16	; 0x10
    2126:	8f 5f       	subi	r24, 0xFF	; 255
    2128:	88 8b       	std	Y+16, r24	; 0x10
    212a:	88 89       	ldd	r24, Y+16	; 0x10
    212c:	84 30       	cpi	r24, 0x04	; 4
    212e:	d8 f2       	brcs	.-74     	; 0x20e6 <KEYPAD_GetPressedKey+0x8c>
					#endif
				#endif
				}

			}
			GPIO_SetPinDirection(KEYPAD_ROW_PORT_ID , KEYPAD_FIRST_ROW_PIN_ID+row ,PIN_INPUT);
    2130:	8f 85       	ldd	r24, Y+15	; 0x0f
    2132:	98 2f       	mov	r25, r24
    2134:	9c 5f       	subi	r25, 0xFC	; 252
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	69 2f       	mov	r22, r25
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_SetPinDirection>
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	a0 ea       	ldi	r26, 0xA0	; 160
    2146:	b0 e4       	ldi	r27, 0x40	; 64
    2148:	8b 87       	std	Y+11, r24	; 0x0b
    214a:	9c 87       	std	Y+12, r25	; 0x0c
    214c:	ad 87       	std	Y+13, r26	; 0x0d
    214e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2150:	6b 85       	ldd	r22, Y+11	; 0x0b
    2152:	7c 85       	ldd	r23, Y+12	; 0x0c
    2154:	8d 85       	ldd	r24, Y+13	; 0x0d
    2156:	9e 85       	ldd	r25, Y+14	; 0x0e
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	4a ef       	ldi	r20, 0xFA	; 250
    215e:	54 e4       	ldi	r21, 0x44	; 68
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	8f 83       	std	Y+7, r24	; 0x07
    216a:	98 87       	std	Y+8, r25	; 0x08
    216c:	a9 87       	std	Y+9, r26	; 0x09
    216e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2170:	6f 81       	ldd	r22, Y+7	; 0x07
    2172:	78 85       	ldd	r23, Y+8	; 0x08
    2174:	89 85       	ldd	r24, Y+9	; 0x09
    2176:	9a 85       	ldd	r25, Y+10	; 0x0a
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e8       	ldi	r20, 0x80	; 128
    217e:	5f e3       	ldi	r21, 0x3F	; 63
    2180:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2184:	88 23       	and	r24, r24
    2186:	2c f4       	brge	.+10     	; 0x2192 <KEYPAD_GetPressedKey+0x138>
		__ticks = 1;
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9e 83       	std	Y+6, r25	; 0x06
    218e:	8d 83       	std	Y+5, r24	; 0x05
    2190:	3f c0       	rjmp	.+126    	; 0x2210 <KEYPAD_GetPressedKey+0x1b6>
	else if (__tmp > 65535)
    2192:	6f 81       	ldd	r22, Y+7	; 0x07
    2194:	78 85       	ldd	r23, Y+8	; 0x08
    2196:	89 85       	ldd	r24, Y+9	; 0x09
    2198:	9a 85       	ldd	r25, Y+10	; 0x0a
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	3f ef       	ldi	r19, 0xFF	; 255
    219e:	4f e7       	ldi	r20, 0x7F	; 127
    21a0:	57 e4       	ldi	r21, 0x47	; 71
    21a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a6:	18 16       	cp	r1, r24
    21a8:	4c f5       	brge	.+82     	; 0x21fc <KEYPAD_GetPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e2       	ldi	r20, 0x20	; 32
    21b8:	51 e4       	ldi	r21, 0x41	; 65
    21ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	bc 01       	movw	r22, r24
    21c4:	cd 01       	movw	r24, r26
    21c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	0f c0       	rjmp	.+30     	; 0x21f2 <KEYPAD_GetPressedKey+0x198>
    21d4:	88 ec       	ldi	r24, 0xC8	; 200
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9c 83       	std	Y+4, r25	; 0x04
    21da:	8b 83       	std	Y+3, r24	; 0x03
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	9c 81       	ldd	r25, Y+4	; 0x04
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <KEYPAD_GetPressedKey+0x186>
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ea:	9e 81       	ldd	r25, Y+6	; 0x06
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f2:	8d 81       	ldd	r24, Y+5	; 0x05
    21f4:	9e 81       	ldd	r25, Y+6	; 0x06
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	69 f7       	brne	.-38     	; 0x21d4 <KEYPAD_GetPressedKey+0x17a>
    21fa:	14 c0       	rjmp	.+40     	; 0x2224 <KEYPAD_GetPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fc:	6f 81       	ldd	r22, Y+7	; 0x07
    21fe:	78 85       	ldd	r23, Y+8	; 0x08
    2200:	89 85       	ldd	r24, Y+9	; 0x09
    2202:	9a 85       	ldd	r25, Y+10	; 0x0a
    2204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	9e 83       	std	Y+6, r25	; 0x06
    220e:	8d 83       	std	Y+5, r24	; 0x05
    2210:	8d 81       	ldd	r24, Y+5	; 0x05
    2212:	9e 81       	ldd	r25, Y+6	; 0x06
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <KEYPAD_GetPressedKey+0x1c2>
    2220:	9a 83       	std	Y+2, r25	; 0x02
    2222:	89 83       	std	Y+1, r24	; 0x01
	GPIO_SetPinDirection(KEYPAD_COLUMN_PORT_ID , KEYPAD_FIRST_COLUMN_PIN_ID+3 ,PIN_INPUT);
#endif

	while(1)
	{
		for (row = 0 ; row < KEYPAD_NUM_ROWS ; row ++)
    2224:	8f 85       	ldd	r24, Y+15	; 0x0f
    2226:	8f 5f       	subi	r24, 0xFF	; 255
    2228:	8f 87       	std	Y+15, r24	; 0x0f
    222a:	8f 85       	ldd	r24, Y+15	; 0x0f
    222c:	84 30       	cpi	r24, 0x04	; 4
    222e:	08 f4       	brcc	.+2      	; 0x2232 <KEYPAD_GetPressedKey+0x1d8>
    2230:	48 cf       	rjmp	.-368    	; 0x20c2 <KEYPAD_GetPressedKey+0x68>
    2232:	45 cf       	rjmp	.-374    	; 0x20be <KEYPAD_GetPressedKey+0x64>

00002234 <KEYPAD_4x4_AdjustKeyNumber>:
}

#elif (KEYPAD_NUM_COLUMNS ==4)

static uint8 KEYPAD_4x4_AdjustKeyNumber(uint8 button_number)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	00 d0       	rcall	.+0      	; 0x223a <KEYPAD_4x4_AdjustKeyNumber+0x6>
    223a:	00 d0       	rcall	.+0      	; 0x223c <KEYPAD_4x4_AdjustKeyNumber+0x8>
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	8a 83       	std	Y+2, r24	; 0x02
	uint8 correct_num =0;
    2242:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number){
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	3c 83       	std	Y+4, r19	; 0x04
    224c:	2b 83       	std	Y+3, r18	; 0x03
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	88 30       	cpi	r24, 0x08	; 8
    2254:	91 05       	cpc	r25, r1
    2256:	09 f4       	brne	.+2      	; 0x225a <KEYPAD_4x4_AdjustKeyNumber+0x26>
    2258:	70 c0       	rjmp	.+224    	; 0x233a <KEYPAD_4x4_AdjustKeyNumber+0x106>
    225a:	2b 81       	ldd	r18, Y+3	; 0x03
    225c:	3c 81       	ldd	r19, Y+4	; 0x04
    225e:	29 30       	cpi	r18, 0x09	; 9
    2260:	31 05       	cpc	r19, r1
    2262:	5c f5       	brge	.+86     	; 0x22ba <KEYPAD_4x4_AdjustKeyNumber+0x86>
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	9c 81       	ldd	r25, Y+4	; 0x04
    2268:	84 30       	cpi	r24, 0x04	; 4
    226a:	91 05       	cpc	r25, r1
    226c:	09 f4       	brne	.+2      	; 0x2270 <KEYPAD_4x4_AdjustKeyNumber+0x3c>
    226e:	59 c0       	rjmp	.+178    	; 0x2322 <KEYPAD_4x4_AdjustKeyNumber+0xee>
    2270:	2b 81       	ldd	r18, Y+3	; 0x03
    2272:	3c 81       	ldd	r19, Y+4	; 0x04
    2274:	25 30       	cpi	r18, 0x05	; 5
    2276:	31 05       	cpc	r19, r1
    2278:	9c f4       	brge	.+38     	; 0x22a0 <KEYPAD_4x4_AdjustKeyNumber+0x6c>
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	82 30       	cpi	r24, 0x02	; 2
    2280:	91 05       	cpc	r25, r1
    2282:	09 f4       	brne	.+2      	; 0x2286 <KEYPAD_4x4_AdjustKeyNumber+0x52>
    2284:	48 c0       	rjmp	.+144    	; 0x2316 <KEYPAD_4x4_AdjustKeyNumber+0xe2>
    2286:	2b 81       	ldd	r18, Y+3	; 0x03
    2288:	3c 81       	ldd	r19, Y+4	; 0x04
    228a:	23 30       	cpi	r18, 0x03	; 3
    228c:	31 05       	cpc	r19, r1
    228e:	0c f0       	brlt	.+2      	; 0x2292 <KEYPAD_4x4_AdjustKeyNumber+0x5e>
    2290:	45 c0       	rjmp	.+138    	; 0x231c <KEYPAD_4x4_AdjustKeyNumber+0xe8>
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	9c 81       	ldd	r25, Y+4	; 0x04
    2296:	81 30       	cpi	r24, 0x01	; 1
    2298:	91 05       	cpc	r25, r1
    229a:	09 f4       	brne	.+2      	; 0x229e <KEYPAD_4x4_AdjustKeyNumber+0x6a>
    229c:	39 c0       	rjmp	.+114    	; 0x2310 <KEYPAD_4x4_AdjustKeyNumber+0xdc>
    229e:	67 c0       	rjmp	.+206    	; 0x236e <KEYPAD_4x4_AdjustKeyNumber+0x13a>
    22a0:	2b 81       	ldd	r18, Y+3	; 0x03
    22a2:	3c 81       	ldd	r19, Y+4	; 0x04
    22a4:	26 30       	cpi	r18, 0x06	; 6
    22a6:	31 05       	cpc	r19, r1
    22a8:	09 f4       	brne	.+2      	; 0x22ac <KEYPAD_4x4_AdjustKeyNumber+0x78>
    22aa:	41 c0       	rjmp	.+130    	; 0x232e <KEYPAD_4x4_AdjustKeyNumber+0xfa>
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	87 30       	cpi	r24, 0x07	; 7
    22b2:	91 05       	cpc	r25, r1
    22b4:	0c f0       	brlt	.+2      	; 0x22b8 <KEYPAD_4x4_AdjustKeyNumber+0x84>
    22b6:	3e c0       	rjmp	.+124    	; 0x2334 <KEYPAD_4x4_AdjustKeyNumber+0x100>
    22b8:	37 c0       	rjmp	.+110    	; 0x2328 <KEYPAD_4x4_AdjustKeyNumber+0xf4>
    22ba:	2b 81       	ldd	r18, Y+3	; 0x03
    22bc:	3c 81       	ldd	r19, Y+4	; 0x04
    22be:	2c 30       	cpi	r18, 0x0C	; 12
    22c0:	31 05       	cpc	r19, r1
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <KEYPAD_4x4_AdjustKeyNumber+0x92>
    22c4:	46 c0       	rjmp	.+140    	; 0x2352 <KEYPAD_4x4_AdjustKeyNumber+0x11e>
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	8d 30       	cpi	r24, 0x0D	; 13
    22cc:	91 05       	cpc	r25, r1
    22ce:	5c f4       	brge	.+22     	; 0x22e6 <KEYPAD_4x4_AdjustKeyNumber+0xb2>
    22d0:	2b 81       	ldd	r18, Y+3	; 0x03
    22d2:	3c 81       	ldd	r19, Y+4	; 0x04
    22d4:	2a 30       	cpi	r18, 0x0A	; 10
    22d6:	31 05       	cpc	r19, r1
    22d8:	b1 f1       	breq	.+108    	; 0x2346 <KEYPAD_4x4_AdjustKeyNumber+0x112>
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	9c 81       	ldd	r25, Y+4	; 0x04
    22de:	8b 30       	cpi	r24, 0x0B	; 11
    22e0:	91 05       	cpc	r25, r1
    22e2:	a4 f5       	brge	.+104    	; 0x234c <KEYPAD_4x4_AdjustKeyNumber+0x118>
    22e4:	2d c0       	rjmp	.+90     	; 0x2340 <KEYPAD_4x4_AdjustKeyNumber+0x10c>
    22e6:	2b 81       	ldd	r18, Y+3	; 0x03
    22e8:	3c 81       	ldd	r19, Y+4	; 0x04
    22ea:	2e 30       	cpi	r18, 0x0E	; 14
    22ec:	31 05       	cpc	r19, r1
    22ee:	b9 f1       	breq	.+110    	; 0x235e <KEYPAD_4x4_AdjustKeyNumber+0x12a>
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	9c 81       	ldd	r25, Y+4	; 0x04
    22f4:	8e 30       	cpi	r24, 0x0E	; 14
    22f6:	91 05       	cpc	r25, r1
    22f8:	7c f1       	brlt	.+94     	; 0x2358 <KEYPAD_4x4_AdjustKeyNumber+0x124>
    22fa:	2b 81       	ldd	r18, Y+3	; 0x03
    22fc:	3c 81       	ldd	r19, Y+4	; 0x04
    22fe:	2f 30       	cpi	r18, 0x0F	; 15
    2300:	31 05       	cpc	r19, r1
    2302:	79 f1       	breq	.+94     	; 0x2362 <KEYPAD_4x4_AdjustKeyNumber+0x12e>
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	9c 81       	ldd	r25, Y+4	; 0x04
    2308:	80 31       	cpi	r24, 0x10	; 16
    230a:	91 05       	cpc	r25, r1
    230c:	69 f1       	breq	.+90     	; 0x2368 <KEYPAD_4x4_AdjustKeyNumber+0x134>
    230e:	2f c0       	rjmp	.+94     	; 0x236e <KEYPAD_4x4_AdjustKeyNumber+0x13a>
	case 1 : correct_num = 7;
    2310:	87 e0       	ldi	r24, 0x07	; 7
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	2e c0       	rjmp	.+92     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 2 : correct_num = 8;
    2316:	88 e0       	ldi	r24, 0x08	; 8
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	2b c0       	rjmp	.+86     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 3 : correct_num = 9;
    231c:	89 e0       	ldi	r24, 0x09	; 9
    231e:	89 83       	std	Y+1, r24	; 0x01
    2320:	28 c0       	rjmp	.+80     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 4 : correct_num = '/';
    2322:	8f e2       	ldi	r24, 0x2F	; 47
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	25 c0       	rjmp	.+74     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 5 : correct_num = 4;
    2328:	84 e0       	ldi	r24, 0x04	; 4
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	22 c0       	rjmp	.+68     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 6 : correct_num = 5;
    232e:	85 e0       	ldi	r24, 0x05	; 5
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	1f c0       	rjmp	.+62     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 7 : correct_num = 6;
    2334:	86 e0       	ldi	r24, 0x06	; 6
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	1c c0       	rjmp	.+56     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 8 : correct_num = '*';
    233a:	8a e2       	ldi	r24, 0x2A	; 42
    233c:	89 83       	std	Y+1, r24	; 0x01
    233e:	19 c0       	rjmp	.+50     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 9 : correct_num = 1;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	16 c0       	rjmp	.+44     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 10 : correct_num = 2;
    2346:	82 e0       	ldi	r24, 0x02	; 2
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	13 c0       	rjmp	.+38     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 11 : correct_num = 3;
    234c:	83 e0       	ldi	r24, 0x03	; 3
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	10 c0       	rjmp	.+32     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 12 : correct_num = '-';
    2352:	8d e2       	ldi	r24, 0x2D	; 45
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	0d c0       	rjmp	.+26     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 13 : correct_num = 13;
    2358:	8d e0       	ldi	r24, 0x0D	; 13
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	0a c0       	rjmp	.+20     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 14 : correct_num = 0;
    235e:	19 82       	std	Y+1, r1	; 0x01
    2360:	08 c0       	rjmp	.+16     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 15 : correct_num = '=';
    2362:	8d e3       	ldi	r24, 0x3D	; 61
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	case 16 : correct_num = '+';
    2368:	8b e2       	ldi	r24, 0x2B	; 43
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <KEYPAD_4x4_AdjustKeyNumber+0x13e>
	break;
	default : correct_num = button_number;
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return correct_num;
    2372:	89 81       	ldd	r24, Y+1	; 0x01
}
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <LCD_SendCommand>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void LCD_SendCommand(uint8 command)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    238a:	e9 97       	sbiw	r28, 0x39	; 57
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	cd bf       	out	0x3d, r28	; 61
    2396:	89 af       	std	Y+57, r24	; 0x39
	GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2398:	82 e0       	ldi	r24, 0x02	; 2
    239a:	60 e0       	ldi	r22, 0x00	; 0
    239c:	40 e0       	ldi	r20, 0x00	; 0
    239e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <GPIO_WritePin>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	a0 e8       	ldi	r26, 0x80	; 128
    23a8:	bf e3       	ldi	r27, 0x3F	; 63
    23aa:	8d ab       	std	Y+53, r24	; 0x35
    23ac:	9e ab       	std	Y+54, r25	; 0x36
    23ae:	af ab       	std	Y+55, r26	; 0x37
    23b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b2:	6d a9       	ldd	r22, Y+53	; 0x35
    23b4:	7e a9       	ldd	r23, Y+54	; 0x36
    23b6:	8f a9       	ldd	r24, Y+55	; 0x37
    23b8:	98 ad       	ldd	r25, Y+56	; 0x38
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	4a ef       	ldi	r20, 0xFA	; 250
    23c0:	54 e4       	ldi	r21, 0x44	; 68
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	89 ab       	std	Y+49, r24	; 0x31
    23cc:	9a ab       	std	Y+50, r25	; 0x32
    23ce:	ab ab       	std	Y+51, r26	; 0x33
    23d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23d2:	69 a9       	ldd	r22, Y+49	; 0x31
    23d4:	7a a9       	ldd	r23, Y+50	; 0x32
    23d6:	8b a9       	ldd	r24, Y+51	; 0x33
    23d8:	9c a9       	ldd	r25, Y+52	; 0x34
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e8       	ldi	r20, 0x80	; 128
    23e0:	5f e3       	ldi	r21, 0x3F	; 63
    23e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e6:	88 23       	and	r24, r24
    23e8:	2c f4       	brge	.+10     	; 0x23f4 <LCD_SendCommand+0x72>
		__ticks = 1;
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	98 ab       	std	Y+48, r25	; 0x30
    23f0:	8f a7       	std	Y+47, r24	; 0x2f
    23f2:	3f c0       	rjmp	.+126    	; 0x2472 <LCD_SendCommand+0xf0>
	else if (__tmp > 65535)
    23f4:	69 a9       	ldd	r22, Y+49	; 0x31
    23f6:	7a a9       	ldd	r23, Y+50	; 0x32
    23f8:	8b a9       	ldd	r24, Y+51	; 0x33
    23fa:	9c a9       	ldd	r25, Y+52	; 0x34
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	3f ef       	ldi	r19, 0xFF	; 255
    2400:	4f e7       	ldi	r20, 0x7F	; 127
    2402:	57 e4       	ldi	r21, 0x47	; 71
    2404:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2408:	18 16       	cp	r1, r24
    240a:	4c f5       	brge	.+82     	; 0x245e <LCD_SendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240c:	6d a9       	ldd	r22, Y+53	; 0x35
    240e:	7e a9       	ldd	r23, Y+54	; 0x36
    2410:	8f a9       	ldd	r24, Y+55	; 0x37
    2412:	98 ad       	ldd	r25, Y+56	; 0x38
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e2       	ldi	r20, 0x20	; 32
    241a:	51 e4       	ldi	r21, 0x41	; 65
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	bc 01       	movw	r22, r24
    2426:	cd 01       	movw	r24, r26
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	98 ab       	std	Y+48, r25	; 0x30
    2432:	8f a7       	std	Y+47, r24	; 0x2f
    2434:	0f c0       	rjmp	.+30     	; 0x2454 <LCD_SendCommand+0xd2>
    2436:	88 ec       	ldi	r24, 0xC8	; 200
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	9e a7       	std	Y+46, r25	; 0x2e
    243c:	8d a7       	std	Y+45, r24	; 0x2d
    243e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2440:	9e a5       	ldd	r25, Y+46	; 0x2e
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <LCD_SendCommand+0xc0>
    2446:	9e a7       	std	Y+46, r25	; 0x2e
    2448:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244a:	8f a5       	ldd	r24, Y+47	; 0x2f
    244c:	98 a9       	ldd	r25, Y+48	; 0x30
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	98 ab       	std	Y+48, r25	; 0x30
    2452:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2454:	8f a5       	ldd	r24, Y+47	; 0x2f
    2456:	98 a9       	ldd	r25, Y+48	; 0x30
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	69 f7       	brne	.-38     	; 0x2436 <LCD_SendCommand+0xb4>
    245c:	14 c0       	rjmp	.+40     	; 0x2486 <LCD_SendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245e:	69 a9       	ldd	r22, Y+49	; 0x31
    2460:	7a a9       	ldd	r23, Y+50	; 0x32
    2462:	8b a9       	ldd	r24, Y+51	; 0x33
    2464:	9c a9       	ldd	r25, Y+52	; 0x34
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	98 ab       	std	Y+48, r25	; 0x30
    2470:	8f a7       	std	Y+47, r24	; 0x2f
    2472:	8f a5       	ldd	r24, Y+47	; 0x2f
    2474:	98 a9       	ldd	r25, Y+48	; 0x30
    2476:	9c a7       	std	Y+44, r25	; 0x2c
    2478:	8b a7       	std	Y+43, r24	; 0x2b
    247a:	8b a5       	ldd	r24, Y+43	; 0x2b
    247c:	9c a5       	ldd	r25, Y+44	; 0x2c
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <LCD_SendCommand+0xfc>
    2482:	9c a7       	std	Y+44, r25	; 0x2c
    2484:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_WritePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2486:	82 e0       	ldi	r24, 0x02	; 2
    2488:	63 e0       	ldi	r22, 0x03	; 3
    248a:	41 e0       	ldi	r20, 0x01	; 1
    248c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <GPIO_WritePin>
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a0 e8       	ldi	r26, 0x80	; 128
    2496:	bf e3       	ldi	r27, 0x3F	; 63
    2498:	8f a3       	std	Y+39, r24	; 0x27
    249a:	98 a7       	std	Y+40, r25	; 0x28
    249c:	a9 a7       	std	Y+41, r26	; 0x29
    249e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	6f a1       	ldd	r22, Y+39	; 0x27
    24a2:	78 a5       	ldd	r23, Y+40	; 0x28
    24a4:	89 a5       	ldd	r24, Y+41	; 0x29
    24a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	4a ef       	ldi	r20, 0xFA	; 250
    24ae:	54 e4       	ldi	r21, 0x44	; 68
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	8b a3       	std	Y+35, r24	; 0x23
    24ba:	9c a3       	std	Y+36, r25	; 0x24
    24bc:	ad a3       	std	Y+37, r26	; 0x25
    24be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24c0:	6b a1       	ldd	r22, Y+35	; 0x23
    24c2:	7c a1       	ldd	r23, Y+36	; 0x24
    24c4:	8d a1       	ldd	r24, Y+37	; 0x25
    24c6:	9e a1       	ldd	r25, Y+38	; 0x26
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <LCD_SendCommand+0x160>
		__ticks = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9a a3       	std	Y+34, r25	; 0x22
    24de:	89 a3       	std	Y+33, r24	; 0x21
    24e0:	3f c0       	rjmp	.+126    	; 0x2560 <LCD_SendCommand+0x1de>
	else if (__tmp > 65535)
    24e2:	6b a1       	ldd	r22, Y+35	; 0x23
    24e4:	7c a1       	ldd	r23, Y+36	; 0x24
    24e6:	8d a1       	ldd	r24, Y+37	; 0x25
    24e8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	4c f5       	brge	.+82     	; 0x254c <LCD_SendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	6f a1       	ldd	r22, Y+39	; 0x27
    24fc:	78 a5       	ldd	r23, Y+40	; 0x28
    24fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2500:	9a a5       	ldd	r25, Y+42	; 0x2a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e2       	ldi	r20, 0x20	; 32
    2508:	51 e4       	ldi	r21, 0x41	; 65
    250a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9a a3       	std	Y+34, r25	; 0x22
    2520:	89 a3       	std	Y+33, r24	; 0x21
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <LCD_SendCommand+0x1c0>
    2524:	88 ec       	ldi	r24, 0xC8	; 200
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	98 a3       	std	Y+32, r25	; 0x20
    252a:	8f 8f       	std	Y+31, r24	; 0x1f
    252c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    252e:	98 a1       	ldd	r25, Y+32	; 0x20
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <LCD_SendCommand+0x1ae>
    2534:	98 a3       	std	Y+32, r25	; 0x20
    2536:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2538:	89 a1       	ldd	r24, Y+33	; 0x21
    253a:	9a a1       	ldd	r25, Y+34	; 0x22
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	9a a3       	std	Y+34, r25	; 0x22
    2540:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	89 a1       	ldd	r24, Y+33	; 0x21
    2544:	9a a1       	ldd	r25, Y+34	; 0x22
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	69 f7       	brne	.-38     	; 0x2524 <LCD_SendCommand+0x1a2>
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <LCD_SendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254c:	6b a1       	ldd	r22, Y+35	; 0x23
    254e:	7c a1       	ldd	r23, Y+36	; 0x24
    2550:	8d a1       	ldd	r24, Y+37	; 0x25
    2552:	9e a1       	ldd	r25, Y+38	; 0x26
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9a a3       	std	Y+34, r25	; 0x22
    255e:	89 a3       	std	Y+33, r24	; 0x21
    2560:	89 a1       	ldd	r24, Y+33	; 0x21
    2562:	9a a1       	ldd	r25, Y+34	; 0x22
    2564:	9e 8f       	std	Y+30, r25	; 0x1e
    2566:	8d 8f       	std	Y+29, r24	; 0x1d
    2568:	8d 8d       	ldd	r24, Y+29	; 0x1d
    256a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <LCD_SendCommand+0x1ea>
    2570:	9e 8f       	std	Y+30, r25	; 0x1e
    2572:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_WritePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */


#elif (LCD_DATA_BITS_MODE ==8)
	GPIO_WritePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	69 ad       	ldd	r22, Y+57	; 0x39
    2578:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_WritePort>
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	a0 e8       	ldi	r26, 0x80	; 128
    2582:	bf e3       	ldi	r27, 0x3F	; 63
    2584:	89 8f       	std	Y+25, r24	; 0x19
    2586:	9a 8f       	std	Y+26, r25	; 0x1a
    2588:	ab 8f       	std	Y+27, r26	; 0x1b
    258a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258c:	69 8d       	ldd	r22, Y+25	; 0x19
    258e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2590:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2592:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	4a ef       	ldi	r20, 0xFA	; 250
    259a:	54 e4       	ldi	r21, 0x44	; 68
    259c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	8d 8b       	std	Y+21, r24	; 0x15
    25a6:	9e 8b       	std	Y+22, r25	; 0x16
    25a8:	af 8b       	std	Y+23, r26	; 0x17
    25aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25ac:	6d 89       	ldd	r22, Y+21	; 0x15
    25ae:	7e 89       	ldd	r23, Y+22	; 0x16
    25b0:	8f 89       	ldd	r24, Y+23	; 0x17
    25b2:	98 8d       	ldd	r25, Y+24	; 0x18
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e8       	ldi	r20, 0x80	; 128
    25ba:	5f e3       	ldi	r21, 0x3F	; 63
    25bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c0:	88 23       	and	r24, r24
    25c2:	2c f4       	brge	.+10     	; 0x25ce <LCD_SendCommand+0x24c>
		__ticks = 1;
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	9c 8b       	std	Y+20, r25	; 0x14
    25ca:	8b 8b       	std	Y+19, r24	; 0x13
    25cc:	3f c0       	rjmp	.+126    	; 0x264c <LCD_SendCommand+0x2ca>
	else if (__tmp > 65535)
    25ce:	6d 89       	ldd	r22, Y+21	; 0x15
    25d0:	7e 89       	ldd	r23, Y+22	; 0x16
    25d2:	8f 89       	ldd	r24, Y+23	; 0x17
    25d4:	98 8d       	ldd	r25, Y+24	; 0x18
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	3f ef       	ldi	r19, 0xFF	; 255
    25da:	4f e7       	ldi	r20, 0x7F	; 127
    25dc:	57 e4       	ldi	r21, 0x47	; 71
    25de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e2:	18 16       	cp	r1, r24
    25e4:	4c f5       	brge	.+82     	; 0x2638 <LCD_SendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e6:	69 8d       	ldd	r22, Y+25	; 0x19
    25e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e2       	ldi	r20, 0x20	; 32
    25f4:	51 e4       	ldi	r21, 0x41	; 65
    25f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	bc 01       	movw	r22, r24
    2600:	cd 01       	movw	r24, r26
    2602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	9c 8b       	std	Y+20, r25	; 0x14
    260c:	8b 8b       	std	Y+19, r24	; 0x13
    260e:	0f c0       	rjmp	.+30     	; 0x262e <LCD_SendCommand+0x2ac>
    2610:	88 ec       	ldi	r24, 0xC8	; 200
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9a 8b       	std	Y+18, r25	; 0x12
    2616:	89 8b       	std	Y+17, r24	; 0x11
    2618:	89 89       	ldd	r24, Y+17	; 0x11
    261a:	9a 89       	ldd	r25, Y+18	; 0x12
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	f1 f7       	brne	.-4      	; 0x261c <LCD_SendCommand+0x29a>
    2620:	9a 8b       	std	Y+18, r25	; 0x12
    2622:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2624:	8b 89       	ldd	r24, Y+19	; 0x13
    2626:	9c 89       	ldd	r25, Y+20	; 0x14
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	9c 8b       	std	Y+20, r25	; 0x14
    262c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262e:	8b 89       	ldd	r24, Y+19	; 0x13
    2630:	9c 89       	ldd	r25, Y+20	; 0x14
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	69 f7       	brne	.-38     	; 0x2610 <LCD_SendCommand+0x28e>
    2636:	14 c0       	rjmp	.+40     	; 0x2660 <LCD_SendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2638:	6d 89       	ldd	r22, Y+21	; 0x15
    263a:	7e 89       	ldd	r23, Y+22	; 0x16
    263c:	8f 89       	ldd	r24, Y+23	; 0x17
    263e:	98 8d       	ldd	r25, Y+24	; 0x18
    2640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	9c 8b       	std	Y+20, r25	; 0x14
    264a:	8b 8b       	std	Y+19, r24	; 0x13
    264c:	8b 89       	ldd	r24, Y+19	; 0x13
    264e:	9c 89       	ldd	r25, Y+20	; 0x14
    2650:	98 8b       	std	Y+16, r25	; 0x10
    2652:	8f 87       	std	Y+15, r24	; 0x0f
    2654:	8f 85       	ldd	r24, Y+15	; 0x0f
    2656:	98 89       	ldd	r25, Y+16	; 0x10
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	f1 f7       	brne	.-4      	; 0x2658 <LCD_SendCommand+0x2d6>
    265c:	98 8b       	std	Y+16, r25	; 0x10
    265e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_WritePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	63 e0       	ldi	r22, 0x03	; 3
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <GPIO_WritePin>
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a0 e8       	ldi	r26, 0x80	; 128
    2670:	bf e3       	ldi	r27, 0x3F	; 63
    2672:	8b 87       	std	Y+11, r24	; 0x0b
    2674:	9c 87       	std	Y+12, r25	; 0x0c
    2676:	ad 87       	std	Y+13, r26	; 0x0d
    2678:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	6b 85       	ldd	r22, Y+11	; 0x0b
    267c:	7c 85       	ldd	r23, Y+12	; 0x0c
    267e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2680:	9e 85       	ldd	r25, Y+14	; 0x0e
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	4a ef       	ldi	r20, 0xFA	; 250
    2688:	54 e4       	ldi	r21, 0x44	; 68
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	8f 83       	std	Y+7, r24	; 0x07
    2694:	98 87       	std	Y+8, r25	; 0x08
    2696:	a9 87       	std	Y+9, r26	; 0x09
    2698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269a:	6f 81       	ldd	r22, Y+7	; 0x07
    269c:	78 85       	ldd	r23, Y+8	; 0x08
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	2c f4       	brge	.+10     	; 0x26bc <LCD_SendCommand+0x33a>
		__ticks = 1;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
    26ba:	3f c0       	rjmp	.+126    	; 0x273a <LCD_SendCommand+0x3b8>
	else if (__tmp > 65535)
    26bc:	6f 81       	ldd	r22, Y+7	; 0x07
    26be:	78 85       	ldd	r23, Y+8	; 0x08
    26c0:	89 85       	ldd	r24, Y+9	; 0x09
    26c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	4f e7       	ldi	r20, 0x7F	; 127
    26ca:	57 e4       	ldi	r21, 0x47	; 71
    26cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d0:	18 16       	cp	r1, r24
    26d2:	4c f5       	brge	.+82     	; 0x2726 <LCD_SendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26da:	9e 85       	ldd	r25, Y+14	; 0x0e
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e2       	ldi	r20, 0x20	; 32
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9e 83       	std	Y+6, r25	; 0x06
    26fa:	8d 83       	std	Y+5, r24	; 0x05
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <LCD_SendCommand+0x39a>
    26fe:	88 ec       	ldi	r24, 0xC8	; 200
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9c 83       	std	Y+4, r25	; 0x04
    2704:	8b 83       	std	Y+3, r24	; 0x03
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	9c 81       	ldd	r25, Y+4	; 0x04
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <LCD_SendCommand+0x388>
    270e:	9c 83       	std	Y+4, r25	; 0x04
    2710:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271c:	8d 81       	ldd	r24, Y+5	; 0x05
    271e:	9e 81       	ldd	r25, Y+6	; 0x06
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	69 f7       	brne	.-38     	; 0x26fe <LCD_SendCommand+0x37c>
    2724:	14 c0       	rjmp	.+40     	; 0x274e <LCD_SendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2726:	6f 81       	ldd	r22, Y+7	; 0x07
    2728:	78 85       	ldd	r23, Y+8	; 0x08
    272a:	89 85       	ldd	r24, Y+9	; 0x09
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9e 83       	std	Y+6, r25	; 0x06
    2738:	8d 83       	std	Y+5, r24	; 0x05
    273a:	8d 81       	ldd	r24, Y+5	; 0x05
    273c:	9e 81       	ldd	r25, Y+6	; 0x06
    273e:	9a 83       	std	Y+2, r25	; 0x02
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	9a 81       	ldd	r25, Y+2	; 0x02
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <LCD_SendCommand+0x3c4>
    274a:	9a 83       	std	Y+2, r25	; 0x02
    274c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    274e:	e9 96       	adiw	r28, 0x39	; 57
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	08 95       	ret

00002760 <LCD_DisplayCharacter>:

void LCD_DisplayCharacter(uint8 character)
{
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
    2768:	e9 97       	sbiw	r28, 0x39	; 57
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	89 af       	std	Y+57, r24	; 0x39
	GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Instruction Mode RS=1 */
    2776:	82 e0       	ldi	r24, 0x02	; 2
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	41 e0       	ldi	r20, 0x01	; 1
    277c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <GPIO_WritePin>
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	a0 e8       	ldi	r26, 0x80	; 128
    2786:	bf e3       	ldi	r27, 0x3F	; 63
    2788:	8d ab       	std	Y+53, r24	; 0x35
    278a:	9e ab       	std	Y+54, r25	; 0x36
    278c:	af ab       	std	Y+55, r26	; 0x37
    278e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2790:	6d a9       	ldd	r22, Y+53	; 0x35
    2792:	7e a9       	ldd	r23, Y+54	; 0x36
    2794:	8f a9       	ldd	r24, Y+55	; 0x37
    2796:	98 ad       	ldd	r25, Y+56	; 0x38
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	4a ef       	ldi	r20, 0xFA	; 250
    279e:	54 e4       	ldi	r21, 0x44	; 68
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	89 ab       	std	Y+49, r24	; 0x31
    27aa:	9a ab       	std	Y+50, r25	; 0x32
    27ac:	ab ab       	std	Y+51, r26	; 0x33
    27ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27b0:	69 a9       	ldd	r22, Y+49	; 0x31
    27b2:	7a a9       	ldd	r23, Y+50	; 0x32
    27b4:	8b a9       	ldd	r24, Y+51	; 0x33
    27b6:	9c a9       	ldd	r25, Y+52	; 0x34
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e8       	ldi	r20, 0x80	; 128
    27be:	5f e3       	ldi	r21, 0x3F	; 63
    27c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c4:	88 23       	and	r24, r24
    27c6:	2c f4       	brge	.+10     	; 0x27d2 <LCD_DisplayCharacter+0x72>
		__ticks = 1;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	98 ab       	std	Y+48, r25	; 0x30
    27ce:	8f a7       	std	Y+47, r24	; 0x2f
    27d0:	3f c0       	rjmp	.+126    	; 0x2850 <LCD_DisplayCharacter+0xf0>
	else if (__tmp > 65535)
    27d2:	69 a9       	ldd	r22, Y+49	; 0x31
    27d4:	7a a9       	ldd	r23, Y+50	; 0x32
    27d6:	8b a9       	ldd	r24, Y+51	; 0x33
    27d8:	9c a9       	ldd	r25, Y+52	; 0x34
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	3f ef       	ldi	r19, 0xFF	; 255
    27de:	4f e7       	ldi	r20, 0x7F	; 127
    27e0:	57 e4       	ldi	r21, 0x47	; 71
    27e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e6:	18 16       	cp	r1, r24
    27e8:	4c f5       	brge	.+82     	; 0x283c <LCD_DisplayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ea:	6d a9       	ldd	r22, Y+53	; 0x35
    27ec:	7e a9       	ldd	r23, Y+54	; 0x36
    27ee:	8f a9       	ldd	r24, Y+55	; 0x37
    27f0:	98 ad       	ldd	r25, Y+56	; 0x38
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	40 e2       	ldi	r20, 0x20	; 32
    27f8:	51 e4       	ldi	r21, 0x41	; 65
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	98 ab       	std	Y+48, r25	; 0x30
    2810:	8f a7       	std	Y+47, r24	; 0x2f
    2812:	0f c0       	rjmp	.+30     	; 0x2832 <LCD_DisplayCharacter+0xd2>
    2814:	88 ec       	ldi	r24, 0xC8	; 200
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	9e a7       	std	Y+46, r25	; 0x2e
    281a:	8d a7       	std	Y+45, r24	; 0x2d
    281c:	8d a5       	ldd	r24, Y+45	; 0x2d
    281e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <LCD_DisplayCharacter+0xc0>
    2824:	9e a7       	std	Y+46, r25	; 0x2e
    2826:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2828:	8f a5       	ldd	r24, Y+47	; 0x2f
    282a:	98 a9       	ldd	r25, Y+48	; 0x30
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	98 ab       	std	Y+48, r25	; 0x30
    2830:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2832:	8f a5       	ldd	r24, Y+47	; 0x2f
    2834:	98 a9       	ldd	r25, Y+48	; 0x30
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	69 f7       	brne	.-38     	; 0x2814 <LCD_DisplayCharacter+0xb4>
    283a:	14 c0       	rjmp	.+40     	; 0x2864 <LCD_DisplayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283c:	69 a9       	ldd	r22, Y+49	; 0x31
    283e:	7a a9       	ldd	r23, Y+50	; 0x32
    2840:	8b a9       	ldd	r24, Y+51	; 0x33
    2842:	9c a9       	ldd	r25, Y+52	; 0x34
    2844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	98 ab       	std	Y+48, r25	; 0x30
    284e:	8f a7       	std	Y+47, r24	; 0x2f
    2850:	8f a5       	ldd	r24, Y+47	; 0x2f
    2852:	98 a9       	ldd	r25, Y+48	; 0x30
    2854:	9c a7       	std	Y+44, r25	; 0x2c
    2856:	8b a7       	std	Y+43, r24	; 0x2b
    2858:	8b a5       	ldd	r24, Y+43	; 0x2b
    285a:	9c a5       	ldd	r25, Y+44	; 0x2c
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <LCD_DisplayCharacter+0xfc>
    2860:	9c a7       	std	Y+44, r25	; 0x2c
    2862:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_WritePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2864:	82 e0       	ldi	r24, 0x02	; 2
    2866:	63 e0       	ldi	r22, 0x03	; 3
    2868:	41 e0       	ldi	r20, 0x01	; 1
    286a:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <GPIO_WritePin>
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	a0 e8       	ldi	r26, 0x80	; 128
    2874:	bf e3       	ldi	r27, 0x3F	; 63
    2876:	8f a3       	std	Y+39, r24	; 0x27
    2878:	98 a7       	std	Y+40, r25	; 0x28
    287a:	a9 a7       	std	Y+41, r26	; 0x29
    287c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287e:	6f a1       	ldd	r22, Y+39	; 0x27
    2880:	78 a5       	ldd	r23, Y+40	; 0x28
    2882:	89 a5       	ldd	r24, Y+41	; 0x29
    2884:	9a a5       	ldd	r25, Y+42	; 0x2a
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	4a ef       	ldi	r20, 0xFA	; 250
    288c:	54 e4       	ldi	r21, 0x44	; 68
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	8b a3       	std	Y+35, r24	; 0x23
    2898:	9c a3       	std	Y+36, r25	; 0x24
    289a:	ad a3       	std	Y+37, r26	; 0x25
    289c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    289e:	6b a1       	ldd	r22, Y+35	; 0x23
    28a0:	7c a1       	ldd	r23, Y+36	; 0x24
    28a2:	8d a1       	ldd	r24, Y+37	; 0x25
    28a4:	9e a1       	ldd	r25, Y+38	; 0x26
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e8       	ldi	r20, 0x80	; 128
    28ac:	5f e3       	ldi	r21, 0x3F	; 63
    28ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b2:	88 23       	and	r24, r24
    28b4:	2c f4       	brge	.+10     	; 0x28c0 <LCD_DisplayCharacter+0x160>
		__ticks = 1;
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	9a a3       	std	Y+34, r25	; 0x22
    28bc:	89 a3       	std	Y+33, r24	; 0x21
    28be:	3f c0       	rjmp	.+126    	; 0x293e <LCD_DisplayCharacter+0x1de>
	else if (__tmp > 65535)
    28c0:	6b a1       	ldd	r22, Y+35	; 0x23
    28c2:	7c a1       	ldd	r23, Y+36	; 0x24
    28c4:	8d a1       	ldd	r24, Y+37	; 0x25
    28c6:	9e a1       	ldd	r25, Y+38	; 0x26
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	3f ef       	ldi	r19, 0xFF	; 255
    28cc:	4f e7       	ldi	r20, 0x7F	; 127
    28ce:	57 e4       	ldi	r21, 0x47	; 71
    28d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d4:	18 16       	cp	r1, r24
    28d6:	4c f5       	brge	.+82     	; 0x292a <LCD_DisplayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d8:	6f a1       	ldd	r22, Y+39	; 0x27
    28da:	78 a5       	ldd	r23, Y+40	; 0x28
    28dc:	89 a5       	ldd	r24, Y+41	; 0x29
    28de:	9a a5       	ldd	r25, Y+42	; 0x2a
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e2       	ldi	r20, 0x20	; 32
    28e6:	51 e4       	ldi	r21, 0x41	; 65
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	9a a3       	std	Y+34, r25	; 0x22
    28fe:	89 a3       	std	Y+33, r24	; 0x21
    2900:	0f c0       	rjmp	.+30     	; 0x2920 <LCD_DisplayCharacter+0x1c0>
    2902:	88 ec       	ldi	r24, 0xC8	; 200
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	98 a3       	std	Y+32, r25	; 0x20
    2908:	8f 8f       	std	Y+31, r24	; 0x1f
    290a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    290c:	98 a1       	ldd	r25, Y+32	; 0x20
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	f1 f7       	brne	.-4      	; 0x290e <LCD_DisplayCharacter+0x1ae>
    2912:	98 a3       	std	Y+32, r25	; 0x20
    2914:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2916:	89 a1       	ldd	r24, Y+33	; 0x21
    2918:	9a a1       	ldd	r25, Y+34	; 0x22
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	9a a3       	std	Y+34, r25	; 0x22
    291e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2920:	89 a1       	ldd	r24, Y+33	; 0x21
    2922:	9a a1       	ldd	r25, Y+34	; 0x22
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	69 f7       	brne	.-38     	; 0x2902 <LCD_DisplayCharacter+0x1a2>
    2928:	14 c0       	rjmp	.+40     	; 0x2952 <LCD_DisplayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292a:	6b a1       	ldd	r22, Y+35	; 0x23
    292c:	7c a1       	ldd	r23, Y+36	; 0x24
    292e:	8d a1       	ldd	r24, Y+37	; 0x25
    2930:	9e a1       	ldd	r25, Y+38	; 0x26
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	9a a3       	std	Y+34, r25	; 0x22
    293c:	89 a3       	std	Y+33, r24	; 0x21
    293e:	89 a1       	ldd	r24, Y+33	; 0x21
    2940:	9a a1       	ldd	r25, Y+34	; 0x22
    2942:	9e 8f       	std	Y+30, r25	; 0x1e
    2944:	8d 8f       	std	Y+29, r24	; 0x1d
    2946:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2948:	9e 8d       	ldd	r25, Y+30	; 0x1e
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <LCD_DisplayCharacter+0x1ea>
    294e:	9e 8f       	std	Y+30, r25	; 0x1e
    2950:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_WritePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */


#elif (LCD_DATA_BITS_MODE ==8)
	GPIO_WritePort(LCD_DATA_PORT_ID,character); /* out the required command to the data bus D0 --> D7 */
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	69 ad       	ldd	r22, Y+57	; 0x39
    2956:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_WritePort>
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	a0 e8       	ldi	r26, 0x80	; 128
    2960:	bf e3       	ldi	r27, 0x3F	; 63
    2962:	89 8f       	std	Y+25, r24	; 0x19
    2964:	9a 8f       	std	Y+26, r25	; 0x1a
    2966:	ab 8f       	std	Y+27, r26	; 0x1b
    2968:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296a:	69 8d       	ldd	r22, Y+25	; 0x19
    296c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    296e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2970:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	4a ef       	ldi	r20, 0xFA	; 250
    2978:	54 e4       	ldi	r21, 0x44	; 68
    297a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	8d 8b       	std	Y+21, r24	; 0x15
    2984:	9e 8b       	std	Y+22, r25	; 0x16
    2986:	af 8b       	std	Y+23, r26	; 0x17
    2988:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    298a:	6d 89       	ldd	r22, Y+21	; 0x15
    298c:	7e 89       	ldd	r23, Y+22	; 0x16
    298e:	8f 89       	ldd	r24, Y+23	; 0x17
    2990:	98 8d       	ldd	r25, Y+24	; 0x18
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e8       	ldi	r20, 0x80	; 128
    2998:	5f e3       	ldi	r21, 0x3F	; 63
    299a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    299e:	88 23       	and	r24, r24
    29a0:	2c f4       	brge	.+10     	; 0x29ac <LCD_DisplayCharacter+0x24c>
		__ticks = 1;
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	9c 8b       	std	Y+20, r25	; 0x14
    29a8:	8b 8b       	std	Y+19, r24	; 0x13
    29aa:	3f c0       	rjmp	.+126    	; 0x2a2a <LCD_DisplayCharacter+0x2ca>
	else if (__tmp > 65535)
    29ac:	6d 89       	ldd	r22, Y+21	; 0x15
    29ae:	7e 89       	ldd	r23, Y+22	; 0x16
    29b0:	8f 89       	ldd	r24, Y+23	; 0x17
    29b2:	98 8d       	ldd	r25, Y+24	; 0x18
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	3f ef       	ldi	r19, 0xFF	; 255
    29b8:	4f e7       	ldi	r20, 0x7F	; 127
    29ba:	57 e4       	ldi	r21, 0x47	; 71
    29bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29c0:	18 16       	cp	r1, r24
    29c2:	4c f5       	brge	.+82     	; 0x2a16 <LCD_DisplayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c4:	69 8d       	ldd	r22, Y+25	; 0x19
    29c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e2       	ldi	r20, 0x20	; 32
    29d2:	51 e4       	ldi	r21, 0x41	; 65
    29d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	bc 01       	movw	r22, r24
    29de:	cd 01       	movw	r24, r26
    29e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	9c 8b       	std	Y+20, r25	; 0x14
    29ea:	8b 8b       	std	Y+19, r24	; 0x13
    29ec:	0f c0       	rjmp	.+30     	; 0x2a0c <LCD_DisplayCharacter+0x2ac>
    29ee:	88 ec       	ldi	r24, 0xC8	; 200
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9a 8b       	std	Y+18, r25	; 0x12
    29f4:	89 8b       	std	Y+17, r24	; 0x11
    29f6:	89 89       	ldd	r24, Y+17	; 0x11
    29f8:	9a 89       	ldd	r25, Y+18	; 0x12
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	f1 f7       	brne	.-4      	; 0x29fa <LCD_DisplayCharacter+0x29a>
    29fe:	9a 8b       	std	Y+18, r25	; 0x12
    2a00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a02:	8b 89       	ldd	r24, Y+19	; 0x13
    2a04:	9c 89       	ldd	r25, Y+20	; 0x14
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	9c 8b       	std	Y+20, r25	; 0x14
    2a0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	69 f7       	brne	.-38     	; 0x29ee <LCD_DisplayCharacter+0x28e>
    2a14:	14 c0       	rjmp	.+40     	; 0x2a3e <LCD_DisplayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a16:	6d 89       	ldd	r22, Y+21	; 0x15
    2a18:	7e 89       	ldd	r23, Y+22	; 0x16
    2a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	9c 8b       	std	Y+20, r25	; 0x14
    2a28:	8b 8b       	std	Y+19, r24	; 0x13
    2a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a2e:	98 8b       	std	Y+16, r25	; 0x10
    2a30:	8f 87       	std	Y+15, r24	; 0x0f
    2a32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a34:	98 89       	ldd	r25, Y+16	; 0x10
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <LCD_DisplayCharacter+0x2d6>
    2a3a:	98 8b       	std	Y+16, r25	; 0x10
    2a3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_WritePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a3e:	82 e0       	ldi	r24, 0x02	; 2
    2a40:	63 e0       	ldi	r22, 0x03	; 3
    2a42:	40 e0       	ldi	r20, 0x00	; 0
    2a44:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <GPIO_WritePin>
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	a0 e8       	ldi	r26, 0x80	; 128
    2a4e:	bf e3       	ldi	r27, 0x3F	; 63
    2a50:	8b 87       	std	Y+11, r24	; 0x0b
    2a52:	9c 87       	std	Y+12, r25	; 0x0c
    2a54:	ad 87       	std	Y+13, r26	; 0x0d
    2a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	4a ef       	ldi	r20, 0xFA	; 250
    2a66:	54 e4       	ldi	r21, 0x44	; 68
    2a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	8f 83       	std	Y+7, r24	; 0x07
    2a72:	98 87       	std	Y+8, r25	; 0x08
    2a74:	a9 87       	std	Y+9, r26	; 0x09
    2a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a78:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7a:	78 85       	ldd	r23, Y+8	; 0x08
    2a7c:	89 85       	ldd	r24, Y+9	; 0x09
    2a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e8       	ldi	r20, 0x80	; 128
    2a86:	5f e3       	ldi	r21, 0x3F	; 63
    2a88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a8c:	88 23       	and	r24, r24
    2a8e:	2c f4       	brge	.+10     	; 0x2a9a <LCD_DisplayCharacter+0x33a>
		__ticks = 1;
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	9e 83       	std	Y+6, r25	; 0x06
    2a96:	8d 83       	std	Y+5, r24	; 0x05
    2a98:	3f c0       	rjmp	.+126    	; 0x2b18 <LCD_DisplayCharacter+0x3b8>
	else if (__tmp > 65535)
    2a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9c:	78 85       	ldd	r23, Y+8	; 0x08
    2a9e:	89 85       	ldd	r24, Y+9	; 0x09
    2aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	3f ef       	ldi	r19, 0xFF	; 255
    2aa6:	4f e7       	ldi	r20, 0x7F	; 127
    2aa8:	57 e4       	ldi	r21, 0x47	; 71
    2aaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aae:	18 16       	cp	r1, r24
    2ab0:	4c f5       	brge	.+82     	; 0x2b04 <LCD_DisplayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	40 e2       	ldi	r20, 0x20	; 32
    2ac0:	51 e4       	ldi	r21, 0x41	; 65
    2ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	9e 83       	std	Y+6, r25	; 0x06
    2ad8:	8d 83       	std	Y+5, r24	; 0x05
    2ada:	0f c0       	rjmp	.+30     	; 0x2afa <LCD_DisplayCharacter+0x39a>
    2adc:	88 ec       	ldi	r24, 0xC8	; 200
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	9c 83       	std	Y+4, r25	; 0x04
    2ae2:	8b 83       	std	Y+3, r24	; 0x03
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <LCD_DisplayCharacter+0x388>
    2aec:	9c 83       	std	Y+4, r25	; 0x04
    2aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af0:	8d 81       	ldd	r24, Y+5	; 0x05
    2af2:	9e 81       	ldd	r25, Y+6	; 0x06
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	9e 83       	std	Y+6, r25	; 0x06
    2af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afa:	8d 81       	ldd	r24, Y+5	; 0x05
    2afc:	9e 81       	ldd	r25, Y+6	; 0x06
    2afe:	00 97       	sbiw	r24, 0x00	; 0
    2b00:	69 f7       	brne	.-38     	; 0x2adc <LCD_DisplayCharacter+0x37c>
    2b02:	14 c0       	rjmp	.+40     	; 0x2b2c <LCD_DisplayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b04:	6f 81       	ldd	r22, Y+7	; 0x07
    2b06:	78 85       	ldd	r23, Y+8	; 0x08
    2b08:	89 85       	ldd	r24, Y+9	; 0x09
    2b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	9e 83       	std	Y+6, r25	; 0x06
    2b16:	8d 83       	std	Y+5, r24	; 0x05
    2b18:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1c:	9a 83       	std	Y+2, r25	; 0x02
    2b1e:	89 83       	std	Y+1, r24	; 0x01
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	9a 81       	ldd	r25, Y+2	; 0x02
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	f1 f7       	brne	.-4      	; 0x2b24 <LCD_DisplayCharacter+0x3c4>
    2b28:	9a 83       	std	Y+2, r25	; 0x02
    2b2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b2c:	e9 96       	adiw	r28, 0x39	; 57
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	08 95       	ret

00002b3e <LCD_init>:

void LCD_init(void)
{
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	2e 97       	sbiw	r28, 0x0e	; 14
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	f8 94       	cli
    2b4c:	de bf       	out	0x3e, r29	; 62
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_SetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2b52:	82 e0       	ldi	r24, 0x02	; 2
    2b54:	60 e0       	ldi	r22, 0x00	; 0
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,PIN_OUTPUT);
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	63 e0       	ldi	r22, 0x03	; 3
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <GPIO_SetPinDirection>
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	a0 ea       	ldi	r26, 0xA0	; 160
    2b6c:	b1 e4       	ldi	r27, 0x41	; 65
    2b6e:	8b 87       	std	Y+11, r24	; 0x0b
    2b70:	9c 87       	std	Y+12, r25	; 0x0c
    2b72:	ad 87       	std	Y+13, r26	; 0x0d
    2b74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	4a ef       	ldi	r20, 0xFA	; 250
    2b84:	54 e4       	ldi	r21, 0x44	; 68
    2b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	8f 83       	std	Y+7, r24	; 0x07
    2b90:	98 87       	std	Y+8, r25	; 0x08
    2b92:	a9 87       	std	Y+9, r26	; 0x09
    2b94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b96:	6f 81       	ldd	r22, Y+7	; 0x07
    2b98:	78 85       	ldd	r23, Y+8	; 0x08
    2b9a:	89 85       	ldd	r24, Y+9	; 0x09
    2b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e8       	ldi	r20, 0x80	; 128
    2ba4:	5f e3       	ldi	r21, 0x3F	; 63
    2ba6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2baa:	88 23       	and	r24, r24
    2bac:	2c f4       	brge	.+10     	; 0x2bb8 <LCD_init+0x7a>
		__ticks = 1;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	9e 83       	std	Y+6, r25	; 0x06
    2bb4:	8d 83       	std	Y+5, r24	; 0x05
    2bb6:	3f c0       	rjmp	.+126    	; 0x2c36 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bba:	78 85       	ldd	r23, Y+8	; 0x08
    2bbc:	89 85       	ldd	r24, Y+9	; 0x09
    2bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	3f ef       	ldi	r19, 0xFF	; 255
    2bc4:	4f e7       	ldi	r20, 0x7F	; 127
    2bc6:	57 e4       	ldi	r21, 0x47	; 71
    2bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bcc:	18 16       	cp	r1, r24
    2bce:	4c f5       	brge	.+82     	; 0x2c22 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 e2       	ldi	r20, 0x20	; 32
    2bde:	51 e4       	ldi	r21, 0x41	; 65
    2be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	bc 01       	movw	r22, r24
    2bea:	cd 01       	movw	r24, r26
    2bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	9e 83       	std	Y+6, r25	; 0x06
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
    2bf8:	0f c0       	rjmp	.+30     	; 0x2c18 <LCD_init+0xda>
    2bfa:	88 ec       	ldi	r24, 0xC8	; 200
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	9c 83       	std	Y+4, r25	; 0x04
    2c00:	8b 83       	std	Y+3, r24	; 0x03
    2c02:	8b 81       	ldd	r24, Y+3	; 0x03
    2c04:	9c 81       	ldd	r25, Y+4	; 0x04
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	f1 f7       	brne	.-4      	; 0x2c06 <LCD_init+0xc8>
    2c0a:	9c 83       	std	Y+4, r25	; 0x04
    2c0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c10:	9e 81       	ldd	r25, Y+6	; 0x06
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	9e 83       	std	Y+6, r25	; 0x06
    2c16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c18:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	69 f7       	brne	.-38     	; 0x2bfa <LCD_init+0xbc>
    2c20:	14 c0       	rjmp	.+40     	; 0x2c4a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c22:	6f 81       	ldd	r22, Y+7	; 0x07
    2c24:	78 85       	ldd	r23, Y+8	; 0x08
    2c26:	89 85       	ldd	r24, Y+9	; 0x09
    2c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	9e 83       	std	Y+6, r25	; 0x06
    2c34:	8d 83       	std	Y+5, r24	; 0x05
    2c36:	8d 81       	ldd	r24, Y+5	; 0x05
    2c38:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3a:	9a 83       	std	Y+2, r25	; 0x02
    2c3c:	89 83       	std	Y+1, r24	; 0x01
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	9a 81       	ldd	r25, Y+2	; 0x02
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	f1 f7       	brne	.-4      	; 0x2c42 <LCD_init+0x104>
    2c46:	9a 83       	std	Y+2, r25	; 0x02
    2c48:	89 83       	std	Y+1, r24	; 0x01
	LCD_SendCommand(LCD_COMMAND_FOUR_BIT_TWO_LINE);


#elif (LCD_DATA_BITS_MODE ==8)
	/* Configure the data port as output port */
	GPIO_SetupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	6f ef       	ldi	r22, 0xFF	; 255
    2c4e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <GPIO_SetupPortDirection>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_SendCommand(LCD_COMMAND_EIGHT_BIT_TWO_LINE);
    2c52:	88 e3       	ldi	r24, 0x38	; 56
    2c54:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_SendCommand>
#endif
	LCD_SendCommand(LCD_COMMAND_DISPLAY_ON_CURSOR_OFF); /* cursor off */
    2c58:	8c e0       	ldi	r24, 0x0C	; 12
    2c5a:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_SendCommand>
	LCD_SendCommand(LCD_COMMAND_CLEAR_SCREEN); /* clear LCD at the beginning */
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_SendCommand>
}
    2c64:	2e 96       	adiw	r28, 0x0e	; 14
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <LCD_DisplayString>:

void LCD_DisplayString(const char *str)
{
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <LCD_DisplayString+0x6>
    2c7c:	0f 92       	push	r0
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	9b 83       	std	Y+3, r25	; 0x03
    2c84:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter=0;
    2c86:	19 82       	std	Y+1, r1	; 0x01
    2c88:	0e c0       	rjmp	.+28     	; 0x2ca6 <LCD_DisplayString+0x30>
	while (str[counter] != '\0'){
		LCD_DisplayCharacter(str[counter]);
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	28 2f       	mov	r18, r24
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	8a 81       	ldd	r24, Y+2	; 0x02
    2c92:	9b 81       	ldd	r25, Y+3	; 0x03
    2c94:	fc 01       	movw	r30, r24
    2c96:	e2 0f       	add	r30, r18
    2c98:	f3 1f       	adc	r31, r19
    2c9a:	80 81       	ld	r24, Z
    2c9c:	0e 94 b0 13 	call	0x2760	; 0x2760 <LCD_DisplayCharacter>
		counter++;
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	8f 5f       	subi	r24, 0xFF	; 255
    2ca4:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_DisplayString(const char *str)
{
	uint8 counter=0;
	while (str[counter] != '\0'){
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	28 2f       	mov	r18, r24
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	e2 0f       	add	r30, r18
    2cb4:	f3 1f       	adc	r31, r19
    2cb6:	80 81       	ld	r24, Z
    2cb8:	88 23       	and	r24, r24
    2cba:	39 f7       	brne	.-50     	; 0x2c8a <LCD_DisplayString+0x14>
		LCD_DisplayCharacter(str[counter]);
		counter++;
	}
}
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <LCD_MoveCursor>:

void LCD_MoveCursor(uint8 col , uint8 row)
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <LCD_MoveCursor+0x6>
    2cce:	00 d0       	rcall	.+0      	; 0x2cd0 <LCD_MoveCursor+0x8>
    2cd0:	0f 92       	push	r0
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	8a 83       	std	Y+2, r24	; 0x02
    2cd8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_address;

	switch(row)
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	28 2f       	mov	r18, r24
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	3d 83       	std	Y+5, r19	; 0x05
    2ce2:	2c 83       	std	Y+4, r18	; 0x04
    2ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce8:	81 30       	cpi	r24, 0x01	; 1
    2cea:	91 05       	cpc	r25, r1
    2cec:	c1 f0       	breq	.+48     	; 0x2d1e <LCD_MoveCursor+0x56>
    2cee:	2c 81       	ldd	r18, Y+4	; 0x04
    2cf0:	3d 81       	ldd	r19, Y+5	; 0x05
    2cf2:	22 30       	cpi	r18, 0x02	; 2
    2cf4:	31 05       	cpc	r19, r1
    2cf6:	2c f4       	brge	.+10     	; 0x2d02 <LCD_MoveCursor+0x3a>
    2cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	61 f0       	breq	.+24     	; 0x2d18 <LCD_MoveCursor+0x50>
    2d00:	19 c0       	rjmp	.+50     	; 0x2d34 <LCD_MoveCursor+0x6c>
    2d02:	2c 81       	ldd	r18, Y+4	; 0x04
    2d04:	3d 81       	ldd	r19, Y+5	; 0x05
    2d06:	22 30       	cpi	r18, 0x02	; 2
    2d08:	31 05       	cpc	r19, r1
    2d0a:	69 f0       	breq	.+26     	; 0x2d26 <LCD_MoveCursor+0x5e>
    2d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d10:	83 30       	cpi	r24, 0x03	; 3
    2d12:	91 05       	cpc	r25, r1
    2d14:	61 f0       	breq	.+24     	; 0x2d2e <LCD_MoveCursor+0x66>
    2d16:	0e c0       	rjmp	.+28     	; 0x2d34 <LCD_MoveCursor+0x6c>
	{
	case 0:
		lcd_address = col;
    2d18:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1a:	89 83       	std	Y+1, r24	; 0x01
    2d1c:	0b c0       	rjmp	.+22     	; 0x2d34 <LCD_MoveCursor+0x6c>
		break;
	case 1:
		lcd_address = col + 0x40;
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	80 5c       	subi	r24, 0xC0	; 192
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	07 c0       	rjmp	.+14     	; 0x2d34 <LCD_MoveCursor+0x6c>
		break;
	case 2:
		lcd_address = col + 0x10;
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	80 5f       	subi	r24, 0xF0	; 240
    2d2a:	89 83       	std	Y+1, r24	; 0x01
    2d2c:	03 c0       	rjmp	.+6      	; 0x2d34 <LCD_MoveCursor+0x6c>
		break;
	case 3:
		lcd_address = col + 0x50;
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	80 5b       	subi	r24, 0xB0	; 176
    2d32:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_SendCommand(lcd_address | LCD_COMMAND_FORCE_CURSOR_FIRST_LINE);
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	80 68       	ori	r24, 0x80	; 128
    2d38:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_SendCommand>
}
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	cf 91       	pop	r28
    2d48:	df 91       	pop	r29
    2d4a:	08 95       	ret

00002d4c <LCD_DisplayStringRowColumn>:

void LCD_DisplayStringRowColumn(uint8 row, uint8 col, const char *String)
{
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	00 d0       	rcall	.+0      	; 0x2d52 <LCD_DisplayStringRowColumn+0x6>
    2d52:	00 d0       	rcall	.+0      	; 0x2d54 <LCD_DisplayStringRowColumn+0x8>
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	89 83       	std	Y+1, r24	; 0x01
    2d5a:	6a 83       	std	Y+2, r22	; 0x02
    2d5c:	5c 83       	std	Y+4, r21	; 0x04
    2d5e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_MoveCursor(col,row); /* go to to the required LCD position */
    2d60:	8a 81       	ldd	r24, Y+2	; 0x02
    2d62:	69 81       	ldd	r22, Y+1	; 0x01
    2d64:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_MoveCursor>
	LCD_DisplayString(String); /* display the string */
    2d68:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6c:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_DisplayString>

}
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_COMMAND_CLEAR_SCREEN); /* Send clear display command */
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	0e 94 c1 11 	call	0x2382	; 0x2382 <LCD_SendCommand>
}
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <LCD_IntegerToString>:

void LCD_IntegerToString(int data)
{
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	62 97       	sbiw	r28, 0x12	; 18
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	de bf       	out	0x3e, r29	; 62
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	cd bf       	out	0x3d, r28	; 61
    2da6:	9a 8b       	std	Y+18, r25	; 0x12
    2da8:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buff[16]; /* String to hold the ascii result */
	itoa(data , buff , 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2daa:	89 89       	ldd	r24, Y+17	; 0x11
    2dac:	9a 89       	ldd	r25, Y+18	; 0x12
    2dae:	9e 01       	movw	r18, r28
    2db0:	2f 5f       	subi	r18, 0xFF	; 255
    2db2:	3f 4f       	sbci	r19, 0xFF	; 255
    2db4:	b9 01       	movw	r22, r18
    2db6:	4a e0       	ldi	r20, 0x0A	; 10
    2db8:	50 e0       	ldi	r21, 0x00	; 0
    2dba:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <itoa>
	LCD_DisplayString(buff); /* Display the string */
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	01 96       	adiw	r24, 0x01	; 1
    2dc2:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_DisplayString>
}
    2dc6:	62 96       	adiw	r28, 0x12	; 18
    2dc8:	0f b6       	in	r0, 0x3f	; 63
    2dca:	f8 94       	cli
    2dcc:	de bf       	out	0x3e, r29	; 62
    2dce:	0f be       	out	0x3f, r0	; 63
    2dd0:	cd bf       	out	0x3d, r28	; 61
    2dd2:	cf 91       	pop	r28
    2dd4:	df 91       	pop	r29
    2dd6:	08 95       	ret

00002dd8 <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect){
    2dd8:	1f 92       	push	r1
    2dda:	0f 92       	push	r0
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	0f 92       	push	r0
    2de0:	11 24       	eor	r1, r1
    2de2:	2f 93       	push	r18
    2de4:	3f 93       	push	r19
    2de6:	4f 93       	push	r20
    2de8:	5f 93       	push	r21
    2dea:	6f 93       	push	r22
    2dec:	7f 93       	push	r23
    2dee:	8f 93       	push	r24
    2df0:	9f 93       	push	r25
    2df2:	af 93       	push	r26
    2df4:	bf 93       	push	r27
    2df6:	ef 93       	push	r30
    2df8:	ff 93       	push	r31
    2dfa:	df 93       	push	r29
    2dfc:	cf 93       	push	r28
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
	if (CallBackPtr != NULL_PTR){
    2e02:	80 91 82 01 	lds	r24, 0x0182
    2e06:	90 91 83 01 	lds	r25, 0x0183
    2e0a:	00 97       	sbiw	r24, 0x00	; 0
    2e0c:	29 f0       	breq	.+10     	; 0x2e18 <__vector_7+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		CallBackPtr();
    2e0e:	e0 91 82 01 	lds	r30, 0x0182
    2e12:	f0 91 83 01 	lds	r31, 0x0183
    2e16:	09 95       	icall
	}
}
    2e18:	cf 91       	pop	r28
    2e1a:	df 91       	pop	r29
    2e1c:	ff 91       	pop	r31
    2e1e:	ef 91       	pop	r30
    2e20:	bf 91       	pop	r27
    2e22:	af 91       	pop	r26
    2e24:	9f 91       	pop	r25
    2e26:	8f 91       	pop	r24
    2e28:	7f 91       	pop	r23
    2e2a:	6f 91       	pop	r22
    2e2c:	5f 91       	pop	r21
    2e2e:	4f 91       	pop	r20
    2e30:	3f 91       	pop	r19
    2e32:	2f 91       	pop	r18
    2e34:	0f 90       	pop	r0
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	0f 90       	pop	r0
    2e3a:	1f 90       	pop	r1
    2e3c:	18 95       	reti

00002e3e <__vector_8>:

ISR(TIMER1_COMPB_vect){
    2e3e:	1f 92       	push	r1
    2e40:	0f 92       	push	r0
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	0f 92       	push	r0
    2e46:	11 24       	eor	r1, r1
    2e48:	2f 93       	push	r18
    2e4a:	3f 93       	push	r19
    2e4c:	4f 93       	push	r20
    2e4e:	5f 93       	push	r21
    2e50:	6f 93       	push	r22
    2e52:	7f 93       	push	r23
    2e54:	8f 93       	push	r24
    2e56:	9f 93       	push	r25
    2e58:	af 93       	push	r26
    2e5a:	bf 93       	push	r27
    2e5c:	ef 93       	push	r30
    2e5e:	ff 93       	push	r31
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
	if (CallBackPtr != NULL_PTR){
    2e68:	80 91 82 01 	lds	r24, 0x0182
    2e6c:	90 91 83 01 	lds	r25, 0x0183
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	29 f0       	breq	.+10     	; 0x2e7e <__vector_8+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		CallBackPtr();
    2e74:	e0 91 82 01 	lds	r30, 0x0182
    2e78:	f0 91 83 01 	lds	r31, 0x0183
    2e7c:	09 95       	icall
	}
}
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	ff 91       	pop	r31
    2e84:	ef 91       	pop	r30
    2e86:	bf 91       	pop	r27
    2e88:	af 91       	pop	r26
    2e8a:	9f 91       	pop	r25
    2e8c:	8f 91       	pop	r24
    2e8e:	7f 91       	pop	r23
    2e90:	6f 91       	pop	r22
    2e92:	5f 91       	pop	r21
    2e94:	4f 91       	pop	r20
    2e96:	3f 91       	pop	r19
    2e98:	2f 91       	pop	r18
    2e9a:	0f 90       	pop	r0
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	0f 90       	pop	r0
    2ea0:	1f 90       	pop	r1
    2ea2:	18 95       	reti

00002ea4 <__vector_9>:

ISR(TIMER1_OVF_vect){
    2ea4:	1f 92       	push	r1
    2ea6:	0f 92       	push	r0
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	0f 92       	push	r0
    2eac:	11 24       	eor	r1, r1
    2eae:	2f 93       	push	r18
    2eb0:	3f 93       	push	r19
    2eb2:	4f 93       	push	r20
    2eb4:	5f 93       	push	r21
    2eb6:	6f 93       	push	r22
    2eb8:	7f 93       	push	r23
    2eba:	8f 93       	push	r24
    2ebc:	9f 93       	push	r25
    2ebe:	af 93       	push	r26
    2ec0:	bf 93       	push	r27
    2ec2:	ef 93       	push	r30
    2ec4:	ff 93       	push	r31
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
	if (CallBackPtr != NULL_PTR){
    2ece:	80 91 82 01 	lds	r24, 0x0182
    2ed2:	90 91 83 01 	lds	r25, 0x0183
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	29 f0       	breq	.+10     	; 0x2ee4 <__vector_9+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		CallBackPtr();
    2eda:	e0 91 82 01 	lds	r30, 0x0182
    2ede:	f0 91 83 01 	lds	r31, 0x0183
    2ee2:	09 95       	icall
	}
}
    2ee4:	cf 91       	pop	r28
    2ee6:	df 91       	pop	r29
    2ee8:	ff 91       	pop	r31
    2eea:	ef 91       	pop	r30
    2eec:	bf 91       	pop	r27
    2eee:	af 91       	pop	r26
    2ef0:	9f 91       	pop	r25
    2ef2:	8f 91       	pop	r24
    2ef4:	7f 91       	pop	r23
    2ef6:	6f 91       	pop	r22
    2ef8:	5f 91       	pop	r21
    2efa:	4f 91       	pop	r20
    2efc:	3f 91       	pop	r19
    2efe:	2f 91       	pop	r18
    2f00:	0f 90       	pop	r0
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	0f 90       	pop	r0
    2f06:	1f 90       	pop	r1
    2f08:	18 95       	reti

00002f0a <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
 {
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	00 d0       	rcall	.+0      	; 0x2f10 <Timer1_init+0x6>
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	9a 83       	std	Y+2, r25	; 0x02
    2f16:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr -> initial_value ; /* Set timer1 initial value */
    2f18:	ac e4       	ldi	r26, 0x4C	; 76
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f20:	80 81       	ld	r24, Z
    2f22:	91 81       	ldd	r25, Z+1	; 0x01
    2f24:	11 96       	adiw	r26, 0x01	; 1
    2f26:	9c 93       	st	X, r25
    2f28:	8e 93       	st	-X, r24

	/* FOC1A=1 FOC1B=1 These bits are only active in case non-pwm mode */
	TCCR1A = (1<< FOC1A) | (1<< FOC1B);
    2f2a:	ef e4       	ldi	r30, 0x4F	; 79
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	8c e0       	ldi	r24, 0x0C	; 12
    2f30:	80 83       	st	Z, r24

	/* Configurable Prescaler value */
	TCCR1B = (Config_Ptr->prescaler) ;
    2f32:	ae e4       	ldi	r26, 0x4E	; 78
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	e9 81       	ldd	r30, Y+1	; 0x01
    2f38:	fa 81       	ldd	r31, Y+2	; 0x02
    2f3a:	84 81       	ldd	r24, Z+4	; 0x04
    2f3c:	8c 93       	st	X, r24

	if (Config_Ptr -> mode == NORMAL_MODE){
    2f3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f40:	fa 81       	ldd	r31, Y+2	; 0x02
    2f42:	85 81       	ldd	r24, Z+5	; 0x05
    2f44:	88 23       	and	r24, r24
    2f46:	41 f4       	brne	.+16     	; 0x2f58 <Timer1_init+0x4e>
		/*In case of normal(overflow) mode , Enable the overflow interrupt*/
		TIMSK |= (1<<TOIE1);
    2f48:	a9 e5       	ldi	r26, 0x59	; 89
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	e9 e5       	ldi	r30, 0x59	; 89
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	84 60       	ori	r24, 0x04	; 4
    2f54:	8c 93       	st	X, r24
    2f56:	1c c0       	rjmp	.+56     	; 0x2f90 <Timer1_init+0x86>
	}
	else if (Config_Ptr -> mode == COMPARE_MODE){
    2f58:	e9 81       	ldd	r30, Y+1	; 0x01
    2f5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f5c:	85 81       	ldd	r24, Z+5	; 0x05
    2f5e:	81 30       	cpi	r24, 0x01	; 1
    2f60:	b9 f4       	brne	.+46     	; 0x2f90 <Timer1_init+0x86>
		OCR1A   = Config_Ptr -> compare_value ; /* Set the compare value */
    2f62:	aa e4       	ldi	r26, 0x4A	; 74
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	e9 81       	ldd	r30, Y+1	; 0x01
    2f68:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6a:	82 81       	ldd	r24, Z+2	; 0x02
    2f6c:	93 81       	ldd	r25, Z+3	; 0x03
    2f6e:	11 96       	adiw	r26, 0x01	; 1
    2f70:	9c 93       	st	X, r25
    2f72:	8e 93       	st	-X, r24
		TCCR1B |= (1<< WGM12); /*Enable CTC mode*/
    2f74:	ae e4       	ldi	r26, 0x4E	; 78
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	ee e4       	ldi	r30, 0x4E	; 78
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	88 60       	ori	r24, 0x08	; 8
    2f80:	8c 93       	st	X, r24
		TIMSK  |= (1<<OCIE1A); /*Enable Compare A match interrupt*/
    2f82:	a9 e5       	ldi	r26, 0x59	; 89
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	e9 e5       	ldi	r30, 0x59	; 89
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	80 61       	ori	r24, 0x10	; 16
    2f8e:	8c 93       	st	X, r24
	}

 }
    2f90:	0f 90       	pop	r0
    2f92:	0f 90       	pop	r0
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <Timer1_deInit>:

void Timer1_deInit(void)
 {
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCNT1  = 0;
    2fa2:	ec e4       	ldi	r30, 0x4C	; 76
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	11 82       	std	Z+1, r1	; 0x01
    2fa8:	10 82       	st	Z, r1
	TCCR1A = 0;
    2faa:	ef e4       	ldi	r30, 0x4F	; 79
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	10 82       	st	Z, r1
	TCCR1B = 0;
    2fb0:	ee e4       	ldi	r30, 0x4E	; 78
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	CLEAR_BIT( TIMSK , OCIE1A );
    2fb6:	a9 e5       	ldi	r26, 0x59	; 89
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e9 e5       	ldi	r30, 0x59	; 89
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	8f 7e       	andi	r24, 0xEF	; 239
    2fc2:	8c 93       	st	X, r24
	CLEAR_BIT( TIMSK , TOIE1  );
    2fc4:	a9 e5       	ldi	r26, 0x59	; 89
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	e9 e5       	ldi	r30, 0x59	; 89
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	8b 7f       	andi	r24, 0xFB	; 251
    2fd0:	8c 93       	st	X, r24

 }
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
 {
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <Timer1_setCallBack+0x6>
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	9a 83       	std	Y+2, r25	; 0x02
    2fe4:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	CallBackPtr = a_ptr;
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fea:	90 93 83 01 	sts	0x0183, r25
    2fee:	80 93 82 01 	sts	0x0182, r24
 }
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	cf 91       	pop	r28
    2ff8:	df 91       	pop	r29
    2ffa:	08 95       	ret

00002ffc <UART_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void UART_init(const UART_ConfigType * Config_Ptr)
{
    2ffc:	df 93       	push	r29
    2ffe:	cf 93       	push	r28
    3000:	00 d0       	rcall	.+0      	; 0x3002 <UART_init+0x6>
    3002:	00 d0       	rcall	.+0      	; 0x3004 <UART_init+0x8>
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
    3008:	9c 83       	std	Y+4, r25	; 0x04
    300a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    300c:	1a 82       	std	Y+2, r1	; 0x02
    300e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA |= (1<<U2X);
    3010:	ab e2       	ldi	r26, 0x2B	; 43
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	eb e2       	ldi	r30, 0x2B	; 43
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	82 60       	ori	r24, 0x02	; 2
    301c:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * Configurable bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    301e:	ea e2       	ldi	r30, 0x2A	; 42
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	88 e1       	ldi	r24, 0x18	; 24
    3024:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB) | ((Config_Ptr->bit_data) & 4);
    3026:	aa e2       	ldi	r26, 0x2A	; 42
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	ea e2       	ldi	r30, 0x2A	; 42
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	98 2f       	mov	r25, r24
    3032:	9b 7f       	andi	r25, 0xFB	; 251
    3034:	eb 81       	ldd	r30, Y+3	; 0x03
    3036:	fc 81       	ldd	r31, Y+4	; 0x04
    3038:	80 81       	ld	r24, Z
    303a:	84 70       	andi	r24, 0x04	; 4
    303c:	89 2b       	or	r24, r25
    303e:	8c 93       	st	X, r24
	 * UPM1:0  = - Configurable parity bit
	 * USBS    = - Configurable number of stop bits
	 * UCSZ1:0 = - Configurable bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    3040:	e0 e4       	ldi	r30, 0x40	; 64
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 e8       	ldi	r24, 0x80	; 128
    3046:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)   << UPM0 );
    3048:	a0 e4       	ldi	r26, 0x40	; 64
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	e0 e4       	ldi	r30, 0x40	; 64
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	28 2f       	mov	r18, r24
    3054:	2f 7c       	andi	r18, 0xCF	; 207
    3056:	eb 81       	ldd	r30, Y+3	; 0x03
    3058:	fc 81       	ldd	r31, Y+4	; 0x04
    305a:	81 81       	ldd	r24, Z+1	; 0x01
    305c:	88 2f       	mov	r24, r24
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	82 95       	swap	r24
    3062:	92 95       	swap	r25
    3064:	90 7f       	andi	r25, 0xF0	; 240
    3066:	98 27       	eor	r25, r24
    3068:	80 7f       	andi	r24, 0xF0	; 240
    306a:	98 27       	eor	r25, r24
    306c:	82 2b       	or	r24, r18
    306e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit) << USBS  );
    3070:	a0 e4       	ldi	r26, 0x40	; 64
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	e0 e4       	ldi	r30, 0x40	; 64
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	28 2f       	mov	r18, r24
    307c:	27 7f       	andi	r18, 0xF7	; 247
    307e:	eb 81       	ldd	r30, Y+3	; 0x03
    3080:	fc 81       	ldd	r31, Y+4	; 0x04
    3082:	82 81       	ldd	r24, Z+2	; 0x02
    3084:	88 2f       	mov	r24, r24
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	88 0f       	add	r24, r24
    308a:	99 1f       	adc	r25, r25
    308c:	88 0f       	add	r24, r24
    308e:	99 1f       	adc	r25, r25
    3090:	88 0f       	add	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	82 2b       	or	r24, r18
    3096:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->bit_data) & 3) << UCSZ0 );
    3098:	a0 e4       	ldi	r26, 0x40	; 64
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	e0 e4       	ldi	r30, 0x40	; 64
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	28 2f       	mov	r18, r24
    30a4:	29 7f       	andi	r18, 0xF9	; 249
    30a6:	eb 81       	ldd	r30, Y+3	; 0x03
    30a8:	fc 81       	ldd	r31, Y+4	; 0x04
    30aa:	80 81       	ld	r24, Z
    30ac:	88 2f       	mov	r24, r24
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	83 70       	andi	r24, 0x03	; 3
    30b2:	90 70       	andi	r25, 0x00	; 0
    30b4:	88 0f       	add	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	82 2b       	or	r24, r18
    30ba:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (8UL * Config_Ptr->baud_rate)))-1);
    30bc:	eb 81       	ldd	r30, Y+3	; 0x03
    30be:	fc 81       	ldd	r31, Y+4	; 0x04
    30c0:	83 81       	ldd	r24, Z+3	; 0x03
    30c2:	94 81       	ldd	r25, Z+4	; 0x04
    30c4:	a5 81       	ldd	r26, Z+5	; 0x05
    30c6:	b6 81       	ldd	r27, Z+6	; 0x06
    30c8:	88 0f       	add	r24, r24
    30ca:	99 1f       	adc	r25, r25
    30cc:	aa 1f       	adc	r26, r26
    30ce:	bb 1f       	adc	r27, r27
    30d0:	88 0f       	add	r24, r24
    30d2:	99 1f       	adc	r25, r25
    30d4:	aa 1f       	adc	r26, r26
    30d6:	bb 1f       	adc	r27, r27
    30d8:	88 0f       	add	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	aa 1f       	adc	r26, r26
    30de:	bb 1f       	adc	r27, r27
    30e0:	9c 01       	movw	r18, r24
    30e2:	ad 01       	movw	r20, r26
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	92 e1       	ldi	r25, 0x12	; 18
    30e8:	aa e7       	ldi	r26, 0x7A	; 122
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	0e 94 23 19 	call	0x3246	; 0x3246 <__udivmodsi4>
    30f4:	da 01       	movw	r26, r20
    30f6:	c9 01       	movw	r24, r18
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	9a 83       	std	Y+2, r25	; 0x02
    30fc:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (ubrr_value>>8);
    30fe:	e0 e4       	ldi	r30, 0x40	; 64
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	9a 81       	ldd	r25, Y+2	; 0x02
    3106:	89 2f       	mov	r24, r25
    3108:	99 27       	eor	r25, r25
    310a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    310c:	e9 e2       	ldi	r30, 0x29	; 41
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	80 83       	st	Z, r24
}
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	08 95       	ret

00003122 <UART_SendByte>:

void UART_SendByte(uint8 data)
{
    3122:	df 93       	push	r29
    3124:	cf 93       	push	r28
    3126:	0f 92       	push	r0
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA,UDRE));
    312e:	eb e2       	ldi	r30, 0x2B	; 43
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	88 2f       	mov	r24, r24
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	80 72       	andi	r24, 0x20	; 32
    313a:	90 70       	andi	r25, 0x00	; 0
    313c:	00 97       	sbiw	r24, 0x00	; 0
    313e:	b9 f3       	breq	.-18     	; 0x312e <UART_SendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3140:	ec e2       	ldi	r30, 0x2C	; 44
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	80 83       	st	Z, r24
}
    3148:	0f 90       	pop	r0
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	08 95       	ret

00003150 <UART_ReceiveByte>:

uint8 UART_ReceiveByte(void)
{
    3150:	df 93       	push	r29
    3152:	cf 93       	push	r28
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA,RXC));
    3158:	eb e2       	ldi	r30, 0x2B	; 43
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	88 23       	and	r24, r24
    3160:	dc f7       	brge	.-10     	; 0x3158 <UART_ReceiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3162:	ec e2       	ldi	r30, 0x2C	; 44
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
}
    3168:	cf 91       	pop	r28
    316a:	df 91       	pop	r29
    316c:	08 95       	ret

0000316e <UART_SendString>:

void UART_SendString(uint8 *string)
{
    316e:	df 93       	push	r29
    3170:	cf 93       	push	r28
    3172:	00 d0       	rcall	.+0      	; 0x3174 <UART_SendString+0x6>
    3174:	0f 92       	push	r0
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	9b 83       	std	Y+3, r25	; 0x03
    317c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    317e:	19 82       	std	Y+1, r1	; 0x01
    3180:	0e c0       	rjmp	.+28     	; 0x319e <UART_SendString+0x30>

	/* Send the whole string */
	while(string[i] != '\0'){
		UART_SendByte(string[i]);
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	28 2f       	mov	r18, r24
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	8a 81       	ldd	r24, Y+2	; 0x02
    318a:	9b 81       	ldd	r25, Y+3	; 0x03
    318c:	fc 01       	movw	r30, r24
    318e:	e2 0f       	add	r30, r18
    3190:	f3 1f       	adc	r31, r19
    3192:	80 81       	ld	r24, Z
    3194:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_SendByte>
		i++;
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	8f 5f       	subi	r24, 0xFF	; 255
    319c:	89 83       	std	Y+1, r24	; 0x01
void UART_SendString(uint8 *string)
{
	uint8 i=0;

	/* Send the whole string */
	while(string[i] != '\0'){
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	28 2f       	mov	r18, r24
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	8a 81       	ldd	r24, Y+2	; 0x02
    31a6:	9b 81       	ldd	r25, Y+3	; 0x03
    31a8:	fc 01       	movw	r30, r24
    31aa:	e2 0f       	add	r30, r18
    31ac:	f3 1f       	adc	r31, r19
    31ae:	80 81       	ld	r24, Z
    31b0:	88 23       	and	r24, r24
    31b2:	39 f7       	brne	.-50     	; 0x3182 <UART_SendString+0x14>
		UART_SendByte(string[i]);
		i++;
	}
}
    31b4:	0f 90       	pop	r0
    31b6:	0f 90       	pop	r0
    31b8:	0f 90       	pop	r0
    31ba:	cf 91       	pop	r28
    31bc:	df 91       	pop	r29
    31be:	08 95       	ret

000031c0 <UART_ReceiveString>:

void UART_ReceiveString (uint8 *string)
{
    31c0:	0f 93       	push	r16
    31c2:	1f 93       	push	r17
    31c4:	df 93       	push	r29
    31c6:	cf 93       	push	r28
    31c8:	00 d0       	rcall	.+0      	; 0x31ca <UART_ReceiveString+0xa>
    31ca:	0f 92       	push	r0
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
    31d0:	9b 83       	std	Y+3, r25	; 0x03
    31d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    31d4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	string[i] = UART_ReceiveByte();
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	28 2f       	mov	r18, r24
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	8a 81       	ldd	r24, Y+2	; 0x02
    31de:	9b 81       	ldd	r25, Y+3	; 0x03
    31e0:	8c 01       	movw	r16, r24
    31e2:	02 0f       	add	r16, r18
    31e4:	13 1f       	adc	r17, r19
    31e6:	0e 94 a8 18 	call	0x3150	; 0x3150 <UART_ReceiveByte>
    31ea:	f8 01       	movw	r30, r16
    31ec:	80 83       	st	Z, r24
    31ee:	0f c0       	rjmp	.+30     	; 0x320e <UART_ReceiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (string[i] != '#'){
		i++;
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	8f 5f       	subi	r24, 0xFF	; 255
    31f4:	89 83       	std	Y+1, r24	; 0x01
		string[i]= UART_ReceiveByte();
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	28 2f       	mov	r18, r24
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	8a 81       	ldd	r24, Y+2	; 0x02
    31fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3200:	8c 01       	movw	r16, r24
    3202:	02 0f       	add	r16, r18
    3204:	13 1f       	adc	r17, r19
    3206:	0e 94 a8 18 	call	0x3150	; 0x3150 <UART_ReceiveByte>
    320a:	f8 01       	movw	r30, r16
    320c:	80 83       	st	Z, r24

	/* Receive the first byte */
	string[i] = UART_ReceiveByte();

	/* Receive the whole string until the '#' */
	while (string[i] != '#'){
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	28 2f       	mov	r18, r24
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	8a 81       	ldd	r24, Y+2	; 0x02
    3216:	9b 81       	ldd	r25, Y+3	; 0x03
    3218:	fc 01       	movw	r30, r24
    321a:	e2 0f       	add	r30, r18
    321c:	f3 1f       	adc	r31, r19
    321e:	80 81       	ld	r24, Z
    3220:	83 32       	cpi	r24, 0x23	; 35
    3222:	31 f7       	brne	.-52     	; 0x31f0 <UART_ReceiveString+0x30>
		i++;
		string[i]= UART_ReceiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	string[i] = '\0';
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	28 2f       	mov	r18, r24
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	8a 81       	ldd	r24, Y+2	; 0x02
    322c:	9b 81       	ldd	r25, Y+3	; 0x03
    322e:	fc 01       	movw	r30, r24
    3230:	e2 0f       	add	r30, r18
    3232:	f3 1f       	adc	r31, r19
    3234:	10 82       	st	Z, r1
}
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	1f 91       	pop	r17
    3242:	0f 91       	pop	r16
    3244:	08 95       	ret

00003246 <__udivmodsi4>:
    3246:	a1 e2       	ldi	r26, 0x21	; 33
    3248:	1a 2e       	mov	r1, r26
    324a:	aa 1b       	sub	r26, r26
    324c:	bb 1b       	sub	r27, r27
    324e:	fd 01       	movw	r30, r26
    3250:	0d c0       	rjmp	.+26     	; 0x326c <__udivmodsi4_ep>

00003252 <__udivmodsi4_loop>:
    3252:	aa 1f       	adc	r26, r26
    3254:	bb 1f       	adc	r27, r27
    3256:	ee 1f       	adc	r30, r30
    3258:	ff 1f       	adc	r31, r31
    325a:	a2 17       	cp	r26, r18
    325c:	b3 07       	cpc	r27, r19
    325e:	e4 07       	cpc	r30, r20
    3260:	f5 07       	cpc	r31, r21
    3262:	20 f0       	brcs	.+8      	; 0x326c <__udivmodsi4_ep>
    3264:	a2 1b       	sub	r26, r18
    3266:	b3 0b       	sbc	r27, r19
    3268:	e4 0b       	sbc	r30, r20
    326a:	f5 0b       	sbc	r31, r21

0000326c <__udivmodsi4_ep>:
    326c:	66 1f       	adc	r22, r22
    326e:	77 1f       	adc	r23, r23
    3270:	88 1f       	adc	r24, r24
    3272:	99 1f       	adc	r25, r25
    3274:	1a 94       	dec	r1
    3276:	69 f7       	brne	.-38     	; 0x3252 <__udivmodsi4_loop>
    3278:	60 95       	com	r22
    327a:	70 95       	com	r23
    327c:	80 95       	com	r24
    327e:	90 95       	com	r25
    3280:	9b 01       	movw	r18, r22
    3282:	ac 01       	movw	r20, r24
    3284:	bd 01       	movw	r22, r26
    3286:	cf 01       	movw	r24, r30
    3288:	08 95       	ret

0000328a <__prologue_saves__>:
    328a:	2f 92       	push	r2
    328c:	3f 92       	push	r3
    328e:	4f 92       	push	r4
    3290:	5f 92       	push	r5
    3292:	6f 92       	push	r6
    3294:	7f 92       	push	r7
    3296:	8f 92       	push	r8
    3298:	9f 92       	push	r9
    329a:	af 92       	push	r10
    329c:	bf 92       	push	r11
    329e:	cf 92       	push	r12
    32a0:	df 92       	push	r13
    32a2:	ef 92       	push	r14
    32a4:	ff 92       	push	r15
    32a6:	0f 93       	push	r16
    32a8:	1f 93       	push	r17
    32aa:	cf 93       	push	r28
    32ac:	df 93       	push	r29
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	ca 1b       	sub	r28, r26
    32b4:	db 0b       	sbc	r29, r27
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	09 94       	ijmp

000032c2 <__epilogue_restores__>:
    32c2:	2a 88       	ldd	r2, Y+18	; 0x12
    32c4:	39 88       	ldd	r3, Y+17	; 0x11
    32c6:	48 88       	ldd	r4, Y+16	; 0x10
    32c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    32ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    32cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    32ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    32d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    32d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    32d4:	b9 84       	ldd	r11, Y+9	; 0x09
    32d6:	c8 84       	ldd	r12, Y+8	; 0x08
    32d8:	df 80       	ldd	r13, Y+7	; 0x07
    32da:	ee 80       	ldd	r14, Y+6	; 0x06
    32dc:	fd 80       	ldd	r15, Y+5	; 0x05
    32de:	0c 81       	ldd	r16, Y+4	; 0x04
    32e0:	1b 81       	ldd	r17, Y+3	; 0x03
    32e2:	aa 81       	ldd	r26, Y+2	; 0x02
    32e4:	b9 81       	ldd	r27, Y+1	; 0x01
    32e6:	ce 0f       	add	r28, r30
    32e8:	d1 1d       	adc	r29, r1
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	de bf       	out	0x3e, r29	; 62
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	cd bf       	out	0x3d, r28	; 61
    32f4:	ed 01       	movw	r28, r26
    32f6:	08 95       	ret

000032f8 <itoa>:
    32f8:	fb 01       	movw	r30, r22
    32fa:	9f 01       	movw	r18, r30
    32fc:	e8 94       	clt
    32fe:	42 30       	cpi	r20, 0x02	; 2
    3300:	c4 f0       	brlt	.+48     	; 0x3332 <itoa+0x3a>
    3302:	45 32       	cpi	r20, 0x25	; 37
    3304:	b4 f4       	brge	.+44     	; 0x3332 <itoa+0x3a>
    3306:	4a 30       	cpi	r20, 0x0A	; 10
    3308:	29 f4       	brne	.+10     	; 0x3314 <itoa+0x1c>
    330a:	97 fb       	bst	r25, 7
    330c:	1e f4       	brtc	.+6      	; 0x3314 <itoa+0x1c>
    330e:	90 95       	com	r25
    3310:	81 95       	neg	r24
    3312:	9f 4f       	sbci	r25, 0xFF	; 255
    3314:	64 2f       	mov	r22, r20
    3316:	77 27       	eor	r23, r23
    3318:	0e 94 ad 19 	call	0x335a	; 0x335a <__udivmodhi4>
    331c:	80 5d       	subi	r24, 0xD0	; 208
    331e:	8a 33       	cpi	r24, 0x3A	; 58
    3320:	0c f0       	brlt	.+2      	; 0x3324 <itoa+0x2c>
    3322:	89 5d       	subi	r24, 0xD9	; 217
    3324:	81 93       	st	Z+, r24
    3326:	cb 01       	movw	r24, r22
    3328:	00 97       	sbiw	r24, 0x00	; 0
    332a:	a1 f7       	brne	.-24     	; 0x3314 <itoa+0x1c>
    332c:	16 f4       	brtc	.+4      	; 0x3332 <itoa+0x3a>
    332e:	5d e2       	ldi	r21, 0x2D	; 45
    3330:	51 93       	st	Z+, r21
    3332:	10 82       	st	Z, r1
    3334:	c9 01       	movw	r24, r18
    3336:	0c 94 9d 19 	jmp	0x333a	; 0x333a <strrev>

0000333a <strrev>:
    333a:	dc 01       	movw	r26, r24
    333c:	fc 01       	movw	r30, r24
    333e:	67 2f       	mov	r22, r23
    3340:	71 91       	ld	r23, Z+
    3342:	77 23       	and	r23, r23
    3344:	e1 f7       	brne	.-8      	; 0x333e <strrev+0x4>
    3346:	32 97       	sbiw	r30, 0x02	; 2
    3348:	04 c0       	rjmp	.+8      	; 0x3352 <strrev+0x18>
    334a:	7c 91       	ld	r23, X
    334c:	6d 93       	st	X+, r22
    334e:	70 83       	st	Z, r23
    3350:	62 91       	ld	r22, -Z
    3352:	ae 17       	cp	r26, r30
    3354:	bf 07       	cpc	r27, r31
    3356:	c8 f3       	brcs	.-14     	; 0x334a <strrev+0x10>
    3358:	08 95       	ret

0000335a <__udivmodhi4>:
    335a:	aa 1b       	sub	r26, r26
    335c:	bb 1b       	sub	r27, r27
    335e:	51 e1       	ldi	r21, 0x11	; 17
    3360:	07 c0       	rjmp	.+14     	; 0x3370 <__udivmodhi4_ep>

00003362 <__udivmodhi4_loop>:
    3362:	aa 1f       	adc	r26, r26
    3364:	bb 1f       	adc	r27, r27
    3366:	a6 17       	cp	r26, r22
    3368:	b7 07       	cpc	r27, r23
    336a:	10 f0       	brcs	.+4      	; 0x3370 <__udivmodhi4_ep>
    336c:	a6 1b       	sub	r26, r22
    336e:	b7 0b       	sbc	r27, r23

00003370 <__udivmodhi4_ep>:
    3370:	88 1f       	adc	r24, r24
    3372:	99 1f       	adc	r25, r25
    3374:	5a 95       	dec	r21
    3376:	a9 f7       	brne	.-22     	; 0x3362 <__udivmodhi4_loop>
    3378:	80 95       	com	r24
    337a:	90 95       	com	r25
    337c:	bc 01       	movw	r22, r24
    337e:	cd 01       	movw	r24, r26
    3380:	08 95       	ret

00003382 <_exit>:
    3382:	f8 94       	cli

00003384 <__stop_program>:
    3384:	ff cf       	rjmp	.-2      	; 0x3384 <__stop_program>
