
Final_Project_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  000026d2  00002766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080017a  0080017a  00002880  2**0
                  ALLOC
  3 .stab         00002814  00000000  00000000  00002880  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000136d  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006401  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000065a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006793  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b0fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b5b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__vector_7>
      20:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__vector_8>
      24:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b7 0a 	call	0x156e	; 0x156e <main>
      8a:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Timer1_Tick>:

/* Description:
 * The callback function called by the timer driver
 */
void Timer1_Tick()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	tick++;
     e36:	80 91 7a 01 	lds	r24, 0x017A
     e3a:	8f 5f       	subi	r24, 0xFF	; 255
     e3c:	80 93 7a 01 	sts	0x017A, r24
}
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <SetNewPassword>:
 * Receives the two passwords entered from the user and check if they are
 * similar, if they are matched set this password as the system's password
 * and save it in the EEPROM
 */
void SetNewPassword()
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	a9 97       	sbiw	r28, 0x29	; 41
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
	uint8 key , i, pass1[PASSWORD_SIZE], pass2[PASSWORD_SIZE], check=0;
     e5a:	1d 8e       	std	Y+29, r1	; 0x1d
	for (i=0 ; i<PASSWORD_SIZE ; i++)
     e5c:	1e 8e       	std	Y+30, r1	; 0x1e
     e5e:	82 c0       	rjmp	.+260    	; 0xf64 <SetNewPassword+0x11e>
	{
		key = UART_ReceiveByte();
     e60:	0e 94 93 12 	call	0x2526	; 0x2526 <UART_ReceiveByte>
     e64:	8f 8f       	std	Y+31, r24	; 0x1f
		pass1[i] = key;
     e66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	ce 01       	movw	r24, r28
     e6e:	80 96       	adiw	r24, 0x20	; 32
     e70:	fc 01       	movw	r30, r24
     e72:	e2 0f       	add	r30, r18
     e74:	f3 1f       	adc	r31, r19
     e76:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e78:	80 83       	st	Z, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	a8 e4       	ldi	r26, 0x48	; 72
     e80:	b2 e4       	ldi	r27, 0x42	; 66
     e82:	89 8f       	std	Y+25, r24	; 0x19
     e84:	9a 8f       	std	Y+26, r25	; 0x1a
     e86:	ab 8f       	std	Y+27, r26	; 0x1b
     e88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8a:	69 8d       	ldd	r22, Y+25	; 0x19
     e8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e90:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	4a ef       	ldi	r20, 0xFA	; 250
     e98:	54 e4       	ldi	r21, 0x44	; 68
     e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	8d 8b       	std	Y+21, r24	; 0x15
     ea4:	9e 8b       	std	Y+22, r25	; 0x16
     ea6:	af 8b       	std	Y+23, r26	; 0x17
     ea8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     eaa:	6d 89       	ldd	r22, Y+21	; 0x15
     eac:	7e 89       	ldd	r23, Y+22	; 0x16
     eae:	8f 89       	ldd	r24, Y+23	; 0x17
     eb0:	98 8d       	ldd	r25, Y+24	; 0x18
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e8       	ldi	r20, 0x80	; 128
     eb8:	5f e3       	ldi	r21, 0x3F	; 63
     eba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ebe:	88 23       	and	r24, r24
     ec0:	2c f4       	brge	.+10     	; 0xecc <SetNewPassword+0x86>
		__ticks = 1;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	9c 8b       	std	Y+20, r25	; 0x14
     ec8:	8b 8b       	std	Y+19, r24	; 0x13
     eca:	3f c0       	rjmp	.+126    	; 0xf4a <SetNewPassword+0x104>
	else if (__tmp > 65535)
     ecc:	6d 89       	ldd	r22, Y+21	; 0x15
     ece:	7e 89       	ldd	r23, Y+22	; 0x16
     ed0:	8f 89       	ldd	r24, Y+23	; 0x17
     ed2:	98 8d       	ldd	r25, Y+24	; 0x18
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	3f ef       	ldi	r19, 0xFF	; 255
     ed8:	4f e7       	ldi	r20, 0x7F	; 127
     eda:	57 e4       	ldi	r21, 0x47	; 71
     edc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ee0:	18 16       	cp	r1, r24
     ee2:	4c f5       	brge	.+82     	; 0xf36 <SetNewPassword+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee4:	69 8d       	ldd	r22, Y+25	; 0x19
     ee6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ee8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e2       	ldi	r20, 0x20	; 32
     ef2:	51 e4       	ldi	r21, 0x41	; 65
     ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	bc 01       	movw	r22, r24
     efe:	cd 01       	movw	r24, r26
     f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	9c 8b       	std	Y+20, r25	; 0x14
     f0a:	8b 8b       	std	Y+19, r24	; 0x13
     f0c:	0f c0       	rjmp	.+30     	; 0xf2c <SetNewPassword+0xe6>
     f0e:	88 ec       	ldi	r24, 0xC8	; 200
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	9a 8b       	std	Y+18, r25	; 0x12
     f14:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f16:	89 89       	ldd	r24, Y+17	; 0x11
     f18:	9a 89       	ldd	r25, Y+18	; 0x12
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <SetNewPassword+0xd4>
     f1e:	9a 8b       	std	Y+18, r25	; 0x12
     f20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f22:	8b 89       	ldd	r24, Y+19	; 0x13
     f24:	9c 89       	ldd	r25, Y+20	; 0x14
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	9c 8b       	std	Y+20, r25	; 0x14
     f2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2c:	8b 89       	ldd	r24, Y+19	; 0x13
     f2e:	9c 89       	ldd	r25, Y+20	; 0x14
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	69 f7       	brne	.-38     	; 0xf0e <SetNewPassword+0xc8>
     f34:	14 c0       	rjmp	.+40     	; 0xf5e <SetNewPassword+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f36:	6d 89       	ldd	r22, Y+21	; 0x15
     f38:	7e 89       	ldd	r23, Y+22	; 0x16
     f3a:	8f 89       	ldd	r24, Y+23	; 0x17
     f3c:	98 8d       	ldd	r25, Y+24	; 0x18
     f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	9c 8b       	std	Y+20, r25	; 0x14
     f48:	8b 8b       	std	Y+19, r24	; 0x13
     f4a:	8b 89       	ldd	r24, Y+19	; 0x13
     f4c:	9c 89       	ldd	r25, Y+20	; 0x14
     f4e:	98 8b       	std	Y+16, r25	; 0x10
     f50:	8f 87       	std	Y+15, r24	; 0x0f
     f52:	8f 85       	ldd	r24, Y+15	; 0x0f
     f54:	98 89       	ldd	r25, Y+16	; 0x10
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <SetNewPassword+0x110>
     f5a:	98 8b       	std	Y+16, r25	; 0x10
     f5c:	8f 87       	std	Y+15, r24	; 0x0f
 * and save it in the EEPROM
 */
void SetNewPassword()
{
	uint8 key , i, pass1[PASSWORD_SIZE], pass2[PASSWORD_SIZE], check=0;
	for (i=0 ; i<PASSWORD_SIZE ; i++)
     f5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f60:	8f 5f       	subi	r24, 0xFF	; 255
     f62:	8e 8f       	std	Y+30, r24	; 0x1e
     f64:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f66:	85 30       	cpi	r24, 0x05	; 5
     f68:	08 f4       	brcc	.+2      	; 0xf6c <SetNewPassword+0x126>
     f6a:	7a cf       	rjmp	.-268    	; 0xe60 <SetNewPassword+0x1a>
		key = UART_ReceiveByte();
		pass1[i] = key;
		_delay_ms(50);
	}

	for (i=0 ; i<PASSWORD_SIZE ; i++)
     f6c:	1e 8e       	std	Y+30, r1	; 0x1e
     f6e:	82 c0       	rjmp	.+260    	; 0x1074 <SetNewPassword+0x22e>
	{
		key = UART_ReceiveByte();
     f70:	0e 94 93 12 	call	0x2526	; 0x2526 <UART_ReceiveByte>
     f74:	8f 8f       	std	Y+31, r24	; 0x1f
		pass2[i] = key;
     f76:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	ce 01       	movw	r24, r28
     f7e:	85 96       	adiw	r24, 0x25	; 37
     f80:	fc 01       	movw	r30, r24
     f82:	e2 0f       	add	r30, r18
     f84:	f3 1f       	adc	r31, r19
     f86:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f88:	80 83       	st	Z, r24
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a8 e4       	ldi	r26, 0x48	; 72
     f90:	b2 e4       	ldi	r27, 0x42	; 66
     f92:	8b 87       	std	Y+11, r24	; 0x0b
     f94:	9c 87       	std	Y+12, r25	; 0x0c
     f96:	ad 87       	std	Y+13, r26	; 0x0d
     f98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	4a ef       	ldi	r20, 0xFA	; 250
     fa8:	54 e4       	ldi	r21, 0x44	; 68
     faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	8f 83       	std	Y+7, r24	; 0x07
     fb4:	98 87       	std	Y+8, r25	; 0x08
     fb6:	a9 87       	std	Y+9, r26	; 0x09
     fb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fba:	6f 81       	ldd	r22, Y+7	; 0x07
     fbc:	78 85       	ldd	r23, Y+8	; 0x08
     fbe:	89 85       	ldd	r24, Y+9	; 0x09
     fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e8       	ldi	r20, 0x80	; 128
     fc8:	5f e3       	ldi	r21, 0x3F	; 63
     fca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fce:	88 23       	and	r24, r24
     fd0:	2c f4       	brge	.+10     	; 0xfdc <SetNewPassword+0x196>
		__ticks = 1;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	8d 83       	std	Y+5, r24	; 0x05
     fda:	3f c0       	rjmp	.+126    	; 0x105a <SetNewPassword+0x214>
	else if (__tmp > 65535)
     fdc:	6f 81       	ldd	r22, Y+7	; 0x07
     fde:	78 85       	ldd	r23, Y+8	; 0x08
     fe0:	89 85       	ldd	r24, Y+9	; 0x09
     fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	3f ef       	ldi	r19, 0xFF	; 255
     fe8:	4f e7       	ldi	r20, 0x7F	; 127
     fea:	57 e4       	ldi	r21, 0x47	; 71
     fec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ff0:	18 16       	cp	r1, r24
     ff2:	4c f5       	brge	.+82     	; 0x1046 <SetNewPassword+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e2       	ldi	r20, 0x20	; 32
    1002:	51 e4       	ldi	r21, 0x41	; 65
    1004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	9e 83       	std	Y+6, r25	; 0x06
    101a:	8d 83       	std	Y+5, r24	; 0x05
    101c:	0f c0       	rjmp	.+30     	; 0x103c <SetNewPassword+0x1f6>
    101e:	88 ec       	ldi	r24, 0xC8	; 200
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	9c 83       	std	Y+4, r25	; 0x04
    1024:	8b 83       	std	Y+3, r24	; 0x03
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	f1 f7       	brne	.-4      	; 0x102a <SetNewPassword+0x1e4>
    102e:	9c 83       	std	Y+4, r25	; 0x04
    1030:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	9e 81       	ldd	r25, Y+6	; 0x06
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	9e 83       	std	Y+6, r25	; 0x06
    103a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	69 f7       	brne	.-38     	; 0x101e <SetNewPassword+0x1d8>
    1044:	14 c0       	rjmp	.+40     	; 0x106e <SetNewPassword+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1046:	6f 81       	ldd	r22, Y+7	; 0x07
    1048:	78 85       	ldd	r23, Y+8	; 0x08
    104a:	89 85       	ldd	r24, Y+9	; 0x09
    104c:	9a 85       	ldd	r25, Y+10	; 0x0a
    104e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	9e 83       	std	Y+6, r25	; 0x06
    1058:	8d 83       	std	Y+5, r24	; 0x05
    105a:	8d 81       	ldd	r24, Y+5	; 0x05
    105c:	9e 81       	ldd	r25, Y+6	; 0x06
    105e:	9a 83       	std	Y+2, r25	; 0x02
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	9a 81       	ldd	r25, Y+2	; 0x02
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <SetNewPassword+0x220>
    106a:	9a 83       	std	Y+2, r25	; 0x02
    106c:	89 83       	std	Y+1, r24	; 0x01
		key = UART_ReceiveByte();
		pass1[i] = key;
		_delay_ms(50);
	}

	for (i=0 ; i<PASSWORD_SIZE ; i++)
    106e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	8e 8f       	std	Y+30, r24	; 0x1e
    1074:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1076:	85 30       	cpi	r24, 0x05	; 5
    1078:	08 f4       	brcc	.+2      	; 0x107c <SetNewPassword+0x236>
    107a:	7a cf       	rjmp	.-268    	; 0xf70 <SetNewPassword+0x12a>
		key = UART_ReceiveByte();
		pass2[i] = key;
		_delay_ms(50);
	}

	for (i=0 ; i<PASSWORD_SIZE ; i++)
    107c:	1e 8e       	std	Y+30, r1	; 0x1e
    107e:	1a c0       	rjmp	.+52     	; 0x10b4 <SetNewPassword+0x26e>
	{
		if (pass1[i] == pass2[i]){
    1080:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	ce 01       	movw	r24, r28
    1088:	80 96       	adiw	r24, 0x20	; 32
    108a:	fc 01       	movw	r30, r24
    108c:	e2 0f       	add	r30, r18
    108e:	f3 1f       	adc	r31, r19
    1090:	40 81       	ld	r20, Z
    1092:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	ce 01       	movw	r24, r28
    109a:	85 96       	adiw	r24, 0x25	; 37
    109c:	fc 01       	movw	r30, r24
    109e:	e2 0f       	add	r30, r18
    10a0:	f3 1f       	adc	r31, r19
    10a2:	80 81       	ld	r24, Z
    10a4:	48 17       	cp	r20, r24
    10a6:	19 f4       	brne	.+6      	; 0x10ae <SetNewPassword+0x268>
			check++;
    10a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	8d 8f       	std	Y+29, r24	; 0x1d
		key = UART_ReceiveByte();
		pass2[i] = key;
		_delay_ms(50);
	}

	for (i=0 ; i<PASSWORD_SIZE ; i++)
    10ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10b0:	8f 5f       	subi	r24, 0xFF	; 255
    10b2:	8e 8f       	std	Y+30, r24	; 0x1e
    10b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10b6:	85 30       	cpi	r24, 0x05	; 5
    10b8:	18 f3       	brcs	.-58     	; 0x1080 <SetNewPassword+0x23a>
	{
		if (pass1[i] == pass2[i]){
			check++;
		}
	}
	if (check == 5)
    10ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10bc:	85 30       	cpi	r24, 0x05	; 5
    10be:	41 f4       	brne	.+16     	; 0x10d0 <SetNewPassword+0x28a>
	{
		Save_Password(pass1);
    10c0:	ce 01       	movw	r24, r28
    10c2:	80 96       	adiw	r24, 0x20	; 32
    10c4:	0e 94 3b 09 	call	0x1276	; 0x1276 <Save_Password>
		UART_SendByte(MATCHED);
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <UART_SendByte>
    10ce:	03 c0       	rjmp	.+6      	; 0x10d6 <SetNewPassword+0x290>
	}
	else
	{
		UART_SendByte(NOT_MATCHED);
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <UART_SendByte>
	}
}
    10d6:	a9 96       	adiw	r28, 0x29	; 41
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <VerifyPassword>:

/* Description:
 * Compares the entered password with the password saved in the EEPROM
 */
void VerifyPassword()
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	66 97       	sbiw	r28, 0x16	; 22
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
	uint8 key, i, check=0, received_pass[5];
    10fc:	1f 86       	std	Y+15, r1	; 0x0f

	for (i=0 ; i<PASSWORD_SIZE ; i++)
    10fe:	18 8a       	std	Y+16, r1	; 0x10
    1100:	82 c0       	rjmp	.+260    	; 0x1206 <VerifyPassword+0x11e>
	{
		key = UART_ReceiveByte();
    1102:	0e 94 93 12 	call	0x2526	; 0x2526 <UART_ReceiveByte>
    1106:	89 8b       	std	Y+17, r24	; 0x11
		received_pass[i] = key;
    1108:	88 89       	ldd	r24, Y+16	; 0x10
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	ce 01       	movw	r24, r28
    1110:	42 96       	adiw	r24, 0x12	; 18
    1112:	fc 01       	movw	r30, r24
    1114:	e2 0f       	add	r30, r18
    1116:	f3 1f       	adc	r31, r19
    1118:	89 89       	ldd	r24, Y+17	; 0x11
    111a:	80 83       	st	Z, r24
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a8 e4       	ldi	r26, 0x48	; 72
    1122:	b3 e4       	ldi	r27, 0x43	; 67
    1124:	8b 87       	std	Y+11, r24	; 0x0b
    1126:	9c 87       	std	Y+12, r25	; 0x0c
    1128:	ad 87       	std	Y+13, r26	; 0x0d
    112a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112c:	6b 85       	ldd	r22, Y+11	; 0x0b
    112e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1130:	8d 85       	ldd	r24, Y+13	; 0x0d
    1132:	9e 85       	ldd	r25, Y+14	; 0x0e
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	4a ef       	ldi	r20, 0xFA	; 250
    113a:	54 e4       	ldi	r21, 0x44	; 68
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	8f 83       	std	Y+7, r24	; 0x07
    1146:	98 87       	std	Y+8, r25	; 0x08
    1148:	a9 87       	std	Y+9, r26	; 0x09
    114a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e8       	ldi	r20, 0x80	; 128
    115a:	5f e3       	ldi	r21, 0x3F	; 63
    115c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1160:	88 23       	and	r24, r24
    1162:	2c f4       	brge	.+10     	; 0x116e <VerifyPassword+0x86>
		__ticks = 1;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9e 83       	std	Y+6, r25	; 0x06
    116a:	8d 83       	std	Y+5, r24	; 0x05
    116c:	3f c0       	rjmp	.+126    	; 0x11ec <VerifyPassword+0x104>
	else if (__tmp > 65535)
    116e:	6f 81       	ldd	r22, Y+7	; 0x07
    1170:	78 85       	ldd	r23, Y+8	; 0x08
    1172:	89 85       	ldd	r24, Y+9	; 0x09
    1174:	9a 85       	ldd	r25, Y+10	; 0x0a
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	3f ef       	ldi	r19, 0xFF	; 255
    117a:	4f e7       	ldi	r20, 0x7F	; 127
    117c:	57 e4       	ldi	r21, 0x47	; 71
    117e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1182:	18 16       	cp	r1, r24
    1184:	4c f5       	brge	.+82     	; 0x11d8 <VerifyPassword+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1186:	6b 85       	ldd	r22, Y+11	; 0x0b
    1188:	7c 85       	ldd	r23, Y+12	; 0x0c
    118a:	8d 85       	ldd	r24, Y+13	; 0x0d
    118c:	9e 85       	ldd	r25, Y+14	; 0x0e
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e2       	ldi	r20, 0x20	; 32
    1194:	51 e4       	ldi	r21, 0x41	; 65
    1196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce <VerifyPassword+0xe6>
    11b0:	88 ec       	ldi	r24, 0xC8	; 200
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9c 83       	std	Y+4, r25	; 0x04
    11b6:	8b 83       	std	Y+3, r24	; 0x03
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <VerifyPassword+0xd4>
    11c0:	9c 83       	std	Y+4, r25	; 0x04
    11c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	9e 83       	std	Y+6, r25	; 0x06
    11cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	69 f7       	brne	.-38     	; 0x11b0 <VerifyPassword+0xc8>
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <VerifyPassword+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d8:	6f 81       	ldd	r22, Y+7	; 0x07
    11da:	78 85       	ldd	r23, Y+8	; 0x08
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	9e 83       	std	Y+6, r25	; 0x06
    11ea:	8d 83       	std	Y+5, r24	; 0x05
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	9e 81       	ldd	r25, Y+6	; 0x06
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <VerifyPassword+0x110>
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
 */
void VerifyPassword()
{
	uint8 key, i, check=0, received_pass[5];

	for (i=0 ; i<PASSWORD_SIZE ; i++)
    1200:	88 89       	ldd	r24, Y+16	; 0x10
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	88 8b       	std	Y+16, r24	; 0x10
    1206:	88 89       	ldd	r24, Y+16	; 0x10
    1208:	85 30       	cpi	r24, 0x05	; 5
    120a:	08 f4       	brcc	.+2      	; 0x120e <VerifyPassword+0x126>
    120c:	7a cf       	rjmp	.-268    	; 0x1102 <VerifyPassword+0x1a>
		key = UART_ReceiveByte();
		received_pass[i] = key;
		_delay_ms(200);
	}

	Check_Saved_Password(eeprom_pass);
    120e:	8d e7       	ldi	r24, 0x7D	; 125
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	0e 94 dd 09 	call	0x13ba	; 0x13ba <Check_Saved_Password>

	for (i=0 ; i<PASSWORD_SIZE ; i++)
    1216:	18 8a       	std	Y+16, r1	; 0x10
    1218:	18 c0       	rjmp	.+48     	; 0x124a <VerifyPassword+0x162>
	{
		if (received_pass[i] == eeprom_pass[i])
    121a:	88 89       	ldd	r24, Y+16	; 0x10
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	ce 01       	movw	r24, r28
    1222:	42 96       	adiw	r24, 0x12	; 18
    1224:	fc 01       	movw	r30, r24
    1226:	e2 0f       	add	r30, r18
    1228:	f3 1f       	adc	r31, r19
    122a:	20 81       	ld	r18, Z
    122c:	88 89       	ldd	r24, Y+16	; 0x10
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	fc 01       	movw	r30, r24
    1234:	e3 58       	subi	r30, 0x83	; 131
    1236:	fe 4f       	sbci	r31, 0xFE	; 254
    1238:	80 81       	ld	r24, Z
    123a:	28 17       	cp	r18, r24
    123c:	19 f4       	brne	.+6      	; 0x1244 <VerifyPassword+0x15c>
		{
			check++;
    123e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1240:	8f 5f       	subi	r24, 0xFF	; 255
    1242:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
	}

	Check_Saved_Password(eeprom_pass);

	for (i=0 ; i<PASSWORD_SIZE ; i++)
    1244:	88 89       	ldd	r24, Y+16	; 0x10
    1246:	8f 5f       	subi	r24, 0xFF	; 255
    1248:	88 8b       	std	Y+16, r24	; 0x10
    124a:	88 89       	ldd	r24, Y+16	; 0x10
    124c:	85 30       	cpi	r24, 0x05	; 5
    124e:	28 f3       	brcs	.-54     	; 0x121a <VerifyPassword+0x132>
		if (received_pass[i] == eeprom_pass[i])
		{
			check++;
		}
	}
	if (check == 5)
    1250:	8f 85       	ldd	r24, Y+15	; 0x0f
    1252:	85 30       	cpi	r24, 0x05	; 5
    1254:	21 f4       	brne	.+8      	; 0x125e <VerifyPassword+0x176>
	{
		UART_SendByte(MATCHED);
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <UART_SendByte>
    125c:	03 c0       	rjmp	.+6      	; 0x1264 <VerifyPassword+0x17c>
	}
	else
	{
		UART_SendByte(NOT_MATCHED);
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <UART_SendByte>
	}
}
    1264:	66 96       	adiw	r28, 0x16	; 22
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <Save_Password>:

/* Description:
 * Saves the system's password in the EEPROM
 */
void Save_Password(uint8* password)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	61 97       	sbiw	r28, 0x11	; 17
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	99 8b       	std	Y+17, r25	; 0x11
    128c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i=0 ; i<PASSWORD_SIZE ; i++ )
    128e:	1f 86       	std	Y+15, r1	; 0x0f
    1290:	87 c0       	rjmp	.+270    	; 0x13a0 <Save_Password+0x12a>
	{
		EEPROM_WriteByte((SLAVE_ADDRESS)+i,password[i]);
    1292:	8f 85       	ldd	r24, Y+15	; 0x0f
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	04 96       	adiw	r24, 0x04	; 4
    129a:	ac 01       	movw	r20, r24
    129c:	8f 85       	ldd	r24, Y+15	; 0x0f
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	88 89       	ldd	r24, Y+16	; 0x10
    12a4:	99 89       	ldd	r25, Y+17	; 0x11
    12a6:	fc 01       	movw	r30, r24
    12a8:	e2 0f       	add	r30, r18
    12aa:	f3 1f       	adc	r31, r19
    12ac:	20 81       	ld	r18, Z
    12ae:	ca 01       	movw	r24, r20
    12b0:	62 2f       	mov	r22, r18
    12b2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <EEPROM_WriteByte>
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a0 e2       	ldi	r26, 0x20	; 32
    12bc:	b1 e4       	ldi	r27, 0x41	; 65
    12be:	8b 87       	std	Y+11, r24	; 0x0b
    12c0:	9c 87       	std	Y+12, r25	; 0x0c
    12c2:	ad 87       	std	Y+13, r26	; 0x0d
    12c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    12cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	4a ef       	ldi	r20, 0xFA	; 250
    12d4:	54 e4       	ldi	r21, 0x44	; 68
    12d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	8f 83       	std	Y+7, r24	; 0x07
    12e0:	98 87       	std	Y+8, r25	; 0x08
    12e2:	a9 87       	std	Y+9, r26	; 0x09
    12e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12e6:	6f 81       	ldd	r22, Y+7	; 0x07
    12e8:	78 85       	ldd	r23, Y+8	; 0x08
    12ea:	89 85       	ldd	r24, Y+9	; 0x09
    12ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e8       	ldi	r20, 0x80	; 128
    12f4:	5f e3       	ldi	r21, 0x3F	; 63
    12f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12fa:	88 23       	and	r24, r24
    12fc:	2c f4       	brge	.+10     	; 0x1308 <Save_Password+0x92>
		__ticks = 1;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 83       	std	Y+5, r24	; 0x05
    1306:	3f c0       	rjmp	.+126    	; 0x1386 <Save_Password+0x110>
	else if (__tmp > 65535)
    1308:	6f 81       	ldd	r22, Y+7	; 0x07
    130a:	78 85       	ldd	r23, Y+8	; 0x08
    130c:	89 85       	ldd	r24, Y+9	; 0x09
    130e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	3f ef       	ldi	r19, 0xFF	; 255
    1314:	4f e7       	ldi	r20, 0x7F	; 127
    1316:	57 e4       	ldi	r21, 0x47	; 71
    1318:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    131c:	18 16       	cp	r1, r24
    131e:	4c f5       	brge	.+82     	; 0x1372 <Save_Password+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1320:	6b 85       	ldd	r22, Y+11	; 0x0b
    1322:	7c 85       	ldd	r23, Y+12	; 0x0c
    1324:	8d 85       	ldd	r24, Y+13	; 0x0d
    1326:	9e 85       	ldd	r25, Y+14	; 0x0e
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e2       	ldi	r20, 0x20	; 32
    132e:	51 e4       	ldi	r21, 0x41	; 65
    1330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
    1348:	0f c0       	rjmp	.+30     	; 0x1368 <Save_Password+0xf2>
    134a:	88 ec       	ldi	r24, 0xC8	; 200
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	9c 83       	std	Y+4, r25	; 0x04
    1350:	8b 83       	std	Y+3, r24	; 0x03
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <Save_Password+0xe0>
    135a:	9c 83       	std	Y+4, r25	; 0x04
    135c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	69 f7       	brne	.-38     	; 0x134a <Save_Password+0xd4>
    1370:	14 c0       	rjmp	.+40     	; 0x139a <Save_Password+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1372:	6f 81       	ldd	r22, Y+7	; 0x07
    1374:	78 85       	ldd	r23, Y+8	; 0x08
    1376:	89 85       	ldd	r24, Y+9	; 0x09
    1378:	9a 85       	ldd	r25, Y+10	; 0x0a
    137a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	9e 83       	std	Y+6, r25	; 0x06
    1384:	8d 83       	std	Y+5, r24	; 0x05
    1386:	8d 81       	ldd	r24, Y+5	; 0x05
    1388:	9e 81       	ldd	r25, Y+6	; 0x06
    138a:	9a 83       	std	Y+2, r25	; 0x02
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	9a 81       	ldd	r25, Y+2	; 0x02
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	f1 f7       	brne	.-4      	; 0x1392 <Save_Password+0x11c>
    1396:	9a 83       	std	Y+2, r25	; 0x02
    1398:	89 83       	std	Y+1, r24	; 0x01
 * Saves the system's password in the EEPROM
 */
void Save_Password(uint8* password)
{
	uint8 i;
	for (i=0 ; i<PASSWORD_SIZE ; i++ )
    139a:	8f 85       	ldd	r24, Y+15	; 0x0f
    139c:	8f 5f       	subi	r24, 0xFF	; 255
    139e:	8f 87       	std	Y+15, r24	; 0x0f
    13a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a2:	85 30       	cpi	r24, 0x05	; 5
    13a4:	08 f4       	brcc	.+2      	; 0x13a8 <Save_Password+0x132>
    13a6:	75 cf       	rjmp	.-278    	; 0x1292 <Save_Password+0x1c>
	{
		EEPROM_WriteByte((SLAVE_ADDRESS)+i,password[i]);
		_delay_ms(10);
	}
}
    13a8:	61 96       	adiw	r28, 0x11	; 17
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <Check_Saved_Password>:

/* Description:
 * Get the password saved in the EEPROM to compare
 */
void Check_Saved_Password(uint8* password)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	61 97       	sbiw	r28, 0x11	; 17
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	99 8b       	std	Y+17, r25	; 0x11
    13d0:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i=0 ; i<PASSWORD_SIZE ; i++)
    13d2:	1f 86       	std	Y+15, r1	; 0x0f
    13d4:	85 c0       	rjmp	.+266    	; 0x14e0 <Check_Saved_Password+0x126>
	{
		EEPROM_ReadByte((SLAVE_ADDRESS)+i,&password[i]);
    13d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	04 96       	adiw	r24, 0x04	; 4
    13de:	ac 01       	movw	r20, r24
    13e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	88 89       	ldd	r24, Y+16	; 0x10
    13e8:	99 89       	ldd	r25, Y+17	; 0x11
    13ea:	28 0f       	add	r18, r24
    13ec:	39 1f       	adc	r19, r25
    13ee:	ca 01       	movw	r24, r20
    13f0:	b9 01       	movw	r22, r18
    13f2:	0e 94 3f 0c 	call	0x187e	; 0x187e <EEPROM_ReadByte>
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a0 e2       	ldi	r26, 0x20	; 32
    13fc:	b1 e4       	ldi	r27, 0x41	; 65
    13fe:	8b 87       	std	Y+11, r24	; 0x0b
    1400:	9c 87       	std	Y+12, r25	; 0x0c
    1402:	ad 87       	std	Y+13, r26	; 0x0d
    1404:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1406:	6b 85       	ldd	r22, Y+11	; 0x0b
    1408:	7c 85       	ldd	r23, Y+12	; 0x0c
    140a:	8d 85       	ldd	r24, Y+13	; 0x0d
    140c:	9e 85       	ldd	r25, Y+14	; 0x0e
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	4a ef       	ldi	r20, 0xFA	; 250
    1414:	54 e4       	ldi	r21, 0x44	; 68
    1416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	8f 83       	std	Y+7, r24	; 0x07
    1420:	98 87       	std	Y+8, r25	; 0x08
    1422:	a9 87       	std	Y+9, r26	; 0x09
    1424:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1426:	6f 81       	ldd	r22, Y+7	; 0x07
    1428:	78 85       	ldd	r23, Y+8	; 0x08
    142a:	89 85       	ldd	r24, Y+9	; 0x09
    142c:	9a 85       	ldd	r25, Y+10	; 0x0a
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e8       	ldi	r20, 0x80	; 128
    1434:	5f e3       	ldi	r21, 0x3F	; 63
    1436:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    143a:	88 23       	and	r24, r24
    143c:	2c f4       	brge	.+10     	; 0x1448 <Check_Saved_Password+0x8e>
		__ticks = 1;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	3f c0       	rjmp	.+126    	; 0x14c6 <Check_Saved_Password+0x10c>
	else if (__tmp > 65535)
    1448:	6f 81       	ldd	r22, Y+7	; 0x07
    144a:	78 85       	ldd	r23, Y+8	; 0x08
    144c:	89 85       	ldd	r24, Y+9	; 0x09
    144e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	3f ef       	ldi	r19, 0xFF	; 255
    1454:	4f e7       	ldi	r20, 0x7F	; 127
    1456:	57 e4       	ldi	r21, 0x47	; 71
    1458:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    145c:	18 16       	cp	r1, r24
    145e:	4c f5       	brge	.+82     	; 0x14b2 <Check_Saved_Password+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1460:	6b 85       	ldd	r22, Y+11	; 0x0b
    1462:	7c 85       	ldd	r23, Y+12	; 0x0c
    1464:	8d 85       	ldd	r24, Y+13	; 0x0d
    1466:	9e 85       	ldd	r25, Y+14	; 0x0e
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	40 e2       	ldi	r20, 0x20	; 32
    146e:	51 e4       	ldi	r21, 0x41	; 65
    1470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	bc 01       	movw	r22, r24
    147a:	cd 01       	movw	r24, r26
    147c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	9e 83       	std	Y+6, r25	; 0x06
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	0f c0       	rjmp	.+30     	; 0x14a8 <Check_Saved_Password+0xee>
    148a:	88 ec       	ldi	r24, 0xC8	; 200
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	9c 83       	std	Y+4, r25	; 0x04
    1490:	8b 83       	std	Y+3, r24	; 0x03
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <Check_Saved_Password+0xdc>
    149a:	9c 83       	std	Y+4, r25	; 0x04
    149c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149e:	8d 81       	ldd	r24, Y+5	; 0x05
    14a0:	9e 81       	ldd	r25, Y+6	; 0x06
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	9e 83       	std	Y+6, r25	; 0x06
    14a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	69 f7       	brne	.-38     	; 0x148a <Check_Saved_Password+0xd0>
    14b0:	14 c0       	rjmp	.+40     	; 0x14da <Check_Saved_Password+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b2:	6f 81       	ldd	r22, Y+7	; 0x07
    14b4:	78 85       	ldd	r23, Y+8	; 0x08
    14b6:	89 85       	ldd	r24, Y+9	; 0x09
    14b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	9e 83       	std	Y+6, r25	; 0x06
    14c4:	8d 83       	std	Y+5, r24	; 0x05
    14c6:	8d 81       	ldd	r24, Y+5	; 0x05
    14c8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ca:	9a 83       	std	Y+2, r25	; 0x02
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	9a 81       	ldd	r25, Y+2	; 0x02
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	f1 f7       	brne	.-4      	; 0x14d2 <Check_Saved_Password+0x118>
    14d6:	9a 83       	std	Y+2, r25	; 0x02
    14d8:	89 83       	std	Y+1, r24	; 0x01
 * Get the password saved in the EEPROM to compare
 */
void Check_Saved_Password(uint8* password)
{
	uint8 i;
	for (i=0 ; i<PASSWORD_SIZE ; i++)
    14da:	8f 85       	ldd	r24, Y+15	; 0x0f
    14dc:	8f 5f       	subi	r24, 0xFF	; 255
    14de:	8f 87       	std	Y+15, r24	; 0x0f
    14e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e2:	85 30       	cpi	r24, 0x05	; 5
    14e4:	08 f4       	brcc	.+2      	; 0x14e8 <Check_Saved_Password+0x12e>
    14e6:	77 cf       	rjmp	.-274    	; 0x13d6 <Check_Saved_Password+0x1c>
	{
		EEPROM_ReadByte((SLAVE_ADDRESS)+i,&password[i]);
		_delay_ms(10);
	}
}
    14e8:	61 96       	adiw	r28, 0x11	; 17
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <Door_Opening>:

/* Description:
 * Function to manage the door operations
 */
void Door_Opening()
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62

	/* Reset timer and Open the door for 15 seconds */
	tick =0;
    1502:	10 92 7a 01 	sts	0x017A, r1
	DcMotor_Rotate(CW,100);
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	64 e6       	ldi	r22, 0x64	; 100
    150a:	0e 94 b8 0b 	call	0x1770	; 0x1770 <DcMotor_Rotate>

	while (tick != 15);
    150e:	80 91 7a 01 	lds	r24, 0x017A
    1512:	8f 30       	cpi	r24, 0x0F	; 15
    1514:	e1 f7       	brne	.-8      	; 0x150e <Door_Opening+0x14>

	/* Reset timer and hold the door for 3 seconds */
	tick =0;
    1516:	10 92 7a 01 	sts	0x017A, r1
	DcMotor_Rotate(STOP,0);
    151a:	82 e0       	ldi	r24, 0x02	; 2
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <DcMotor_Rotate>

	while (tick != 3);
    1522:	80 91 7a 01 	lds	r24, 0x017A
    1526:	83 30       	cpi	r24, 0x03	; 3
    1528:	e1 f7       	brne	.-8      	; 0x1522 <Door_Opening+0x28>

	/* Reset timer and Close the door for 15 seconds */
	tick =0;
    152a:	10 92 7a 01 	sts	0x017A, r1
	DcMotor_Rotate(CCW,100);
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	64 e6       	ldi	r22, 0x64	; 100
    1532:	0e 94 b8 0b 	call	0x1770	; 0x1770 <DcMotor_Rotate>

	while (tick != 15);
    1536:	80 91 7a 01 	lds	r24, 0x017A
    153a:	8f 30       	cpi	r24, 0x0F	; 15
    153c:	e1 f7       	brne	.-8      	; 0x1536 <Door_Opening+0x3c>

	/*Stop the door operation*/
	DcMotor_Rotate(STOP,0);
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	0e 94 b8 0b 	call	0x1770	; 0x1770 <DcMotor_Rotate>
}
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <Wrong_Password>:
/* Description:
 * Function the enables the buzzer in case password has been entered
 * wrong for 3 consecutive times
 */
void Wrong_Password()
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
	/* Turn on the buzzer for 1 minute */
	Buzzer_ON();
    1554:	0e 94 8b 0b 	call	0x1716	; 0x1716 <Buzzer_ON>

	tick =0; /* Reset timer */
    1558:	10 92 7a 01 	sts	0x017A, r1

	while (tick != 60);
    155c:	80 91 7a 01 	lds	r24, 0x017A
    1560:	8c 33       	cpi	r24, 0x3C	; 60
    1562:	e1 f7       	brne	.-8      	; 0x155c <Wrong_Password+0x10>

	Buzzer_OFF();
    1564:	0e 94 97 0b 	call	0x172e	; 0x172e <Buzzer_OFF>
}
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <main>:
/*******************************************************************************
 *                            Main Function                                 *
 *******************************************************************************/

int main()
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	a4 97       	sbiw	r28, 0x24	; 36
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    1582:	af e5       	ldi	r26, 0x5F	; 95
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ef e5       	ldi	r30, 0x5F	; 95
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	80 68       	ori	r24, 0x80	; 128
    158e:	8c 93       	st	X, r24
	 * 8-bit Mode
	 * Parity Check is Disabled
	 * One Stop Bit
	 * Baudrate = 9600 bps
	 */
	UART_ConfigType UART_Configuraions2 = {EIGHT_BIT,NO_PARITY,ONE_STOP_BIT,9600};
    1590:	9e 01       	movw	r18, r28
    1592:	2e 5f       	subi	r18, 0xFE	; 254
    1594:	3f 4f       	sbci	r19, 0xFF	; 255
    1596:	3f 8b       	std	Y+23, r19	; 0x17
    1598:	2e 8b       	std	Y+22, r18	; 0x16
    159a:	83 e7       	ldi	r24, 0x73	; 115
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	99 8f       	std	Y+25, r25	; 0x19
    15a0:	88 8f       	std	Y+24, r24	; 0x18
    15a2:	97 e0       	ldi	r25, 0x07	; 7
    15a4:	9a 8f       	std	Y+26, r25	; 0x1a
    15a6:	e8 8d       	ldd	r30, Y+24	; 0x18
    15a8:	f9 8d       	ldd	r31, Y+25	; 0x19
    15aa:	00 80       	ld	r0, Z
    15ac:	28 8d       	ldd	r18, Y+24	; 0x18
    15ae:	39 8d       	ldd	r19, Y+25	; 0x19
    15b0:	2f 5f       	subi	r18, 0xFF	; 255
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	39 8f       	std	Y+25, r19	; 0x19
    15b6:	28 8f       	std	Y+24, r18	; 0x18
    15b8:	ee 89       	ldd	r30, Y+22	; 0x16
    15ba:	ff 89       	ldd	r31, Y+23	; 0x17
    15bc:	00 82       	st	Z, r0
    15be:	2e 89       	ldd	r18, Y+22	; 0x16
    15c0:	3f 89       	ldd	r19, Y+23	; 0x17
    15c2:	2f 5f       	subi	r18, 0xFF	; 255
    15c4:	3f 4f       	sbci	r19, 0xFF	; 255
    15c6:	3f 8b       	std	Y+23, r19	; 0x17
    15c8:	2e 8b       	std	Y+22, r18	; 0x16
    15ca:	3a 8d       	ldd	r19, Y+26	; 0x1a
    15cc:	31 50       	subi	r19, 0x01	; 1
    15ce:	3a 8f       	std	Y+26, r19	; 0x1a
    15d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15d2:	88 23       	and	r24, r24
    15d4:	41 f7       	brne	.-48     	; 0x15a6 <main+0x38>
	 * Initial Value = 0
	 * Compare Value = 31249
	 * Prescaler = 256
	 * Mode : Compare Mode
	 */
	Timer1_ConfigType Timer1_Configurations2 = {0,31249,PRESCALER_256,COMPARE_MODE};
    15d6:	fe 01       	movw	r30, r28
    15d8:	39 96       	adiw	r30, 0x09	; 9
    15da:	fc 8f       	std	Y+28, r31	; 0x1c
    15dc:	eb 8f       	std	Y+27, r30	; 0x1b
    15de:	2d e6       	ldi	r18, 0x6D	; 109
    15e0:	31 e0       	ldi	r19, 0x01	; 1
    15e2:	3e 8f       	std	Y+30, r19	; 0x1e
    15e4:	2d 8f       	std	Y+29, r18	; 0x1d
    15e6:	36 e0       	ldi	r19, 0x06	; 6
    15e8:	3f 8f       	std	Y+31, r19	; 0x1f
    15ea:	ed 8d       	ldd	r30, Y+29	; 0x1d
    15ec:	fe 8d       	ldd	r31, Y+30	; 0x1e
    15ee:	00 80       	ld	r0, Z
    15f0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    15f2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    15f4:	2f 5f       	subi	r18, 0xFF	; 255
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	3e 8f       	std	Y+30, r19	; 0x1e
    15fa:	2d 8f       	std	Y+29, r18	; 0x1d
    15fc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    15fe:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1600:	00 82       	st	Z, r0
    1602:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1604:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1606:	2f 5f       	subi	r18, 0xFF	; 255
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	3c 8f       	std	Y+28, r19	; 0x1c
    160c:	2b 8f       	std	Y+27, r18	; 0x1b
    160e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1610:	31 50       	subi	r19, 0x01	; 1
    1612:	3f 8f       	std	Y+31, r19	; 0x1f
    1614:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1616:	88 23       	and	r24, r24
    1618:	41 f7       	brne	.-48     	; 0x15ea <main+0x7c>

	/* I2C Configurations:
	 * Slave address of the TWI unit = 0x02
	 * Communication Speed = 400 kbit/s
	 */
	TWI_ConfigType TWI_Configurations = {0x02,400000};
    161a:	fe 01       	movw	r30, r28
    161c:	3f 96       	adiw	r30, 0x0f	; 15
    161e:	f9 a3       	std	Y+33, r31	; 0x21
    1620:	e8 a3       	std	Y+32, r30	; 0x20
    1622:	28 e6       	ldi	r18, 0x68	; 104
    1624:	31 e0       	ldi	r19, 0x01	; 1
    1626:	3b a3       	std	Y+35, r19	; 0x23
    1628:	2a a3       	std	Y+34, r18	; 0x22
    162a:	35 e0       	ldi	r19, 0x05	; 5
    162c:	3c a3       	std	Y+36, r19	; 0x24
    162e:	ea a1       	ldd	r30, Y+34	; 0x22
    1630:	fb a1       	ldd	r31, Y+35	; 0x23
    1632:	00 80       	ld	r0, Z
    1634:	2a a1       	ldd	r18, Y+34	; 0x22
    1636:	3b a1       	ldd	r19, Y+35	; 0x23
    1638:	2f 5f       	subi	r18, 0xFF	; 255
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
    163c:	3b a3       	std	Y+35, r19	; 0x23
    163e:	2a a3       	std	Y+34, r18	; 0x22
    1640:	e8 a1       	ldd	r30, Y+32	; 0x20
    1642:	f9 a1       	ldd	r31, Y+33	; 0x21
    1644:	00 82       	st	Z, r0
    1646:	28 a1       	ldd	r18, Y+32	; 0x20
    1648:	39 a1       	ldd	r19, Y+33	; 0x21
    164a:	2f 5f       	subi	r18, 0xFF	; 255
    164c:	3f 4f       	sbci	r19, 0xFF	; 255
    164e:	39 a3       	std	Y+33, r19	; 0x21
    1650:	28 a3       	std	Y+32, r18	; 0x20
    1652:	3c a1       	ldd	r19, Y+36	; 0x24
    1654:	31 50       	subi	r19, 0x01	; 1
    1656:	3c a3       	std	Y+36, r19	; 0x24
    1658:	8c a1       	ldd	r24, Y+36	; 0x24
    165a:	88 23       	and	r24, r24
    165c:	41 f7       	brne	.-48     	; 0x162e <main+0xc0>

	/*Initialize UART driver with the required configurations*/
	UART_init(&UART_Configuraions2);
    165e:	ce 01       	movw	r24, r28
    1660:	02 96       	adiw	r24, 0x02	; 2
    1662:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <UART_init>
	/*Initialize Timer driver with the required configurations*/
	Timer1_init(&Timer1_Configurations2);
    1666:	ce 01       	movw	r24, r28
    1668:	09 96       	adiw	r24, 0x09	; 9
    166a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Timer1_init>
	/*Initialize I2C driver with the required configurations*/
	TWI_init(&TWI_Configurations);
    166e:	ce 01       	movw	r24, r28
    1670:	0f 96       	adiw	r24, 0x0f	; 15
    1672:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <TWI_init>
	/*Initialize The DC Motor*/
	DcMotor_Init();
    1676:	0e 94 a3 0b 	call	0x1746	; 0x1746 <DcMotor_Init>
	/*Initialize the Buzzer*/
	Buzzer_init();
    167a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <Buzzer_init>
	/* set the TIMER1_ticks to be the callback function */
	Timer1_setCallBack(Timer1_Tick);
    167e:	87 e1       	ldi	r24, 0x17	; 23
    1680:	97 e0       	ldi	r25, 0x07	; 7
    1682:	0e 94 d7 11 	call	0x23ae	; 0x23ae <Timer1_setCallBack>

	while(1){
		/* Receive a command from HMI_ECU to take a specific action */
		command = UART_ReceiveByte();
    1686:	0e 94 93 12 	call	0x2526	; 0x2526 <UART_ReceiveByte>
    168a:	89 83       	std	Y+1, r24	; 0x01

		switch(command){
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	e8 2f       	mov	r30, r24
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	fd 8b       	std	Y+21, r31	; 0x15
    1694:	ec 8b       	std	Y+20, r30	; 0x14
    1696:	2c 89       	ldd	r18, Y+20	; 0x14
    1698:	3d 89       	ldd	r19, Y+21	; 0x15
    169a:	2e 31       	cpi	r18, 0x1E	; 30
    169c:	31 05       	cpc	r19, r1
    169e:	f1 f0       	breq	.+60     	; 0x16dc <main+0x16e>
    16a0:	8c 89       	ldd	r24, Y+20	; 0x14
    16a2:	9d 89       	ldd	r25, Y+21	; 0x15
    16a4:	8f 31       	cpi	r24, 0x1F	; 31
    16a6:	91 05       	cpc	r25, r1
    16a8:	5c f4       	brge	.+22     	; 0x16c0 <main+0x152>
    16aa:	ec 89       	ldd	r30, Y+20	; 0x14
    16ac:	fd 89       	ldd	r31, Y+21	; 0x15
    16ae:	ea 30       	cpi	r30, 0x0A	; 10
    16b0:	f1 05       	cpc	r31, r1
    16b2:	89 f0       	breq	.+34     	; 0x16d6 <main+0x168>
    16b4:	2c 89       	ldd	r18, Y+20	; 0x14
    16b6:	3d 89       	ldd	r19, Y+21	; 0x15
    16b8:	24 31       	cpi	r18, 0x14	; 20
    16ba:	31 05       	cpc	r19, r1
    16bc:	c1 f0       	breq	.+48     	; 0x16ee <main+0x180>
    16be:	e3 cf       	rjmp	.-58     	; 0x1686 <main+0x118>
    16c0:	8c 89       	ldd	r24, Y+20	; 0x14
    16c2:	9d 89       	ldd	r25, Y+21	; 0x15
    16c4:	88 32       	cpi	r24, 0x28	; 40
    16c6:	91 05       	cpc	r25, r1
    16c8:	61 f0       	breq	.+24     	; 0x16e2 <main+0x174>
    16ca:	ec 89       	ldd	r30, Y+20	; 0x14
    16cc:	fd 89       	ldd	r31, Y+21	; 0x15
    16ce:	e2 33       	cpi	r30, 0x32	; 50
    16d0:	f1 05       	cpc	r31, r1
    16d2:	51 f0       	breq	.+20     	; 0x16e8 <main+0x17a>
    16d4:	d8 cf       	rjmp	.-80     	; 0x1686 <main+0x118>
		case FIRST_TIME_PASSWORD:
			/* The user needs to enter the password for the first time */
			SetNewPassword();
    16d6:	0e 94 23 07 	call	0xe46	; 0xe46 <SetNewPassword>
    16da:	d5 cf       	rjmp	.-86     	; 0x1686 <main+0x118>
			break;
		case PASSWORD_CHECK:
			/* The user needs to verify the password to open the door or change password */
			VerifyPassword();
    16dc:	0e 94 74 08 	call	0x10e8	; 0x10e8 <VerifyPassword>
    16e0:	d2 cf       	rjmp	.-92     	; 0x1686 <main+0x118>
			break;
		case OPEN_DOOR:
			/* The user need to open the door */
			Door_Opening();
    16e2:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <Door_Opening>
    16e6:	cf cf       	rjmp	.-98     	; 0x1686 <main+0x118>
			break;
		case WRONG_PASS:
			/* The user entered the password wrong 3 consecutive times, Enable ALARM mode */
			Wrong_Password();
    16e8:	0e 94 a6 0a 	call	0x154c	; 0x154c <Wrong_Password>
    16ec:	cc cf       	rjmp	.-104    	; 0x1686 <main+0x118>
			break;
		case CHANGE_PASSWORD:
			/* The user needs to change the password */
			SetNewPassword();
    16ee:	0e 94 23 07 	call	0xe46	; 0xe46 <SetNewPassword>
    16f2:	c9 cf       	rjmp	.-110    	; 0x1686 <main+0x118>

000016f4 <Buzzer_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Buzzer_init()
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
	GPIO_SetPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    16fc:	83 e0       	ldi	r24, 0x03	; 3
    16fe:	62 e0       	ldi	r22, 0x02	; 2
    1700:	41 e0       	ldi	r20, 0x01	; 1
    1702:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_SetPinDirection>
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    1706:	83 e0       	ldi	r24, 0x03	; 3
    1708:	62 e0       	ldi	r22, 0x02	; 2
    170a:	40 e0       	ldi	r20, 0x00	; 0
    170c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <GPIO_WritePin>
}
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <Buzzer_ON>:

void Buzzer_ON(void)
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    171e:	83 e0       	ldi	r24, 0x03	; 3
    1720:	62 e0       	ldi	r22, 0x02	; 2
    1722:	41 e0       	ldi	r20, 0x01	; 1
    1724:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <GPIO_WritePin>
}
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <Buzzer_OFF>:

void Buzzer_OFF(void)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
	GPIO_WritePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	62 e0       	ldi	r22, 0x02	; 2
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <GPIO_WritePin>
}
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <DcMotor_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DcMotor_Init(void)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * The Function responsible for setup the direction for the two
	 * motor pins through the GPIO driver.
	 */
	GPIO_SetPinDirection(MOTOR_PORT_ID,MOTOR_PIN1_ID,PIN_OUTPUT);
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_SetPinDirection>
	GPIO_SetPinDirection(MOTOR_PORT_ID,MOTOR_PIN2_ID,PIN_OUTPUT);
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	61 e0       	ldi	r22, 0x01	; 1
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_SetPinDirection>

	/*Stop at the DC-Motor at the beginning*/
	DcMotor_Rotate(STOP,0);
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	0e 94 b8 0b 	call	0x1770	; 0x1770 <DcMotor_Rotate>
}
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <DcMotor_Rotate>:


void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <DcMotor_Rotate+0x6>
    1776:	00 d0       	rcall	.+0      	; 0x1778 <DcMotor_Rotate+0x8>
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	6a 83       	std	Y+2, r22	; 0x02
	/* Calculating the speed of motor through the PWM function */
	PWM_Timer0_Start(speed);
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	0e 94 94 10 	call	0x2128	; 0x2128 <PWM_Timer0_Start>

	switch(state){
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	3c 83       	std	Y+4, r19	; 0x04
    178e:	2b 83       	std	Y+3, r18	; 0x03
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	91 05       	cpc	r25, r1
    1798:	01 f1       	breq	.+64     	; 0x17da <DcMotor_Rotate+0x6a>
    179a:	2b 81       	ldd	r18, Y+3	; 0x03
    179c:	3c 81       	ldd	r19, Y+4	; 0x04
    179e:	22 30       	cpi	r18, 0x02	; 2
    17a0:	31 05       	cpc	r19, r1
    17a2:	29 f0       	breq	.+10     	; 0x17ae <DcMotor_Rotate+0x3e>
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	61 f0       	breq	.+24     	; 0x17c4 <DcMotor_Rotate+0x54>
    17ac:	20 c0       	rjmp	.+64     	; 0x17ee <DcMotor_Rotate+0x7e>
	case STOP:
		GPIO_WritePin(MOTOR_PORT_ID,MOTOR_PIN1_ID,LOGIC_LOW);
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <GPIO_WritePin>
		GPIO_WritePin(MOTOR_PORT_ID,MOTOR_PIN2_ID,LOGIC_LOW);
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <GPIO_WritePin>
    17c2:	15 c0       	rjmp	.+42     	; 0x17ee <DcMotor_Rotate+0x7e>
		break;
	case CW:
		GPIO_WritePin(MOTOR_PORT_ID,MOTOR_PIN1_ID,LOGIC_LOW);
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <GPIO_WritePin>
		GPIO_WritePin(MOTOR_PORT_ID,MOTOR_PIN2_ID,LOGIC_HIGH);
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	61 e0       	ldi	r22, 0x01	; 1
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <GPIO_WritePin>
    17d8:	0a c0       	rjmp	.+20     	; 0x17ee <DcMotor_Rotate+0x7e>
		break;
	case CCW:
		GPIO_WritePin(MOTOR_PORT_ID,MOTOR_PIN1_ID,LOGIC_HIGH);
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	41 e0       	ldi	r20, 0x01	; 1
    17e0:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <GPIO_WritePin>
		GPIO_WritePin(MOTOR_PORT_ID,MOTOR_PIN2_ID,LOGIC_LOW);
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	61 e0       	ldi	r22, 0x01	; 1
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <GPIO_WritePin>
		break;
	}

}
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <EEPROM_WriteByte>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 EEPROM_WriteByte(uint16 u16addr, uint8 u8data)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <EEPROM_WriteByte+0x6>
    1802:	00 d0       	rcall	.+0      	; 0x1804 <EEPROM_WriteByte+0x8>
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_Start();
    180e:	0e 94 2d 10 	call	0x205a	; 0x205a <TWI_Start>
	if (TWI_GetStatus() != TWI_START){
    1812:	0e 94 85 10 	call	0x210a	; 0x210a <TWI_GetStatus>
    1816:	88 30       	cpi	r24, 0x08	; 8
    1818:	11 f0       	breq	.+4      	; 0x181e <EEPROM_WriteByte+0x22>
		return ERROR;
    181a:	1c 82       	std	Y+4, r1	; 0x04
    181c:	28 c0       	rjmp	.+80     	; 0x186e <EEPROM_WriteByte+0x72>
	}

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	* memory location address and R/W=0 (write) */
	TWI_WriteByte((uint8)((0xA0) | ((u16addr & 0x0700) >> 7)));
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	80 70       	andi	r24, 0x00	; 0
    1824:	97 70       	andi	r25, 0x07	; 7
    1826:	88 0f       	add	r24, r24
    1828:	89 2f       	mov	r24, r25
    182a:	88 1f       	adc	r24, r24
    182c:	99 0b       	sbc	r25, r25
    182e:	91 95       	neg	r25
    1830:	80 6a       	ori	r24, 0xA0	; 160
    1832:	0e 94 48 10 	call	0x2090	; 0x2090 <TWI_WriteByte>
	if (TWI_GetStatus() != TWI_MT_SLA_W_ACK){
    1836:	0e 94 85 10 	call	0x210a	; 0x210a <TWI_GetStatus>
    183a:	88 31       	cpi	r24, 0x18	; 24
    183c:	11 f0       	breq	.+4      	; 0x1842 <EEPROM_WriteByte+0x46>
		return ERROR;
    183e:	1c 82       	std	Y+4, r1	; 0x04
    1840:	16 c0       	rjmp	.+44     	; 0x186e <EEPROM_WriteByte+0x72>
	}

	/* Send the required memory location address */
	TWI_WriteByte((uint8)(u16addr));
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	0e 94 48 10 	call	0x2090	; 0x2090 <TWI_WriteByte>
	if (TWI_GetStatus() != TWI_MT_DATA_ACK){
    1848:	0e 94 85 10 	call	0x210a	; 0x210a <TWI_GetStatus>
    184c:	88 32       	cpi	r24, 0x28	; 40
    184e:	11 f0       	breq	.+4      	; 0x1854 <EEPROM_WriteByte+0x58>
		return ERROR;
    1850:	1c 82       	std	Y+4, r1	; 0x04
    1852:	0d c0       	rjmp	.+26     	; 0x186e <EEPROM_WriteByte+0x72>
	}

	/* write byte to EEPROM */
	TWI_WriteByte(u8data);
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	0e 94 48 10 	call	0x2090	; 0x2090 <TWI_WriteByte>
	if (TWI_GetStatus() != TWI_MT_DATA_ACK){
    185a:	0e 94 85 10 	call	0x210a	; 0x210a <TWI_GetStatus>
    185e:	88 32       	cpi	r24, 0x28	; 40
    1860:	11 f0       	breq	.+4      	; 0x1866 <EEPROM_WriteByte+0x6a>
		return ERROR;
    1862:	1c 82       	std	Y+4, r1	; 0x04
    1864:	04 c0       	rjmp	.+8      	; 0x186e <EEPROM_WriteByte+0x72>
	}

	/* Send the Stop Bit */
	TWI_Stop();
    1866:	0e 94 3d 10 	call	0x207a	; 0x207a <TWI_Stop>

	return SUCCESS;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	8c 83       	std	Y+4, r24	; 0x04
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <EEPROM_ReadByte>:

uint8 EEPROM_ReadByte(uint16 u16addr, uint8 *u8data)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <EEPROM_ReadByte+0x6>
    1884:	00 d0       	rcall	.+0      	; 0x1886 <EEPROM_ReadByte+0x8>
    1886:	0f 92       	push	r0
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	7c 83       	std	Y+4, r23	; 0x04
    1892:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_Start();
    1894:	0e 94 2d 10 	call	0x205a	; 0x205a <TWI_Start>
	if (TWI_GetStatus() != TWI_START){
    1898:	0e 94 85 10 	call	0x210a	; 0x210a <TWI_GetStatus>
    189c:	88 30       	cpi	r24, 0x08	; 8
    189e:	11 f0       	breq	.+4      	; 0x18a4 <EEPROM_ReadByte+0x26>
		return ERROR;
    18a0:	1d 82       	std	Y+5, r1	; 0x05
    18a2:	44 c0       	rjmp	.+136    	; 0x192c <EEPROM_ReadByte+0xae>
	}

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
	TWI_WriteByte((uint8)((0xA0) | ((u16addr & 0x0700) >> 7)));
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	9a 81       	ldd	r25, Y+2	; 0x02
    18a8:	80 70       	andi	r24, 0x00	; 0
    18aa:	97 70       	andi	r25, 0x07	; 7
    18ac:	88 0f       	add	r24, r24
    18ae:	89 2f       	mov	r24, r25
    18b0:	88 1f       	adc	r24, r24
    18b2:	99 0b       	sbc	r25, r25
    18b4:	91 95       	neg	r25
    18b6:	80 6a       	ori	r24, 0xA0	; 160
    18b8:	0e 94 48 10 	call	0x2090	; 0x2090 <TWI_WriteByte>
	if (TWI_GetStatus() != TWI_MT_SLA_W_ACK){
    18bc:	0e 94 85 10 	call	0x210a	; 0x210a <TWI_GetStatus>
    18c0:	88 31       	cpi	r24, 0x18	; 24
    18c2:	11 f0       	breq	.+4      	; 0x18c8 <EEPROM_ReadByte+0x4a>
		return ERROR;
    18c4:	1d 82       	std	Y+5, r1	; 0x05
    18c6:	32 c0       	rjmp	.+100    	; 0x192c <EEPROM_ReadByte+0xae>
	}

	/* Send the required memory location address */
	TWI_WriteByte((uint8)(u16addr));
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	0e 94 48 10 	call	0x2090	; 0x2090 <TWI_WriteByte>
	if (TWI_GetStatus() != TWI_MT_DATA_ACK){
    18ce:	0e 94 85 10 	call	0x210a	; 0x210a <TWI_GetStatus>
    18d2:	88 32       	cpi	r24, 0x28	; 40
    18d4:	11 f0       	breq	.+4      	; 0x18da <EEPROM_ReadByte+0x5c>
		return ERROR;
    18d6:	1d 82       	std	Y+5, r1	; 0x05
    18d8:	29 c0       	rjmp	.+82     	; 0x192c <EEPROM_ReadByte+0xae>
	}

	/* Send the Repeated Start Bit */
	TWI_Start();
    18da:	0e 94 2d 10 	call	0x205a	; 0x205a <TWI_Start>
	if (TWI_GetStatus() != TWI_REP_START){
    18de:	0e 94 85 10 	call	0x210a	; 0x210a <TWI_GetStatus>
    18e2:	80 31       	cpi	r24, 0x10	; 16
    18e4:	11 f0       	breq	.+4      	; 0x18ea <EEPROM_ReadByte+0x6c>
		return ERROR;
    18e6:	1d 82       	std	Y+5, r1	; 0x05
    18e8:	21 c0       	rjmp	.+66     	; 0x192c <EEPROM_ReadByte+0xae>
	}

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
	TWI_WriteByte((uint8)((0xA0) | ((u16addr & 0x0700) >> 7) | 1));
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	9a 81       	ldd	r25, Y+2	; 0x02
    18ee:	80 70       	andi	r24, 0x00	; 0
    18f0:	97 70       	andi	r25, 0x07	; 7
    18f2:	88 0f       	add	r24, r24
    18f4:	89 2f       	mov	r24, r25
    18f6:	88 1f       	adc	r24, r24
    18f8:	99 0b       	sbc	r25, r25
    18fa:	91 95       	neg	r25
    18fc:	81 6a       	ori	r24, 0xA1	; 161
    18fe:	0e 94 48 10 	call	0x2090	; 0x2090 <TWI_WriteByte>
	if (TWI_GetStatus() != TWI_MT_SLA_R_ACK){
    1902:	0e 94 85 10 	call	0x210a	; 0x210a <TWI_GetStatus>
    1906:	80 34       	cpi	r24, 0x40	; 64
    1908:	11 f0       	breq	.+4      	; 0x190e <EEPROM_ReadByte+0x90>
		return ERROR;
    190a:	1d 82       	std	Y+5, r1	; 0x05
    190c:	0f c0       	rjmp	.+30     	; 0x192c <EEPROM_ReadByte+0xae>
	}

	/* Read Byte from Memory without send ACK */
	*u8data = TWI_ReadByteWithNACK();
    190e:	0e 94 72 10 	call	0x20e4	; 0x20e4 <TWI_ReadByteWithNACK>
    1912:	eb 81       	ldd	r30, Y+3	; 0x03
    1914:	fc 81       	ldd	r31, Y+4	; 0x04
    1916:	80 83       	st	Z, r24
    if (TWI_GetStatus() != TWI_MR_DATA_NACK){
    1918:	0e 94 85 10 	call	0x210a	; 0x210a <TWI_GetStatus>
    191c:	88 35       	cpi	r24, 0x58	; 88
    191e:	11 f0       	breq	.+4      	; 0x1924 <EEPROM_ReadByte+0xa6>
        return ERROR;
    1920:	1d 82       	std	Y+5, r1	; 0x05
    1922:	04 c0       	rjmp	.+8      	; 0x192c <EEPROM_ReadByte+0xae>
    }

    /* Send the Stop Bit */
    TWI_Stop();
    1924:	0e 94 3d 10 	call	0x207a	; 0x207a <TWI_Stop>

    return SUCCESS;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	8d 83       	std	Y+5, r24	; 0x05
    192c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <GPIO_SetPinDirection>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void GPIO_SetPinDirection(uint8 port_num , uint8 pin_num , GPIO_PinDirectionType direction)
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	00 d0       	rcall	.+0      	; 0x1944 <GPIO_SetPinDirection+0x6>
    1944:	00 d0       	rcall	.+0      	; 0x1946 <GPIO_SetPinDirection+0x8>
    1946:	0f 92       	push	r0
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	6a 83       	std	Y+2, r22	; 0x02
    1950:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)){
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	84 30       	cpi	r24, 0x04	; 4
    1956:	08 f0       	brcs	.+2      	; 0x195a <GPIO_SetPinDirection+0x1c>
    1958:	d5 c0       	rjmp	.+426    	; 0x1b04 <GPIO_SetPinDirection+0x1c6>
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	88 30       	cpi	r24, 0x08	; 8
    195e:	08 f0       	brcs	.+2      	; 0x1962 <GPIO_SetPinDirection+0x24>
    1960:	d1 c0       	rjmp	.+418    	; 0x1b04 <GPIO_SetPinDirection+0x1c6>

	}
	else {
		switch(port_num){
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	3d 83       	std	Y+5, r19	; 0x05
    196a:	2c 83       	std	Y+4, r18	; 0x04
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	9d 81       	ldd	r25, Y+5	; 0x05
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	91 05       	cpc	r25, r1
    1974:	09 f4       	brne	.+2      	; 0x1978 <GPIO_SetPinDirection+0x3a>
    1976:	43 c0       	rjmp	.+134    	; 0x19fe <GPIO_SetPinDirection+0xc0>
    1978:	2c 81       	ldd	r18, Y+4	; 0x04
    197a:	3d 81       	ldd	r19, Y+5	; 0x05
    197c:	22 30       	cpi	r18, 0x02	; 2
    197e:	31 05       	cpc	r19, r1
    1980:	2c f4       	brge	.+10     	; 0x198c <GPIO_SetPinDirection+0x4e>
    1982:	8c 81       	ldd	r24, Y+4	; 0x04
    1984:	9d 81       	ldd	r25, Y+5	; 0x05
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	71 f0       	breq	.+28     	; 0x19a6 <GPIO_SetPinDirection+0x68>
    198a:	bc c0       	rjmp	.+376    	; 0x1b04 <GPIO_SetPinDirection+0x1c6>
    198c:	2c 81       	ldd	r18, Y+4	; 0x04
    198e:	3d 81       	ldd	r19, Y+5	; 0x05
    1990:	22 30       	cpi	r18, 0x02	; 2
    1992:	31 05       	cpc	r19, r1
    1994:	09 f4       	brne	.+2      	; 0x1998 <GPIO_SetPinDirection+0x5a>
    1996:	5f c0       	rjmp	.+190    	; 0x1a56 <GPIO_SetPinDirection+0x118>
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	9d 81       	ldd	r25, Y+5	; 0x05
    199c:	83 30       	cpi	r24, 0x03	; 3
    199e:	91 05       	cpc	r25, r1
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <GPIO_SetPinDirection+0x66>
    19a2:	85 c0       	rjmp	.+266    	; 0x1aae <GPIO_SetPinDirection+0x170>
    19a4:	af c0       	rjmp	.+350    	; 0x1b04 <GPIO_SetPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT){
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	a1 f4       	brne	.+40     	; 0x19d4 <GPIO_SetPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    19ac:	aa e3       	ldi	r26, 0x3A	; 58
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	ea e3       	ldi	r30, 0x3A	; 58
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	48 2f       	mov	r20, r24
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	02 2e       	mov	r0, r18
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <GPIO_SetPinDirection+0x8c>
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	0a 94       	dec	r0
    19cc:	e2 f7       	brpl	.-8      	; 0x19c6 <GPIO_SetPinDirection+0x88>
    19ce:	84 2b       	or	r24, r20
    19d0:	8c 93       	st	X, r24
    19d2:	98 c0       	rjmp	.+304    	; 0x1b04 <GPIO_SetPinDirection+0x1c6>
			}
			else CLEAR_BIT(DDRA,pin_num);
    19d4:	aa e3       	ldi	r26, 0x3A	; 58
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	ea e3       	ldi	r30, 0x3A	; 58
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 2e       	mov	r0, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <GPIO_SetPinDirection+0xb4>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	0a 94       	dec	r0
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <GPIO_SetPinDirection+0xb0>
    19f6:	80 95       	com	r24
    19f8:	84 23       	and	r24, r20
    19fa:	8c 93       	st	X, r24
    19fc:	83 c0       	rjmp	.+262    	; 0x1b04 <GPIO_SetPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT){
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	81 30       	cpi	r24, 0x01	; 1
    1a02:	a1 f4       	brne	.+40     	; 0x1a2c <GPIO_SetPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
    1a04:	a7 e3       	ldi	r26, 0x37	; 55
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e7 e3       	ldi	r30, 0x37	; 55
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 2e       	mov	r0, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <GPIO_SetPinDirection+0xe4>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	0a 94       	dec	r0
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <GPIO_SetPinDirection+0xe0>
    1a26:	84 2b       	or	r24, r20
    1a28:	8c 93       	st	X, r24
    1a2a:	6c c0       	rjmp	.+216    	; 0x1b04 <GPIO_SetPinDirection+0x1c6>
			}
			else CLEAR_BIT(DDRB,pin_num);
    1a2c:	a7 e3       	ldi	r26, 0x37	; 55
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e7 e3       	ldi	r30, 0x37	; 55
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	02 2e       	mov	r0, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <GPIO_SetPinDirection+0x10c>
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	0a 94       	dec	r0
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <GPIO_SetPinDirection+0x108>
    1a4e:	80 95       	com	r24
    1a50:	84 23       	and	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	57 c0       	rjmp	.+174    	; 0x1b04 <GPIO_SetPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT){
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	a1 f4       	brne	.+40     	; 0x1a84 <GPIO_SetPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
    1a5c:	a4 e3       	ldi	r26, 0x34	; 52
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e4 e3       	ldi	r30, 0x34	; 52
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	48 2f       	mov	r20, r24
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	02 2e       	mov	r0, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <GPIO_SetPinDirection+0x13c>
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	0a 94       	dec	r0
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <GPIO_SetPinDirection+0x138>
    1a7e:	84 2b       	or	r24, r20
    1a80:	8c 93       	st	X, r24
    1a82:	40 c0       	rjmp	.+128    	; 0x1b04 <GPIO_SetPinDirection+0x1c6>
			}
			else CLEAR_BIT(DDRC,pin_num);
    1a84:	a4 e3       	ldi	r26, 0x34	; 52
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e4 e3       	ldi	r30, 0x34	; 52
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	48 2f       	mov	r20, r24
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	02 2e       	mov	r0, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <GPIO_SetPinDirection+0x164>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	0a 94       	dec	r0
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <GPIO_SetPinDirection+0x160>
    1aa6:	80 95       	com	r24
    1aa8:	84 23       	and	r24, r20
    1aaa:	8c 93       	st	X, r24
    1aac:	2b c0       	rjmp	.+86     	; 0x1b04 <GPIO_SetPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT){
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	a1 f4       	brne	.+40     	; 0x1adc <GPIO_SetPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
    1ab4:	a1 e3       	ldi	r26, 0x31	; 49
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e1 e3       	ldi	r30, 0x31	; 49
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 2e       	mov	r0, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <GPIO_SetPinDirection+0x194>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	0a 94       	dec	r0
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <GPIO_SetPinDirection+0x190>
    1ad6:	84 2b       	or	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	14 c0       	rjmp	.+40     	; 0x1b04 <GPIO_SetPinDirection+0x1c6>
			}
			else CLEAR_BIT(DDRD,pin_num);
    1adc:	a1 e3       	ldi	r26, 0x31	; 49
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e1 e3       	ldi	r30, 0x31	; 49
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <GPIO_SetPinDirection+0x1bc>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <GPIO_SetPinDirection+0x1b8>
    1afe:	80 95       	com	r24
    1b00:	84 23       	and	r24, r20
    1b02:	8c 93       	st	X, r24
			break;
		}
	}
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <GPIO_WritePin>:


void GPIO_WritePin (uint8 port_num , uint8 pin_num , uint8 value)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <GPIO_WritePin+0x6>
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <GPIO_WritePin+0x8>
    1b1c:	0f 92       	push	r0
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	6a 83       	std	Y+2, r22	; 0x02
    1b26:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	84 30       	cpi	r24, 0x04	; 4
    1b2c:	08 f0       	brcs	.+2      	; 0x1b30 <GPIO_WritePin+0x1c>
    1b2e:	d5 c0       	rjmp	.+426    	; 0x1cda <GPIO_WritePin+0x1c6>
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	88 30       	cpi	r24, 0x08	; 8
    1b34:	08 f0       	brcs	.+2      	; 0x1b38 <GPIO_WritePin+0x24>
    1b36:	d1 c0       	rjmp	.+418    	; 0x1cda <GPIO_WritePin+0x1c6>
	{

	}
	else
	{
		switch (port_num){
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	3d 83       	std	Y+5, r19	; 0x05
    1b40:	2c 83       	std	Y+4, r18	; 0x04
    1b42:	8c 81       	ldd	r24, Y+4	; 0x04
    1b44:	9d 81       	ldd	r25, Y+5	; 0x05
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	91 05       	cpc	r25, r1
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <GPIO_WritePin+0x3a>
    1b4c:	43 c0       	rjmp	.+134    	; 0x1bd4 <GPIO_WritePin+0xc0>
    1b4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b50:	3d 81       	ldd	r19, Y+5	; 0x05
    1b52:	22 30       	cpi	r18, 0x02	; 2
    1b54:	31 05       	cpc	r19, r1
    1b56:	2c f4       	brge	.+10     	; 0x1b62 <GPIO_WritePin+0x4e>
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	71 f0       	breq	.+28     	; 0x1b7c <GPIO_WritePin+0x68>
    1b60:	bc c0       	rjmp	.+376    	; 0x1cda <GPIO_WritePin+0x1c6>
    1b62:	2c 81       	ldd	r18, Y+4	; 0x04
    1b64:	3d 81       	ldd	r19, Y+5	; 0x05
    1b66:	22 30       	cpi	r18, 0x02	; 2
    1b68:	31 05       	cpc	r19, r1
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <GPIO_WritePin+0x5a>
    1b6c:	5f c0       	rjmp	.+190    	; 0x1c2c <GPIO_WritePin+0x118>
    1b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b70:	9d 81       	ldd	r25, Y+5	; 0x05
    1b72:	83 30       	cpi	r24, 0x03	; 3
    1b74:	91 05       	cpc	r25, r1
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <GPIO_WritePin+0x66>
    1b78:	85 c0       	rjmp	.+266    	; 0x1c84 <GPIO_WritePin+0x170>
    1b7a:	af c0       	rjmp	.+350    	; 0x1cda <GPIO_WritePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_HIGH){
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	a1 f4       	brne	.+40     	; 0x1baa <GPIO_WritePin+0x96>
				SET_BIT(PORTA,pin_num);
    1b82:	ab e3       	ldi	r26, 0x3B	; 59
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	eb e3       	ldi	r30, 0x3B	; 59
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	48 2f       	mov	r20, r24
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	02 2e       	mov	r0, r18
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <GPIO_WritePin+0x8c>
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	0a 94       	dec	r0
    1ba2:	e2 f7       	brpl	.-8      	; 0x1b9c <GPIO_WritePin+0x88>
    1ba4:	84 2b       	or	r24, r20
    1ba6:	8c 93       	st	X, r24
    1ba8:	98 c0       	rjmp	.+304    	; 0x1cda <GPIO_WritePin+0x1c6>
			}
			else CLEAR_BIT(PORTA,pin_num);
    1baa:	ab e3       	ldi	r26, 0x3B	; 59
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	eb e3       	ldi	r30, 0x3B	; 59
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	48 2f       	mov	r20, r24
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	02 2e       	mov	r0, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <GPIO_WritePin+0xb4>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	0a 94       	dec	r0
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <GPIO_WritePin+0xb0>
    1bcc:	80 95       	com	r24
    1bce:	84 23       	and	r24, r20
    1bd0:	8c 93       	st	X, r24
    1bd2:	83 c0       	rjmp	.+262    	; 0x1cda <GPIO_WritePin+0x1c6>
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH){
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	81 30       	cpi	r24, 0x01	; 1
    1bd8:	a1 f4       	brne	.+40     	; 0x1c02 <GPIO_WritePin+0xee>
				SET_BIT(PORTB,pin_num);
    1bda:	a8 e3       	ldi	r26, 0x38	; 56
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e8 e3       	ldi	r30, 0x38	; 56
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	48 2f       	mov	r20, r24
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	02 2e       	mov	r0, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <GPIO_WritePin+0xe4>
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	0a 94       	dec	r0
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <GPIO_WritePin+0xe0>
    1bfc:	84 2b       	or	r24, r20
    1bfe:	8c 93       	st	X, r24
    1c00:	6c c0       	rjmp	.+216    	; 0x1cda <GPIO_WritePin+0x1c6>
			}
			else CLEAR_BIT(PORTB,pin_num);
    1c02:	a8 e3       	ldi	r26, 0x38	; 56
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e8 e3       	ldi	r30, 0x38	; 56
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	48 2f       	mov	r20, r24
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	02 2e       	mov	r0, r18
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <GPIO_WritePin+0x10c>
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	0a 94       	dec	r0
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <GPIO_WritePin+0x108>
    1c24:	80 95       	com	r24
    1c26:	84 23       	and	r24, r20
    1c28:	8c 93       	st	X, r24
    1c2a:	57 c0       	rjmp	.+174    	; 0x1cda <GPIO_WritePin+0x1c6>
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH){
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	81 30       	cpi	r24, 0x01	; 1
    1c30:	a1 f4       	brne	.+40     	; 0x1c5a <GPIO_WritePin+0x146>
				SET_BIT(PORTC,pin_num);
    1c32:	a5 e3       	ldi	r26, 0x35	; 53
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e5 e3       	ldi	r30, 0x35	; 53
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	48 2f       	mov	r20, r24
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	02 2e       	mov	r0, r18
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <GPIO_WritePin+0x13c>
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	0a 94       	dec	r0
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <GPIO_WritePin+0x138>
    1c54:	84 2b       	or	r24, r20
    1c56:	8c 93       	st	X, r24
    1c58:	40 c0       	rjmp	.+128    	; 0x1cda <GPIO_WritePin+0x1c6>
			}
			else CLEAR_BIT(PORTC,pin_num);
    1c5a:	a5 e3       	ldi	r26, 0x35	; 53
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e5 e3       	ldi	r30, 0x35	; 53
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	48 2f       	mov	r20, r24
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	02 2e       	mov	r0, r18
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <GPIO_WritePin+0x164>
    1c74:	88 0f       	add	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	0a 94       	dec	r0
    1c7a:	e2 f7       	brpl	.-8      	; 0x1c74 <GPIO_WritePin+0x160>
    1c7c:	80 95       	com	r24
    1c7e:	84 23       	and	r24, r20
    1c80:	8c 93       	st	X, r24
    1c82:	2b c0       	rjmp	.+86     	; 0x1cda <GPIO_WritePin+0x1c6>
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH){
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	a1 f4       	brne	.+40     	; 0x1cb2 <GPIO_WritePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1c8a:	a2 e3       	ldi	r26, 0x32	; 50
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e2 e3       	ldi	r30, 0x32	; 50
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	48 2f       	mov	r20, r24
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 2e       	mov	r0, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <GPIO_WritePin+0x194>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <GPIO_WritePin+0x190>
    1cac:	84 2b       	or	r24, r20
    1cae:	8c 93       	st	X, r24
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <GPIO_WritePin+0x1c6>
			}
			else CLEAR_BIT(PORTD,pin_num);
    1cb2:	a2 e3       	ldi	r26, 0x32	; 50
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e2 e3       	ldi	r30, 0x32	; 50
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	48 2f       	mov	r20, r24
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	02 2e       	mov	r0, r18
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <GPIO_WritePin+0x1bc>
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	0a 94       	dec	r0
    1cd2:	e2 f7       	brpl	.-8      	; 0x1ccc <GPIO_WritePin+0x1b8>
    1cd4:	80 95       	com	r24
    1cd6:	84 23       	and	r24, r20
    1cd8:	8c 93       	st	X, r24
			break;
		}
	}
}
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <GPIO_ReadPin>:


uint8 GPIO_ReadPin(uint8 port_num , uint8 pin_num)
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <GPIO_ReadPin+0x6>
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <GPIO_ReadPin+0x8>
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <GPIO_ReadPin+0xa>
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	8a 83       	std	Y+2, r24	; 0x02
    1cfa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = 0;
    1cfc:	19 82       	std	Y+1, r1	; 0x01

	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	84 30       	cpi	r24, 0x04	; 4
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <GPIO_ReadPin+0x1c>
    1d04:	90 c0       	rjmp	.+288    	; 0x1e26 <GPIO_ReadPin+0x13c>
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	88 30       	cpi	r24, 0x08	; 8
    1d0a:	08 f0       	brcs	.+2      	; 0x1d0e <GPIO_ReadPin+0x24>
    1d0c:	8c c0       	rjmp	.+280    	; 0x1e26 <GPIO_ReadPin+0x13c>
	{

	}
	else
	{
		switch(port_num){
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	3e 83       	std	Y+6, r19	; 0x06
    1d16:	2d 83       	std	Y+5, r18	; 0x05
    1d18:	4d 81       	ldd	r20, Y+5	; 0x05
    1d1a:	5e 81       	ldd	r21, Y+6	; 0x06
    1d1c:	41 30       	cpi	r20, 0x01	; 1
    1d1e:	51 05       	cpc	r21, r1
    1d20:	a1 f1       	breq	.+104    	; 0x1d8a <GPIO_ReadPin+0xa0>
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	82 30       	cpi	r24, 0x02	; 2
    1d28:	91 05       	cpc	r25, r1
    1d2a:	34 f4       	brge	.+12     	; 0x1d38 <GPIO_ReadPin+0x4e>
    1d2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d30:	21 15       	cp	r18, r1
    1d32:	31 05       	cpc	r19, r1
    1d34:	71 f0       	breq	.+28     	; 0x1d52 <GPIO_ReadPin+0x68>
    1d36:	77 c0       	rjmp	.+238    	; 0x1e26 <GPIO_ReadPin+0x13c>
    1d38:	4d 81       	ldd	r20, Y+5	; 0x05
    1d3a:	5e 81       	ldd	r21, Y+6	; 0x06
    1d3c:	42 30       	cpi	r20, 0x02	; 2
    1d3e:	51 05       	cpc	r21, r1
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <GPIO_ReadPin+0x5a>
    1d42:	3d c0       	rjmp	.+122    	; 0x1dbe <GPIO_ReadPin+0xd4>
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	83 30       	cpi	r24, 0x03	; 3
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <GPIO_ReadPin+0x66>
    1d4e:	51 c0       	rjmp	.+162    	; 0x1df2 <GPIO_ReadPin+0x108>
    1d50:	6a c0       	rjmp	.+212    	; 0x1e26 <GPIO_ReadPin+0x13c>
		case PORTA_ID:
			if (BIT_IS_SET(PINA,pin_num) == LOGIC_HIGH){
    1d52:	e9 e3       	ldi	r30, 0x39	; 57
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	02 2e       	mov	r0, r18
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <GPIO_ReadPin+0x84>
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	0a 94       	dec	r0
    1d70:	e2 f7       	brpl	.-8      	; 0x1d6a <GPIO_ReadPin+0x80>
    1d72:	84 23       	and	r24, r20
    1d74:	95 23       	and	r25, r21
    1d76:	81 30       	cpi	r24, 0x01	; 1
    1d78:	91 05       	cpc	r25, r1
    1d7a:	19 f4       	brne	.+6      	; 0x1d82 <GPIO_ReadPin+0x98>
				pin_value = LOGIC_HIGH;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	52 c0       	rjmp	.+164    	; 0x1e26 <GPIO_ReadPin+0x13c>
			}
			else return pin_value = LOGIC_LOW;
    1d82:	19 82       	std	Y+1, r1	; 0x01
    1d84:	99 81       	ldd	r25, Y+1	; 0x01
    1d86:	9c 83       	std	Y+4, r25	; 0x04
    1d88:	50 c0       	rjmp	.+160    	; 0x1e2a <GPIO_ReadPin+0x140>
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB,pin_num)){
    1d8a:	e6 e3       	ldi	r30, 0x36	; 54
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	88 2f       	mov	r24, r24
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	a9 01       	movw	r20, r18
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <GPIO_ReadPin+0xb8>
    1d9e:	55 95       	asr	r21
    1da0:	47 95       	ror	r20
    1da2:	8a 95       	dec	r24
    1da4:	e2 f7       	brpl	.-8      	; 0x1d9e <GPIO_ReadPin+0xb4>
    1da6:	ca 01       	movw	r24, r20
    1da8:	81 70       	andi	r24, 0x01	; 1
    1daa:	90 70       	andi	r25, 0x00	; 0
    1dac:	88 23       	and	r24, r24
    1dae:	19 f0       	breq	.+6      	; 0x1db6 <GPIO_ReadPin+0xcc>
				pin_value = LOGIC_HIGH;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	38 c0       	rjmp	.+112    	; 0x1e26 <GPIO_ReadPin+0x13c>
			}
			else return pin_value = LOGIC_LOW;
    1db6:	19 82       	std	Y+1, r1	; 0x01
    1db8:	59 81       	ldd	r21, Y+1	; 0x01
    1dba:	5c 83       	std	Y+4, r21	; 0x04
    1dbc:	36 c0       	rjmp	.+108    	; 0x1e2a <GPIO_ReadPin+0x140>
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC,pin_num)){
    1dbe:	e3 e3       	ldi	r30, 0x33	; 51
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	a9 01       	movw	r20, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <GPIO_ReadPin+0xec>
    1dd2:	55 95       	asr	r21
    1dd4:	47 95       	ror	r20
    1dd6:	8a 95       	dec	r24
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <GPIO_ReadPin+0xe8>
    1dda:	ca 01       	movw	r24, r20
    1ddc:	81 70       	andi	r24, 0x01	; 1
    1dde:	90 70       	andi	r25, 0x00	; 0
    1de0:	88 23       	and	r24, r24
    1de2:	19 f0       	breq	.+6      	; 0x1dea <GPIO_ReadPin+0x100>
				pin_value = LOGIC_HIGH;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	1e c0       	rjmp	.+60     	; 0x1e26 <GPIO_ReadPin+0x13c>
			}
			else return pin_value = LOGIC_LOW;
    1dea:	19 82       	std	Y+1, r1	; 0x01
    1dec:	59 81       	ldd	r21, Y+1	; 0x01
    1dee:	5c 83       	std	Y+4, r21	; 0x04
    1df0:	1c c0       	rjmp	.+56     	; 0x1e2a <GPIO_ReadPin+0x140>
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND,pin_num)){
    1df2:	e0 e3       	ldi	r30, 0x30	; 48
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	88 2f       	mov	r24, r24
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	a9 01       	movw	r20, r18
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <GPIO_ReadPin+0x120>
    1e06:	55 95       	asr	r21
    1e08:	47 95       	ror	r20
    1e0a:	8a 95       	dec	r24
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <GPIO_ReadPin+0x11c>
    1e0e:	ca 01       	movw	r24, r20
    1e10:	81 70       	andi	r24, 0x01	; 1
    1e12:	90 70       	andi	r25, 0x00	; 0
    1e14:	88 23       	and	r24, r24
    1e16:	19 f0       	breq	.+6      	; 0x1e1e <GPIO_ReadPin+0x134>
				pin_value = LOGIC_HIGH;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	04 c0       	rjmp	.+8      	; 0x1e26 <GPIO_ReadPin+0x13c>
			}
			else return pin_value = LOGIC_LOW;
    1e1e:	19 82       	std	Y+1, r1	; 0x01
    1e20:	59 81       	ldd	r21, Y+1	; 0x01
    1e22:	5c 83       	std	Y+4, r21	; 0x04
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <GPIO_ReadPin+0x140>
			break;
		}
	}
	return pin_value;
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	8c 83       	std	Y+4, r24	; 0x04
    1e2a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1e2c:	26 96       	adiw	r28, 0x06	; 6
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <GPIO_SetupPortDirection>:


void GPIO_SetupPortDirection(uint8 port_num , GPIO_PortDirectionType direction)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <GPIO_SetupPortDirection+0x6>
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <GPIO_SetupPortDirection+0x8>
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS){
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	84 30       	cpi	r24, 0x04	; 4
    1e52:	90 f5       	brcc	.+100    	; 0x1eb8 <GPIO_SetupPortDirection+0x7a>

	}
	else
	{
		switch (port_num){
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	3c 83       	std	Y+4, r19	; 0x04
    1e5c:	2b 83       	std	Y+3, r18	; 0x03
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	91 05       	cpc	r25, r1
    1e66:	d1 f0       	breq	.+52     	; 0x1e9c <GPIO_SetupPortDirection+0x5e>
    1e68:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6c:	22 30       	cpi	r18, 0x02	; 2
    1e6e:	31 05       	cpc	r19, r1
    1e70:	2c f4       	brge	.+10     	; 0x1e7c <GPIO_SetupPortDirection+0x3e>
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	61 f0       	breq	.+24     	; 0x1e92 <GPIO_SetupPortDirection+0x54>
    1e7a:	1e c0       	rjmp	.+60     	; 0x1eb8 <GPIO_SetupPortDirection+0x7a>
    1e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e80:	22 30       	cpi	r18, 0x02	; 2
    1e82:	31 05       	cpc	r19, r1
    1e84:	81 f0       	breq	.+32     	; 0x1ea6 <GPIO_SetupPortDirection+0x68>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	83 30       	cpi	r24, 0x03	; 3
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	81 f0       	breq	.+32     	; 0x1eb0 <GPIO_SetupPortDirection+0x72>
    1e90:	13 c0       	rjmp	.+38     	; 0x1eb8 <GPIO_SetupPortDirection+0x7a>
		case PORTA_ID :
			DDRA = direction;
    1e92:	ea e3       	ldi	r30, 0x3A	; 58
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	80 83       	st	Z, r24
    1e9a:	0e c0       	rjmp	.+28     	; 0x1eb8 <GPIO_SetupPortDirection+0x7a>
			break;
		case PORTB_ID :
			DDRB = direction;
    1e9c:	e7 e3       	ldi	r30, 0x37	; 55
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	80 83       	st	Z, r24
    1ea4:	09 c0       	rjmp	.+18     	; 0x1eb8 <GPIO_SetupPortDirection+0x7a>
			break;
		case PORTC_ID :
			DDRC = direction;
    1ea6:	e4 e3       	ldi	r30, 0x34	; 52
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	80 83       	st	Z, r24
    1eae:	04 c0       	rjmp	.+8      	; 0x1eb8 <GPIO_SetupPortDirection+0x7a>
			break;
		case PORTD_ID :
			DDRD = direction;
    1eb0:	e1 e3       	ldi	r30, 0x31	; 49
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <GPIO_WritePort>:

void GPIO_WritePort(uint8 port_num , uint8 value)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <GPIO_WritePort+0x6>
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <GPIO_WritePort+0x8>
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS){
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	84 30       	cpi	r24, 0x04	; 4
    1eda:	90 f5       	brcc	.+100    	; 0x1f40 <GPIO_WritePort+0x7a>

	}
	else
	{
		switch (port_num){
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	3c 83       	std	Y+4, r19	; 0x04
    1ee4:	2b 83       	std	Y+3, r18	; 0x03
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	81 30       	cpi	r24, 0x01	; 1
    1eec:	91 05       	cpc	r25, r1
    1eee:	d1 f0       	breq	.+52     	; 0x1f24 <GPIO_WritePort+0x5e>
    1ef0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef4:	22 30       	cpi	r18, 0x02	; 2
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	2c f4       	brge	.+10     	; 0x1f04 <GPIO_WritePort+0x3e>
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	61 f0       	breq	.+24     	; 0x1f1a <GPIO_WritePort+0x54>
    1f02:	1e c0       	rjmp	.+60     	; 0x1f40 <GPIO_WritePort+0x7a>
    1f04:	2b 81       	ldd	r18, Y+3	; 0x03
    1f06:	3c 81       	ldd	r19, Y+4	; 0x04
    1f08:	22 30       	cpi	r18, 0x02	; 2
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	81 f0       	breq	.+32     	; 0x1f2e <GPIO_WritePort+0x68>
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	83 30       	cpi	r24, 0x03	; 3
    1f14:	91 05       	cpc	r25, r1
    1f16:	81 f0       	breq	.+32     	; 0x1f38 <GPIO_WritePort+0x72>
    1f18:	13 c0       	rjmp	.+38     	; 0x1f40 <GPIO_WritePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1f1a:	eb e3       	ldi	r30, 0x3B	; 59
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	80 83       	st	Z, r24
    1f22:	0e c0       	rjmp	.+28     	; 0x1f40 <GPIO_WritePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1f24:	e8 e3       	ldi	r30, 0x38	; 56
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	80 83       	st	Z, r24
    1f2c:	09 c0       	rjmp	.+18     	; 0x1f40 <GPIO_WritePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1f2e:	e5 e3       	ldi	r30, 0x35	; 53
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	80 83       	st	Z, r24
    1f36:	04 c0       	rjmp	.+8      	; 0x1f40 <GPIO_WritePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1f38:	e2 e3       	ldi	r30, 0x32	; 50
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <GPIO_ReadPort>:

uint8 GPIO_ReadPort(uint8 port_num)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <GPIO_ReadPort+0x6>
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <GPIO_ReadPort+0x8>
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1f5c:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS){
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	84 30       	cpi	r24, 0x04	; 4
    1f62:	90 f5       	brcc	.+100    	; 0x1fc8 <GPIO_ReadPort+0x7a>

	}
	else
	{
		switch(port_num){
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	3c 83       	std	Y+4, r19	; 0x04
    1f6c:	2b 83       	std	Y+3, r18	; 0x03
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	81 30       	cpi	r24, 0x01	; 1
    1f74:	91 05       	cpc	r25, r1
    1f76:	d1 f0       	breq	.+52     	; 0x1fac <GPIO_ReadPort+0x5e>
    1f78:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7c:	22 30       	cpi	r18, 0x02	; 2
    1f7e:	31 05       	cpc	r19, r1
    1f80:	2c f4       	brge	.+10     	; 0x1f8c <GPIO_ReadPort+0x3e>
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	61 f0       	breq	.+24     	; 0x1fa2 <GPIO_ReadPort+0x54>
    1f8a:	1e c0       	rjmp	.+60     	; 0x1fc8 <GPIO_ReadPort+0x7a>
    1f8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f90:	22 30       	cpi	r18, 0x02	; 2
    1f92:	31 05       	cpc	r19, r1
    1f94:	81 f0       	breq	.+32     	; 0x1fb6 <GPIO_ReadPort+0x68>
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	83 30       	cpi	r24, 0x03	; 3
    1f9c:	91 05       	cpc	r25, r1
    1f9e:	81 f0       	breq	.+32     	; 0x1fc0 <GPIO_ReadPort+0x72>
    1fa0:	13 c0       	rjmp	.+38     	; 0x1fc8 <GPIO_ReadPort+0x7a>
		case PORTA_ID:
			value = PINA;
    1fa2:	e9 e3       	ldi	r30, 0x39	; 57
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	0e c0       	rjmp	.+28     	; 0x1fc8 <GPIO_ReadPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1fac:	e6 e3       	ldi	r30, 0x36	; 54
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	89 83       	std	Y+1, r24	; 0x01
    1fb4:	09 c0       	rjmp	.+18     	; 0x1fc8 <GPIO_ReadPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1fb6:	e3 e3       	ldi	r30, 0x33	; 51
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	04 c0       	rjmp	.+8      	; 0x1fc8 <GPIO_ReadPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1fc0:	e0 e3       	ldi	r30, 0x30	; 48
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <TWI_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <TWI_init+0x6>
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <TWI_init+0x8>
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <TWI_init+0xa>
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
	uint32 twbr_value;

	TWCR = (1 << TWEN); /* enable TWI */
    1fea:	e6 e5       	ldi	r30, 0x56	; 86
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	84 e0       	ldi	r24, 0x04	; 4
    1ff0:	80 83       	st	Z, r24

	TWSR = 0; // Prescaler = 1
    1ff2:	e1 e2       	ldi	r30, 0x21	; 33
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	10 82       	st	Z, r1

	twbr_value = ((F_CPU/(2*Config_Ptr->bit_rate)))-8; // The value '8' changes if prescaler is changed
    1ff8:	ed 81       	ldd	r30, Y+5	; 0x05
    1ffa:	fe 81       	ldd	r31, Y+6	; 0x06
    1ffc:	81 81       	ldd	r24, Z+1	; 0x01
    1ffe:	92 81       	ldd	r25, Z+2	; 0x02
    2000:	a3 81       	ldd	r26, Z+3	; 0x03
    2002:	b4 81       	ldd	r27, Z+4	; 0x04
    2004:	9c 01       	movw	r18, r24
    2006:	ad 01       	movw	r20, r26
    2008:	22 0f       	add	r18, r18
    200a:	33 1f       	adc	r19, r19
    200c:	44 1f       	adc	r20, r20
    200e:	55 1f       	adc	r21, r21
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	92 e1       	ldi	r25, 0x12	; 18
    2014:	aa e7       	ldi	r26, 0x7A	; 122
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodsi4>
    2020:	da 01       	movw	r26, r20
    2022:	c9 01       	movw	r24, r18
    2024:	08 97       	sbiw	r24, 0x08	; 8
    2026:	a1 09       	sbc	r26, r1
    2028:	b1 09       	sbc	r27, r1
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	ab 83       	std	Y+3, r26	; 0x03
    2030:	bc 83       	std	Y+4, r27	; 0x04

	TWBR = twbr_value;
    2032:	e0 e2       	ldi	r30, 0x20	; 32
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	80 83       	st	Z, r24

	TWAR = ((Config_Ptr->address) << TWA0 ); // Slave address of the TWI unit
    203a:	a2 e2       	ldi	r26, 0x22	; 34
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	ed 81       	ldd	r30, Y+5	; 0x05
    2040:	fe 81       	ldd	r31, Y+6	; 0x06
    2042:	80 81       	ld	r24, Z
    2044:	88 0f       	add	r24, r24
    2046:	8c 93       	st	X, r24
}
    2048:	26 96       	adiw	r28, 0x06	; 6
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <TWI_Start>:

void TWI_Start(void)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2062:	e6 e5       	ldi	r30, 0x56	; 86
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	84 ea       	ldi	r24, 0xA4	; 164
    2068:	80 83       	st	Z, r24

	while (BIT_IS_CLEAR(TWCR,TWINT));
    206a:	e6 e5       	ldi	r30, 0x56	; 86
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	88 23       	and	r24, r24
    2072:	dc f7       	brge	.-10     	; 0x206a <TWI_Start+0x10>
}
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <TWI_Stop>:

void TWI_Stop(void)
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2082:	e6 e5       	ldi	r30, 0x56	; 86
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	84 e9       	ldi	r24, 0x94	; 148
    2088:	80 83       	st	Z, r24
}
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <TWI_WriteByte>:

void TWI_WriteByte(uint8 data)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	0f 92       	push	r0
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    209c:	e3 e2       	ldi	r30, 0x23	; 35
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	80 83       	st	Z, r24

    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    20a4:	e6 e5       	ldi	r30, 0x56	; 86
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	84 e8       	ldi	r24, 0x84	; 132
    20aa:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    20ac:	e6 e5       	ldi	r30, 0x56	; 86
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	88 23       	and	r24, r24
    20b4:	dc f7       	brge	.-10     	; 0x20ac <TWI_WriteByte+0x1c>
}
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <TWI_ReadByteWithACK>:

uint8 TWI_ReadByteWithACK(void)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
    20c6:	e6 e5       	ldi	r30, 0x56	; 86
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	84 ec       	ldi	r24, 0xC4	; 196
    20cc:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    20ce:	e6 e5       	ldi	r30, 0x56	; 86
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	88 23       	and	r24, r24
    20d6:	dc f7       	brge	.-10     	; 0x20ce <TWI_ReadByteWithACK+0x10>

	/* Read Data */
	return TWDR;
    20d8:	e3 e2       	ldi	r30, 0x23	; 35
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
}
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <TWI_ReadByteWithNACK>:

uint8 TWI_ReadByteWithNACK(void)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    20ec:	e6 e5       	ldi	r30, 0x56	; 86
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	84 e8       	ldi	r24, 0x84	; 132
    20f2:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    20f4:	e6 e5       	ldi	r30, 0x56	; 86
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	88 23       	and	r24, r24
    20fc:	dc f7       	brge	.-10     	; 0x20f4 <TWI_ReadByteWithNACK+0x10>

	/* Read Data */
	return TWDR;
    20fe:	e3 e2       	ldi	r30, 0x23	; 35
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
}
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <TWI_GetStatus>:

uint8 TWI_GetStatus(void)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	0f 92       	push	r0
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
	uint8 status;

	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    2114:	e1 e2       	ldi	r30, 0x21	; 33
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	88 7f       	andi	r24, 0xF8	; 248
    211c:	89 83       	std	Y+1, r24	; 0x01

	return status;
    211e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2120:	0f 90       	pop	r0
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <PWM_Timer0_Start>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void PWM_Timer0_Start(uint8 duty_cycle)
{
    2128:	0f 93       	push	r16
    212a:	1f 93       	push	r17
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	0f 92       	push	r0
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	89 83       	std	Y+1, r24	; 0x01
	/* Set Timer Initial Value to 0 */
	TCNT0 = 0;
    2138:	e2 e5       	ldi	r30, 0x52	; 82
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	10 82       	st	Z, r1
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    213e:	e3 e5       	ldi	r30, 0x53	; 83
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	8a e6       	ldi	r24, 0x6A	; 106
    2144:	80 83       	st	Z, r24

	/*Set Compare value*/
	OCR0  = (uint8)(((float32)duty_cycle/100)*(TIMER_MAX_COUNT));
    2146:	0c e5       	ldi	r16, 0x5C	; 92
    2148:	10 e0       	ldi	r17, 0x00	; 0
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	88 2f       	mov	r24, r24
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	a0 e0       	ldi	r26, 0x00	; 0
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	bc 01       	movw	r22, r24
    2156:	cd 01       	movw	r24, r26
    2158:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	bc 01       	movw	r22, r24
    2162:	cd 01       	movw	r24, r26
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	48 ec       	ldi	r20, 0xC8	; 200
    216a:	52 e4       	ldi	r21, 0x42	; 66
    216c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	bc 01       	movw	r22, r24
    2176:	cd 01       	movw	r24, r26
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	4f e7       	ldi	r20, 0x7F	; 127
    217e:	53 e4       	ldi	r21, 0x43	; 67
    2180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	f8 01       	movw	r30, r16
    2196:	80 83       	st	Z, r24

	GPIO_SetPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	63 e0       	ldi	r22, 0x03	; 3
    219c:	41 e0       	ldi	r20, 0x01	; 1
    219e:	0e 94 9f 0c 	call	0x193e	; 0x193e <GPIO_SetPinDirection>
}
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	08 95       	ret

000021ae <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect){
    21ae:	1f 92       	push	r1
    21b0:	0f 92       	push	r0
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	0f 92       	push	r0
    21b6:	11 24       	eor	r1, r1
    21b8:	2f 93       	push	r18
    21ba:	3f 93       	push	r19
    21bc:	4f 93       	push	r20
    21be:	5f 93       	push	r21
    21c0:	6f 93       	push	r22
    21c2:	7f 93       	push	r23
    21c4:	8f 93       	push	r24
    21c6:	9f 93       	push	r25
    21c8:	af 93       	push	r26
    21ca:	bf 93       	push	r27
    21cc:	ef 93       	push	r30
    21ce:	ff 93       	push	r31
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
	if (CallBackPtr != NULL_PTR){
    21d8:	80 91 7b 01 	lds	r24, 0x017B
    21dc:	90 91 7c 01 	lds	r25, 0x017C
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	29 f0       	breq	.+10     	; 0x21ee <__vector_7+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		CallBackPtr();
    21e4:	e0 91 7b 01 	lds	r30, 0x017B
    21e8:	f0 91 7c 01 	lds	r31, 0x017C
    21ec:	09 95       	icall
	}
}
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	ff 91       	pop	r31
    21f4:	ef 91       	pop	r30
    21f6:	bf 91       	pop	r27
    21f8:	af 91       	pop	r26
    21fa:	9f 91       	pop	r25
    21fc:	8f 91       	pop	r24
    21fe:	7f 91       	pop	r23
    2200:	6f 91       	pop	r22
    2202:	5f 91       	pop	r21
    2204:	4f 91       	pop	r20
    2206:	3f 91       	pop	r19
    2208:	2f 91       	pop	r18
    220a:	0f 90       	pop	r0
    220c:	0f be       	out	0x3f, r0	; 63
    220e:	0f 90       	pop	r0
    2210:	1f 90       	pop	r1
    2212:	18 95       	reti

00002214 <__vector_8>:

ISR(TIMER1_COMPB_vect){
    2214:	1f 92       	push	r1
    2216:	0f 92       	push	r0
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	0f 92       	push	r0
    221c:	11 24       	eor	r1, r1
    221e:	2f 93       	push	r18
    2220:	3f 93       	push	r19
    2222:	4f 93       	push	r20
    2224:	5f 93       	push	r21
    2226:	6f 93       	push	r22
    2228:	7f 93       	push	r23
    222a:	8f 93       	push	r24
    222c:	9f 93       	push	r25
    222e:	af 93       	push	r26
    2230:	bf 93       	push	r27
    2232:	ef 93       	push	r30
    2234:	ff 93       	push	r31
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
	if (CallBackPtr != NULL_PTR){
    223e:	80 91 7b 01 	lds	r24, 0x017B
    2242:	90 91 7c 01 	lds	r25, 0x017C
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	29 f0       	breq	.+10     	; 0x2254 <__vector_8+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		CallBackPtr();
    224a:	e0 91 7b 01 	lds	r30, 0x017B
    224e:	f0 91 7c 01 	lds	r31, 0x017C
    2252:	09 95       	icall
	}
}
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	ff 91       	pop	r31
    225a:	ef 91       	pop	r30
    225c:	bf 91       	pop	r27
    225e:	af 91       	pop	r26
    2260:	9f 91       	pop	r25
    2262:	8f 91       	pop	r24
    2264:	7f 91       	pop	r23
    2266:	6f 91       	pop	r22
    2268:	5f 91       	pop	r21
    226a:	4f 91       	pop	r20
    226c:	3f 91       	pop	r19
    226e:	2f 91       	pop	r18
    2270:	0f 90       	pop	r0
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	0f 90       	pop	r0
    2276:	1f 90       	pop	r1
    2278:	18 95       	reti

0000227a <__vector_9>:

ISR(TIMER1_OVF_vect){
    227a:	1f 92       	push	r1
    227c:	0f 92       	push	r0
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	0f 92       	push	r0
    2282:	11 24       	eor	r1, r1
    2284:	2f 93       	push	r18
    2286:	3f 93       	push	r19
    2288:	4f 93       	push	r20
    228a:	5f 93       	push	r21
    228c:	6f 93       	push	r22
    228e:	7f 93       	push	r23
    2290:	8f 93       	push	r24
    2292:	9f 93       	push	r25
    2294:	af 93       	push	r26
    2296:	bf 93       	push	r27
    2298:	ef 93       	push	r30
    229a:	ff 93       	push	r31
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
	if (CallBackPtr != NULL_PTR){
    22a4:	80 91 7b 01 	lds	r24, 0x017B
    22a8:	90 91 7c 01 	lds	r25, 0x017C
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	29 f0       	breq	.+10     	; 0x22ba <__vector_9+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		CallBackPtr();
    22b0:	e0 91 7b 01 	lds	r30, 0x017B
    22b4:	f0 91 7c 01 	lds	r31, 0x017C
    22b8:	09 95       	icall
	}
}
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	ff 91       	pop	r31
    22c0:	ef 91       	pop	r30
    22c2:	bf 91       	pop	r27
    22c4:	af 91       	pop	r26
    22c6:	9f 91       	pop	r25
    22c8:	8f 91       	pop	r24
    22ca:	7f 91       	pop	r23
    22cc:	6f 91       	pop	r22
    22ce:	5f 91       	pop	r21
    22d0:	4f 91       	pop	r20
    22d2:	3f 91       	pop	r19
    22d4:	2f 91       	pop	r18
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	0f 90       	pop	r0
    22dc:	1f 90       	pop	r1
    22de:	18 95       	reti

000022e0 <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
 {
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <Timer1_init+0x6>
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	9a 83       	std	Y+2, r25	; 0x02
    22ec:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr -> initial_value ; /* Set timer1 initial value */
    22ee:	ac e4       	ldi	r26, 0x4C	; 76
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e9 81       	ldd	r30, Y+1	; 0x01
    22f4:	fa 81       	ldd	r31, Y+2	; 0x02
    22f6:	80 81       	ld	r24, Z
    22f8:	91 81       	ldd	r25, Z+1	; 0x01
    22fa:	11 96       	adiw	r26, 0x01	; 1
    22fc:	9c 93       	st	X, r25
    22fe:	8e 93       	st	-X, r24

	/* FOC1A=1 FOC1B=1 These bits are only active in case non-pwm mode */
	TCCR1A = (1<< FOC1A) | (1<< FOC1B);
    2300:	ef e4       	ldi	r30, 0x4F	; 79
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	8c e0       	ldi	r24, 0x0C	; 12
    2306:	80 83       	st	Z, r24

	/* Configurable Prescaler value */
	TCCR1B = (Config_Ptr->prescaler) ;
    2308:	ae e4       	ldi	r26, 0x4E	; 78
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e9 81       	ldd	r30, Y+1	; 0x01
    230e:	fa 81       	ldd	r31, Y+2	; 0x02
    2310:	84 81       	ldd	r24, Z+4	; 0x04
    2312:	8c 93       	st	X, r24

	if (Config_Ptr -> mode == NORMAL_MODE){
    2314:	e9 81       	ldd	r30, Y+1	; 0x01
    2316:	fa 81       	ldd	r31, Y+2	; 0x02
    2318:	85 81       	ldd	r24, Z+5	; 0x05
    231a:	88 23       	and	r24, r24
    231c:	41 f4       	brne	.+16     	; 0x232e <Timer1_init+0x4e>
		/*In case of normal(overflow) mode , Enable the overflow interrupt*/
		TIMSK |= (1<<TOIE1);
    231e:	a9 e5       	ldi	r26, 0x59	; 89
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	e9 e5       	ldi	r30, 0x59	; 89
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	84 60       	ori	r24, 0x04	; 4
    232a:	8c 93       	st	X, r24
    232c:	1c c0       	rjmp	.+56     	; 0x2366 <Timer1_init+0x86>
	}
	else if (Config_Ptr -> mode == COMPARE_MODE){
    232e:	e9 81       	ldd	r30, Y+1	; 0x01
    2330:	fa 81       	ldd	r31, Y+2	; 0x02
    2332:	85 81       	ldd	r24, Z+5	; 0x05
    2334:	81 30       	cpi	r24, 0x01	; 1
    2336:	b9 f4       	brne	.+46     	; 0x2366 <Timer1_init+0x86>
		OCR1A   = Config_Ptr -> compare_value ; /* Set the compare value */
    2338:	aa e4       	ldi	r26, 0x4A	; 74
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e9 81       	ldd	r30, Y+1	; 0x01
    233e:	fa 81       	ldd	r31, Y+2	; 0x02
    2340:	82 81       	ldd	r24, Z+2	; 0x02
    2342:	93 81       	ldd	r25, Z+3	; 0x03
    2344:	11 96       	adiw	r26, 0x01	; 1
    2346:	9c 93       	st	X, r25
    2348:	8e 93       	st	-X, r24
		TCCR1B |= (1<< WGM12); /*Enable CTC mode*/
    234a:	ae e4       	ldi	r26, 0x4E	; 78
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	ee e4       	ldi	r30, 0x4E	; 78
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	88 60       	ori	r24, 0x08	; 8
    2356:	8c 93       	st	X, r24
		TIMSK  |= (1<<OCIE1A); /*Enable Compare A match interrupt*/
    2358:	a9 e5       	ldi	r26, 0x59	; 89
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e9 e5       	ldi	r30, 0x59	; 89
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	80 61       	ori	r24, 0x10	; 16
    2364:	8c 93       	st	X, r24
	}

 }
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <Timer1_deInit>:

void Timer1_deInit(void)
 {
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCNT1  = 0;
    2378:	ec e4       	ldi	r30, 0x4C	; 76
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	11 82       	std	Z+1, r1	; 0x01
    237e:	10 82       	st	Z, r1
	TCCR1A = 0;
    2380:	ef e4       	ldi	r30, 0x4F	; 79
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	10 82       	st	Z, r1
	TCCR1B = 0;
    2386:	ee e4       	ldi	r30, 0x4E	; 78
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	CLEAR_BIT( TIMSK , OCIE1A );
    238c:	a9 e5       	ldi	r26, 0x59	; 89
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e9 e5       	ldi	r30, 0x59	; 89
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	8f 7e       	andi	r24, 0xEF	; 239
    2398:	8c 93       	st	X, r24
	CLEAR_BIT( TIMSK , TOIE1  );
    239a:	a9 e5       	ldi	r26, 0x59	; 89
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e9 e5       	ldi	r30, 0x59	; 89
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	8b 7f       	andi	r24, 0xFB	; 251
    23a6:	8c 93       	st	X, r24

 }
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
 {
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <Timer1_setCallBack+0x6>
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	CallBackPtr = a_ptr;
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	90 93 7c 01 	sts	0x017C, r25
    23c4:	80 93 7b 01 	sts	0x017B, r24
 }
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <UART_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void UART_init(const UART_ConfigType * Config_Ptr)
{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <UART_init+0x6>
    23d8:	00 d0       	rcall	.+0      	; 0x23da <UART_init+0x8>
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	9c 83       	std	Y+4, r25	; 0x04
    23e0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    23e2:	1a 82       	std	Y+2, r1	; 0x02
    23e4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA |= (1<<U2X);
    23e6:	ab e2       	ldi	r26, 0x2B	; 43
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	eb e2       	ldi	r30, 0x2B	; 43
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	82 60       	ori	r24, 0x02	; 2
    23f2:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * Configurable bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    23f4:	ea e2       	ldi	r30, 0x2A	; 42
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	88 e1       	ldi	r24, 0x18	; 24
    23fa:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB) | ((Config_Ptr->bit_data) & 4);
    23fc:	aa e2       	ldi	r26, 0x2A	; 42
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	ea e2       	ldi	r30, 0x2A	; 42
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	98 2f       	mov	r25, r24
    2408:	9b 7f       	andi	r25, 0xFB	; 251
    240a:	eb 81       	ldd	r30, Y+3	; 0x03
    240c:	fc 81       	ldd	r31, Y+4	; 0x04
    240e:	80 81       	ld	r24, Z
    2410:	84 70       	andi	r24, 0x04	; 4
    2412:	89 2b       	or	r24, r25
    2414:	8c 93       	st	X, r24
	 * UPM1:0  = - Configurable parity bit
	 * USBS    = - Configurable number of stop bits
	 * UCSZ1:0 = - Configurable bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    2416:	e0 e4       	ldi	r30, 0x40	; 64
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 e8       	ldi	r24, 0x80	; 128
    241c:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)   << UPM0 );
    241e:	a0 e4       	ldi	r26, 0x40	; 64
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e0 e4       	ldi	r30, 0x40	; 64
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	28 2f       	mov	r18, r24
    242a:	2f 7c       	andi	r18, 0xCF	; 207
    242c:	eb 81       	ldd	r30, Y+3	; 0x03
    242e:	fc 81       	ldd	r31, Y+4	; 0x04
    2430:	81 81       	ldd	r24, Z+1	; 0x01
    2432:	88 2f       	mov	r24, r24
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	82 95       	swap	r24
    2438:	92 95       	swap	r25
    243a:	90 7f       	andi	r25, 0xF0	; 240
    243c:	98 27       	eor	r25, r24
    243e:	80 7f       	andi	r24, 0xF0	; 240
    2440:	98 27       	eor	r25, r24
    2442:	82 2b       	or	r24, r18
    2444:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit) << USBS  );
    2446:	a0 e4       	ldi	r26, 0x40	; 64
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e0 e4       	ldi	r30, 0x40	; 64
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	28 2f       	mov	r18, r24
    2452:	27 7f       	andi	r18, 0xF7	; 247
    2454:	eb 81       	ldd	r30, Y+3	; 0x03
    2456:	fc 81       	ldd	r31, Y+4	; 0x04
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	88 2f       	mov	r24, r24
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	88 0f       	add	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	88 0f       	add	r24, r24
    2464:	99 1f       	adc	r25, r25
    2466:	88 0f       	add	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	82 2b       	or	r24, r18
    246c:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->bit_data) & 3) << UCSZ0 );
    246e:	a0 e4       	ldi	r26, 0x40	; 64
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e0 e4       	ldi	r30, 0x40	; 64
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	28 2f       	mov	r18, r24
    247a:	29 7f       	andi	r18, 0xF9	; 249
    247c:	eb 81       	ldd	r30, Y+3	; 0x03
    247e:	fc 81       	ldd	r31, Y+4	; 0x04
    2480:	80 81       	ld	r24, Z
    2482:	88 2f       	mov	r24, r24
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	83 70       	andi	r24, 0x03	; 3
    2488:	90 70       	andi	r25, 0x00	; 0
    248a:	88 0f       	add	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	82 2b       	or	r24, r18
    2490:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (8UL * Config_Ptr->baud_rate)))-1);
    2492:	eb 81       	ldd	r30, Y+3	; 0x03
    2494:	fc 81       	ldd	r31, Y+4	; 0x04
    2496:	83 81       	ldd	r24, Z+3	; 0x03
    2498:	94 81       	ldd	r25, Z+4	; 0x04
    249a:	a5 81       	ldd	r26, Z+5	; 0x05
    249c:	b6 81       	ldd	r27, Z+6	; 0x06
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	aa 1f       	adc	r26, r26
    24a4:	bb 1f       	adc	r27, r27
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	aa 1f       	adc	r26, r26
    24ac:	bb 1f       	adc	r27, r27
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	aa 1f       	adc	r26, r26
    24b4:	bb 1f       	adc	r27, r27
    24b6:	9c 01       	movw	r18, r24
    24b8:	ad 01       	movw	r20, r26
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	92 e1       	ldi	r25, 0x12	; 18
    24be:	aa e7       	ldi	r26, 0x7A	; 122
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	bc 01       	movw	r22, r24
    24c4:	cd 01       	movw	r24, r26
    24c6:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodsi4>
    24ca:	da 01       	movw	r26, r20
    24cc:	c9 01       	movw	r24, r18
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	9a 83       	std	Y+2, r25	; 0x02
    24d2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (ubrr_value>>8);
    24d4:	e0 e4       	ldi	r30, 0x40	; 64
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	9a 81       	ldd	r25, Y+2	; 0x02
    24dc:	89 2f       	mov	r24, r25
    24de:	99 27       	eor	r25, r25
    24e0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    24e2:	e9 e2       	ldi	r30, 0x29	; 41
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	80 83       	st	Z, r24
}
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <UART_SendByte>:

void UART_SendByte(uint8 data)
{
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	0f 92       	push	r0
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA,UDRE));
    2504:	eb e2       	ldi	r30, 0x2B	; 43
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	88 2f       	mov	r24, r24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	80 72       	andi	r24, 0x20	; 32
    2510:	90 70       	andi	r25, 0x00	; 0
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	b9 f3       	breq	.-18     	; 0x2504 <UART_SendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2516:	ec e2       	ldi	r30, 0x2C	; 44
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	80 83       	st	Z, r24
}
    251e:	0f 90       	pop	r0
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <UART_ReceiveByte>:

uint8 UART_ReceiveByte(void)
{
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA,RXC));
    252e:	eb e2       	ldi	r30, 0x2B	; 43
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	88 23       	and	r24, r24
    2536:	dc f7       	brge	.-10     	; 0x252e <UART_ReceiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2538:	ec e2       	ldi	r30, 0x2C	; 44
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
}
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <UART_SendString>:

void UART_SendString(uint8 *string)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	00 d0       	rcall	.+0      	; 0x254a <UART_SendString+0x6>
    254a:	0f 92       	push	r0
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	9b 83       	std	Y+3, r25	; 0x03
    2552:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2554:	19 82       	std	Y+1, r1	; 0x01
    2556:	0e c0       	rjmp	.+28     	; 0x2574 <UART_SendString+0x30>

	/* Send the whole string */
	while(string[i] != '\0'){
		UART_SendByte(string[i]);
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	28 2f       	mov	r18, r24
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	9b 81       	ldd	r25, Y+3	; 0x03
    2562:	fc 01       	movw	r30, r24
    2564:	e2 0f       	add	r30, r18
    2566:	f3 1f       	adc	r31, r19
    2568:	80 81       	ld	r24, Z
    256a:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <UART_SendByte>
		i++;
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	8f 5f       	subi	r24, 0xFF	; 255
    2572:	89 83       	std	Y+1, r24	; 0x01
void UART_SendString(uint8 *string)
{
	uint8 i=0;

	/* Send the whole string */
	while(string[i] != '\0'){
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	9b 81       	ldd	r25, Y+3	; 0x03
    257e:	fc 01       	movw	r30, r24
    2580:	e2 0f       	add	r30, r18
    2582:	f3 1f       	adc	r31, r19
    2584:	80 81       	ld	r24, Z
    2586:	88 23       	and	r24, r24
    2588:	39 f7       	brne	.-50     	; 0x2558 <UART_SendString+0x14>
		UART_SendByte(string[i]);
		i++;
	}
}
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	08 95       	ret

00002596 <UART_ReceiveString>:

void UART_ReceiveString (uint8 *string)
{
    2596:	0f 93       	push	r16
    2598:	1f 93       	push	r17
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	00 d0       	rcall	.+0      	; 0x25a0 <UART_ReceiveString+0xa>
    25a0:	0f 92       	push	r0
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	9b 83       	std	Y+3, r25	; 0x03
    25a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    25aa:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	string[i] = UART_ReceiveByte();
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	28 2f       	mov	r18, r24
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	9b 81       	ldd	r25, Y+3	; 0x03
    25b6:	8c 01       	movw	r16, r24
    25b8:	02 0f       	add	r16, r18
    25ba:	13 1f       	adc	r17, r19
    25bc:	0e 94 93 12 	call	0x2526	; 0x2526 <UART_ReceiveByte>
    25c0:	f8 01       	movw	r30, r16
    25c2:	80 83       	st	Z, r24
    25c4:	0f c0       	rjmp	.+30     	; 0x25e4 <UART_ReceiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (string[i] != '#'){
		i++;
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	8f 5f       	subi	r24, 0xFF	; 255
    25ca:	89 83       	std	Y+1, r24	; 0x01
		string[i]= UART_ReceiveByte();
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	28 2f       	mov	r18, r24
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	9b 81       	ldd	r25, Y+3	; 0x03
    25d6:	8c 01       	movw	r16, r24
    25d8:	02 0f       	add	r16, r18
    25da:	13 1f       	adc	r17, r19
    25dc:	0e 94 93 12 	call	0x2526	; 0x2526 <UART_ReceiveByte>
    25e0:	f8 01       	movw	r30, r16
    25e2:	80 83       	st	Z, r24

	/* Receive the first byte */
	string[i] = UART_ReceiveByte();

	/* Receive the whole string until the '#' */
	while (string[i] != '#'){
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	fc 01       	movw	r30, r24
    25f0:	e2 0f       	add	r30, r18
    25f2:	f3 1f       	adc	r31, r19
    25f4:	80 81       	ld	r24, Z
    25f6:	83 32       	cpi	r24, 0x23	; 35
    25f8:	31 f7       	brne	.-52     	; 0x25c6 <UART_ReceiveString+0x30>
		i++;
		string[i]= UART_ReceiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	string[i] = '\0';
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	28 2f       	mov	r18, r24
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	9b 81       	ldd	r25, Y+3	; 0x03
    2604:	fc 01       	movw	r30, r24
    2606:	e2 0f       	add	r30, r18
    2608:	f3 1f       	adc	r31, r19
    260a:	10 82       	st	Z, r1
}
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	1f 91       	pop	r17
    2618:	0f 91       	pop	r16
    261a:	08 95       	ret

0000261c <__udivmodsi4>:
    261c:	a1 e2       	ldi	r26, 0x21	; 33
    261e:	1a 2e       	mov	r1, r26
    2620:	aa 1b       	sub	r26, r26
    2622:	bb 1b       	sub	r27, r27
    2624:	fd 01       	movw	r30, r26
    2626:	0d c0       	rjmp	.+26     	; 0x2642 <__udivmodsi4_ep>

00002628 <__udivmodsi4_loop>:
    2628:	aa 1f       	adc	r26, r26
    262a:	bb 1f       	adc	r27, r27
    262c:	ee 1f       	adc	r30, r30
    262e:	ff 1f       	adc	r31, r31
    2630:	a2 17       	cp	r26, r18
    2632:	b3 07       	cpc	r27, r19
    2634:	e4 07       	cpc	r30, r20
    2636:	f5 07       	cpc	r31, r21
    2638:	20 f0       	brcs	.+8      	; 0x2642 <__udivmodsi4_ep>
    263a:	a2 1b       	sub	r26, r18
    263c:	b3 0b       	sbc	r27, r19
    263e:	e4 0b       	sbc	r30, r20
    2640:	f5 0b       	sbc	r31, r21

00002642 <__udivmodsi4_ep>:
    2642:	66 1f       	adc	r22, r22
    2644:	77 1f       	adc	r23, r23
    2646:	88 1f       	adc	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	1a 94       	dec	r1
    264c:	69 f7       	brne	.-38     	; 0x2628 <__udivmodsi4_loop>
    264e:	60 95       	com	r22
    2650:	70 95       	com	r23
    2652:	80 95       	com	r24
    2654:	90 95       	com	r25
    2656:	9b 01       	movw	r18, r22
    2658:	ac 01       	movw	r20, r24
    265a:	bd 01       	movw	r22, r26
    265c:	cf 01       	movw	r24, r30
    265e:	08 95       	ret

00002660 <__prologue_saves__>:
    2660:	2f 92       	push	r2
    2662:	3f 92       	push	r3
    2664:	4f 92       	push	r4
    2666:	5f 92       	push	r5
    2668:	6f 92       	push	r6
    266a:	7f 92       	push	r7
    266c:	8f 92       	push	r8
    266e:	9f 92       	push	r9
    2670:	af 92       	push	r10
    2672:	bf 92       	push	r11
    2674:	cf 92       	push	r12
    2676:	df 92       	push	r13
    2678:	ef 92       	push	r14
    267a:	ff 92       	push	r15
    267c:	0f 93       	push	r16
    267e:	1f 93       	push	r17
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	ca 1b       	sub	r28, r26
    268a:	db 0b       	sbc	r29, r27
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	09 94       	ijmp

00002698 <__epilogue_restores__>:
    2698:	2a 88       	ldd	r2, Y+18	; 0x12
    269a:	39 88       	ldd	r3, Y+17	; 0x11
    269c:	48 88       	ldd	r4, Y+16	; 0x10
    269e:	5f 84       	ldd	r5, Y+15	; 0x0f
    26a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    26a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    26a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    26a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    26a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    26aa:	b9 84       	ldd	r11, Y+9	; 0x09
    26ac:	c8 84       	ldd	r12, Y+8	; 0x08
    26ae:	df 80       	ldd	r13, Y+7	; 0x07
    26b0:	ee 80       	ldd	r14, Y+6	; 0x06
    26b2:	fd 80       	ldd	r15, Y+5	; 0x05
    26b4:	0c 81       	ldd	r16, Y+4	; 0x04
    26b6:	1b 81       	ldd	r17, Y+3	; 0x03
    26b8:	aa 81       	ldd	r26, Y+2	; 0x02
    26ba:	b9 81       	ldd	r27, Y+1	; 0x01
    26bc:	ce 0f       	add	r28, r30
    26be:	d1 1d       	adc	r29, r1
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	ed 01       	movw	r28, r26
    26cc:	08 95       	ret

000026ce <_exit>:
    26ce:	f8 94       	cli

000026d0 <__stop_program>:
    26d0:	ff cf       	rjmp	.-2      	; 0x26d0 <__stop_program>
